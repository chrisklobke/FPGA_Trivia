
final_project_sw.elf:     file format elf32-littlenios2
final_project_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020230

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x000052e0 memsz 0x000052e0 flags r-x
    LOAD off    0x00007000 vaddr 0x00000000 paddr 0x04025300 align 2**12
         filesz 0x00000a24 memsz 0x00000ce4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000050d0  04020230  04020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006e0  00000000  04025300  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000344  000006e0  040259e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002c0  00000a24  04025d24  00007a24  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00000ce4  00000ce4  00007a24  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04025d24  04025d24  00007a24  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00007a24  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000720  00000000  00000000  00007a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000099fd  00000000  00000000  00008168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003446  00000000  00000000  00011b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003c3b  00000000  00000000  00014fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000fd4  00000000  00000000  00018be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002259  00000000  00000000  00019bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001773  00000000  00000000  0001be15  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0001d588  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000318  00000000  00000000  0001d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001f936  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0001f939  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001f945  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001f946  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001f947  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001f94b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001f94f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0001f953  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0001f95e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0001f969  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000013  00000000  00000000  0001f974  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  0001f987  2**0
                  CONTENTS, READONLY
 30 .jdi          000059fe  00000000  00000000  0001f9b5  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00076fec  00000000  00000000  000253b3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020230 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
000006e0 l    d  .rwdata	00000000 .rwdata
00000a24 l    d  .bss	00000000 .bss
00000ce4 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
04025d24 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_sw_bsp//obj/HAL/src/crt0.o
04020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sw.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000a24 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04022cdc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000006f0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
040234ac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04023644 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04023780 l     F .text	00000034 alt_dev_reg
000007d0 l     O .rwdata	0000002c jtag_uart_0
000007fc l     O .rwdata	00000048 video_character_buffer_with_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04023b34 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04024060 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04024194 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040241c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040246b0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04024810 l     F .text	0000003c alt_get_errno
0402484c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000a48 g     O .bss	00000004 alt_instruction_exception_handler
04022620 g     F .text	000002b0 displayQuestion
04023598 g     F .text	0000007c alt_main
04022bb8 g     F .text	00000080 _puts_r
00000be4 g     O .bss	00000100 alt_irq
040259e0 g       *ABS*	00000000 __flash_rwdata_start
00000a4c g     O .bss	00000168 questions
04022b6c g     F .text	0000004c printf
04023db0 g     F .text	000000fc alt_up_char_buffer_string
04023ce4 g     F .text	000000cc alt_up_char_buffer_draw
040219e8 g     F .text	00000094 getSSEG1value
000009f4 g     O .rwdata	00000004 n
04024cbc g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000000c __reset
04020020 g       *ABS*	00000000 __flash_exceptions_start
00000a2c g     O .bss	00000004 errno
040207fc g     F .text	00000aac fillQuestions
00000a34 g     O .bss	00000004 alt_argv
000089ec g       *ABS*	00000000 _gp
04023614 g     F .text	00000030 usleep
04021b30 g     F .text	00000060 displayTitle
040212a8 g     F .text	000001b4 shuffleQuestions
0000086c g     O .rwdata	00000180 alt_fd_list
04024360 g     F .text	00000090 alt_find_dev
04023eac g     F .text	0000005c alt_up_char_buffer_clear
04024794 g     F .text	0000007c alt_io_redirect
000009ec g     O .rwdata	00000004 xMargin
04025300 g       *ABS*	00000000 __DTOR_END__
04022c38 g     F .text	00000014 puts
04024eac g     F .text	0000009c alt_exception_cause_generated_bad_addr
040239b4 g     F .text	000000ec altera_avalon_jtag_uart_read
04022b30 g     F .text	0000003c _printf_r
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
04022a4c g     F .text	00000064 .hidden __udivsi3
0402145c g     F .text	000000ec shuffleAnswers
00000a10 g     O .rwdata	00000004 alt_max_fd
000009f8 g     O .rwdata	00000004 _global_impure_ptr
00000ce4 g       *ABS*	00000000 __bss_end
040245c0 g     F .text	000000f0 alt_iic_isr_register
04024bb4 g     F .text	00000108 alt_tick
04024574 g     F .text	0000004c alt_ic_irq_enabled
04024b18 g     F .text	0000009c alt_alarm_stop
00000a3c g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d4 alt_irq_handler
00000844 g     O .rwdata	00000028 alt_dev_null
04024174 g     F .text	00000020 alt_dcache_flush_all
00000a24 g       *ABS*	00000000 __ram_rwdata_end
00000a08 g     O .rwdata	00000008 alt_dev_list
04023680 g     F .text	00000100 write
000006e0 g       *ABS*	00000000 __ram_rodata_end
000006e0 g     O .rwdata	00000010 answers
04022ab0 g     F .text	00000058 .hidden __umodsi3
00000ce4 g       *ABS*	00000000 end
04023c28 g     F .text	00000080 alt_up_char_buffer_init
040201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04025300 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
04023bac g     F .text	0000007c alt_avalon_timer_sc_init
04023aa0 g     F .text	00000094 altera_avalon_jtag_uart_write
04022d48 g     F .text	0000052c ___vfprintf_internal_r
0402513c g     F .text	00000190 __call_exitprocs
0402026c g     F .text	000000e8 getRandomQuestionByLevel
04020230 g     F .text	0000003c _start
00000a40 g     O .bss	00000004 _alt_tick_rate
04021548 g     F .text	000004a0 displayBoxes
04022c60 g     F .text	00000060 rand
00000a44 g     O .bss	00000004 _alt_nticks
040237ec g     F .text	00000108 alt_sys_init
04024fe4 g     F .text	00000158 __register_exitproc
04022b08 g     F .text	00000028 .hidden __mulsi3
000006e0 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
040238f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04024de8 g     F .text	000000c4 alt_get_fd
04023f08 g     F .text	00000158 alt_busy_sleep
04024f7c g     F .text	00000030 memcmp
00000ce4 g       *ABS*	00000000 __alt_stack_base
04024ce0 g     F .text	00000108 alt_find_file
040241fc g     F .text	000000a4 alt_dev_llist_insert
04023290 g     F .text	000000b8 __sfvwrite_small_dev
00000a24 g       *ABS*	00000000 __bss_start
04020354 g     F .text	000004a8 main
00000a38 g     O .bss	00000004 alt_envp
04023ca8 g     F .text	0000003c alt_up_char_buffer_open_dev
04023954 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04022c4c g     F .text	00000014 srand
040221f8 g     F .text	000001d8 highlightAnswer
00000a14 g     O .rwdata	00000004 alt_errno
04022954 g     F .text	00000084 .hidden __divsi3
04025300 g       *ABS*	00000000 __CTOR_END__
04024fac g     F .text	00000038 strcmp
04025300 g       *ABS*	00000000 __flash_rodata_start
04025300 g       *ABS*	00000000 __DTOR_LIST__
040237b4 g     F .text	00000038 alt_irq_init
04024a94 g     F .text	00000084 alt_release_fd
04024f48 g     F .text	00000014 atexit
04023348 g     F .text	00000058 _write_r
000009fc g     O .rwdata	00000004 _impure_ptr
00000a30 g     O .bss	00000004 alt_argc
040228d0 g     F .text	00000084 key2index
04024300 g     F .text	00000060 _do_dtors
04020020 g       .exceptions	00000000 alt_irq_entry
00000a00 g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
04024410 g     F .text	00000050 alt_ic_isr_register
00000a24 g       *ABS*	00000000 _edata
00000bb4 g     O .bss	00000018 Question
00000ce4 g       *ABS*	00000000 _end
04021a7c g     F .text	000000b4 getSSEG2value
04020230 g       *ABS*	00000000 __ram_exceptions_end
040244e8 g     F .text	0000008c alt_ic_irq_disable
04024f5c g     F .text	00000020 exit
040229d8 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
040252cc g     F .text	00000034 _exit
040233a0 g     F .text	0000010c .hidden __muldi3
00000bcc g     O .bss	00000018 q
04022cc0 g     F .text	0000001c strlen
04024938 g     F .text	0000015c open
04021b90 g     F .text	00000668 displayLevel
040243f0 g     F .text	00000020 alt_icache_flush_all
00000a18 g     O .rwdata	00000004 alt_priority_mask
04024460 g     F .text	00000088 alt_ic_irq_enable
04023274 g     F .text	0000001c __vfprintf_internal
000009f0 g     O .rwdata	00000004 yMargin
00000a1c g     O .rwdata	00000008 alt_alarm_list
040242a0 g     F .text	00000060 _do_ctors
0402409c g     F .text	000000d8 close
040223d0 g     F .text	00000250 highlighCorrecttAnswer
04023514 g     F .text	00000084 alt_load



Disassembly of section .entry:

04020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020000:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020004:	08408c14 	ori	at,at,560
    jmp r1
 4020008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d00 	call	40201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001426 	beq	r2,zero,402018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402013c:	00800034 	movhi	r2,0
 4020140:	1082f904 	addi	r2,r2,3044
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	00800034 	movhi	r2,0
 4020158:	1082f904 	addi	r2,r2,3044
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	1009883a 	mov	r4,r2
 4020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402017c:	0005313a 	rdctl	r2,ipending
 4020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020184:	e0bfff17 	ldw	r2,-4(fp)
 4020188:	00000706 	br	40201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	1085883a 	add	r2,r2,r2
 4020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4020198:	e0bffd17 	ldw	r2,-12(fp)
 402019c:	10800044 	addi	r2,r2,1
 40201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a4:	003fe106 	br	402012c <__flash_rwdata_start+0xffffa74c>

    active = alt_irq_pending ();
 40201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201ac:	e0bffb17 	ldw	r2,-20(fp)
 40201b0:	103fdb1e 	bne	r2,zero,4020120 <__flash_rwdata_start+0xffffa740>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b4:	0001883a 	nop
}
 40201b8:	0001883a 	nop
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	dfc00415 	stw	ra,16(sp)
 40201d8:	df000315 	stw	fp,12(sp)
 40201dc:	df000304 	addi	fp,sp,12
 40201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40201e4:	00bfffc4 	movi	r2,-1
 40201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40201f0:	d0a01717 	ldw	r2,-32676(gp)
 40201f4:	10000726 	beq	r2,zero,4020214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40201f8:	d0a01717 	ldw	r2,-32676(gp)
 40201fc:	e0fffd17 	ldw	r3,-12(fp)
 4020200:	e1bffe17 	ldw	r6,-8(fp)
 4020204:	e17fff17 	ldw	r5,-4(fp)
 4020208:	1809883a 	mov	r4,r3
 402020c:	103ee83a 	callr	r2
 4020210:	00000206 	br	402021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4020218:	0005883a 	mov	r2,zero
}
 402021c:	e037883a 	mov	sp,fp
 4020220:	dfc00117 	ldw	ra,4(sp)
 4020224:	df000017 	ldw	fp,0(sp)
 4020228:	dec00204 	addi	sp,sp,8
 402022c:	f800283a 	ret

Disassembly of section .text:

04020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4020234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4020238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 402023c:	d6a27b14 	ori	gp,gp,35308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4020244:	10828914 	ori	r2,r2,2596

    movhi r3, %hi(__bss_end)
 4020248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 402024c:	18c33914 	ori	r3,r3,3300

    beq r2, r3, 1f
 4020250:	10c00326 	beq	r2,r3,4020260 <_start+0x30>

0:
    stw zero, (r2)
 4020254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4020258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 402025c:	10fffd36 	bltu	r2,r3,4020254 <__flash_rwdata_start+0xffffa874>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020260:	40235140 	call	4023514 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4020264:	40235980 	call	4023598 <alt_main>

04020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4020268:	003fff06 	br	4020268 <__flash_rwdata_start+0xffffa888>

0402026c <getRandomQuestionByLevel>:

//Array for 4 answers
char* answers[] = { "", "", "", ""};

//Returns a random Question based on a level input
struct Question getRandomQuestionByLevel(int level) {
 402026c:	defff904 	addi	sp,sp,-28
 4020270:	dfc00615 	stw	ra,24(sp)
 4020274:	df000515 	stw	fp,20(sp)
 4020278:	dc400415 	stw	r17,16(sp)
 402027c:	dc000315 	stw	r16,12(sp)
 4020280:	df000504 	addi	fp,sp,20
 4020284:	e13ffc15 	stw	r4,-16(fp)
 4020288:	e17ffd15 	stw	r5,-12(fp)
	//Shuffle the question array
	shuffleQuestions();
 402028c:	40212a80 	call	40212a8 <shuffleQuestions>
	//Get the first quesiton with the desired level
	for (int i = 0; i < n; i++) {
 4020290:	e03ffb15 	stw	zero,-20(fp)
 4020294:	00002306 	br	4020324 <getRandomQuestionByLevel+0xb8>
		if (questions[i].level == level) {
 4020298:	04000034 	movhi	r16,0
 402029c:	84029304 	addi	r16,r16,2636
 40202a0:	e0bffb17 	ldw	r2,-20(fp)
 40202a4:	01400604 	movi	r5,24
 40202a8:	1009883a 	mov	r4,r2
 40202ac:	4022b080 	call	4022b08 <__mulsi3>
 40202b0:	8085883a 	add	r2,r16,r2
 40202b4:	10800104 	addi	r2,r2,4
 40202b8:	10c00017 	ldw	r3,0(r2)
 40202bc:	e0bffd17 	ldw	r2,-12(fp)
 40202c0:	1880151e 	bne	r3,r2,4020318 <getRandomQuestionByLevel+0xac>
			return questions[i];
 40202c4:	e43ffc17 	ldw	r16,-16(fp)
 40202c8:	04400034 	movhi	r17,0
 40202cc:	8c429304 	addi	r17,r17,2636
 40202d0:	e0bffb17 	ldw	r2,-20(fp)
 40202d4:	01400604 	movi	r5,24
 40202d8:	1009883a 	mov	r4,r2
 40202dc:	4022b080 	call	4022b08 <__mulsi3>
 40202e0:	8885883a 	add	r2,r17,r2
 40202e4:	10c00017 	ldw	r3,0(r2)
 40202e8:	80c00015 	stw	r3,0(r16)
 40202ec:	10c00117 	ldw	r3,4(r2)
 40202f0:	80c00115 	stw	r3,4(r16)
 40202f4:	10c00217 	ldw	r3,8(r2)
 40202f8:	80c00215 	stw	r3,8(r16)
 40202fc:	10c00317 	ldw	r3,12(r2)
 4020300:	80c00315 	stw	r3,12(r16)
 4020304:	10c00417 	ldw	r3,16(r2)
 4020308:	80c00415 	stw	r3,16(r16)
 402030c:	10800517 	ldw	r2,20(r2)
 4020310:	80800515 	stw	r2,20(r16)
 4020314:	00000706 	br	4020334 <getRandomQuestionByLevel+0xc8>
//Returns a random Question based on a level input
struct Question getRandomQuestionByLevel(int level) {
	//Shuffle the question array
	shuffleQuestions();
	//Get the first quesiton with the desired level
	for (int i = 0; i < n; i++) {
 4020318:	e0bffb17 	ldw	r2,-20(fp)
 402031c:	10800044 	addi	r2,r2,1
 4020320:	e0bffb15 	stw	r2,-20(fp)
 4020324:	d0a00217 	ldw	r2,-32760(gp)
 4020328:	e0fffb17 	ldw	r3,-20(fp)
 402032c:	18bfda16 	blt	r3,r2,4020298 <__flash_rwdata_start+0xffffa8b8>
		if (questions[i].level == level) {
			return questions[i];
		}
	}
}
 4020330:	0001883a 	nop
 4020334:	e0bffc17 	ldw	r2,-16(fp)
 4020338:	e6fffe04 	addi	sp,fp,-8
 402033c:	dfc00317 	ldw	ra,12(sp)
 4020340:	df000217 	ldw	fp,8(sp)
 4020344:	dc400117 	ldw	r17,4(sp)
 4020348:	dc000017 	ldw	r16,0(sp)
 402034c:	dec00404 	addi	sp,sp,16
 4020350:	f800283a 	ret

04020354 <main>:

int main() {
 4020354:	deffec04 	addi	sp,sp,-80
 4020358:	dfc01315 	stw	ra,76(sp)
 402035c:	df001215 	stw	fp,72(sp)
 4020360:	dc001115 	stw	r16,68(sp)
 4020364:	df001204 	addi	fp,sp,72
	alt_u8 answer;
	alt_u8 cnt;
	int time_cnt; //Counter to simulate a delay
	int SSEGvalue1; //For the chosen answer output to the SSEG
	int SSEGvalue2; //For the correct answer output to the SSEG
	alt_u8 ready = 1; //Helps to prevent two answer logins back to back
 4020368:	00800044 	movi	r2,1
 402036c:	e0bff505 	stb	r2,-44(fp)
	alt_up_char_buffer_dev * char_buf_dev;
	char_buf_dev = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma_0");
 4020370:	01000034 	movhi	r4,0
 4020374:	21000104 	addi	r4,r4,4
 4020378:	4023ca80 	call	4023ca8 <alt_up_char_buffer_open_dev>
 402037c:	e0bff615 	stw	r2,-40(fp)

	fillQuestions();
 4020380:	40207fc0 	call	40207fc <fillQuestions>
	printf ("Program started \n");
 4020384:	01000034 	movhi	r4,0
 4020388:	21000b04 	addi	r4,r4,44
 402038c:	4022c380 	call	4022c38 <puts>
	//Initialize some variables
	cnt = 0;
 4020390:	e03ff285 	stb	zero,-54(fp)
	time_cnt = 0;
 4020394:	e03ff315 	stw	zero,-52(fp)
	SSEGvalue1 = 0b00000000;
 4020398:	e03ff715 	stw	zero,-36(fp)
	SSEGvalue2 = 0b0000000000000000;
 402039c:	e03ff415 	stw	zero,-48(fp)

	//Endless loop
	while(1) {
		//Store current key input
		key = IORD_ALTERA_AVALON_PIO_DATA(PIO_INPUT_KEY_BASE);
 40203a0:	00810134 	movhi	r2,1028
 40203a4:	108c0c04 	addi	r2,r2,12336
 40203a8:	10800037 	ldwio	r2,0(r2)
 40203ac:	e0bff805 	stb	r2,-32(fp)

		//Store current level, returned from the FSM
		level = IORD_ALTERA_AVALON_PIO_DATA(PIO_INPUT_LEVEL_BASE);
 40203b0:	00810134 	movhi	r2,1028
 40203b4:	108c1404 	addi	r2,r2,12368
 40203b8:	10800037 	ldwio	r2,0(r2)
 40203bc:	e0bff845 	stb	r2,-31(fp)

		//If current level is not start or end
		if (level != 0 && level != 6) {
 40203c0:	e0bff843 	ldbu	r2,-31(fp)
 40203c4:	10000826 	beq	r2,zero,40203e8 <main+0x94>
 40203c8:	e0bff843 	ldbu	r2,-31(fp)
 40203cc:	108001a0 	cmpeqi	r2,r2,6
 40203d0:	1000051e 	bne	r2,zero,40203e8 <main+0x94>
			//Highlight the chosen answer, based on key input
			highlightAnswer(key, char_buf_dev);
 40203d4:	e0bff803 	ldbu	r2,-32(fp)
 40203d8:	e17ff617 	ldw	r5,-40(fp)
 40203dc:	1009883a 	mov	r4,r2
 40203e0:	40221f80 	call	40221f8 <highlightAnswer>
			//Reset SSEG for chosen answer
			SSEGvalue1 = 0b00000000;
 40203e4:	e03ff715 	stw	zero,-36(fp)
		}

		//If no key is pushed
		if (key == 0b0000) {
 40203e8:	e0bff803 	ldbu	r2,-32(fp)
 40203ec:	1000031e 	bne	r2,zero,40203fc <main+0xa8>
			//Ready for next answer
			ready = 1;
 40203f0:	00800044 	movi	r2,1
 40203f4:	e0bff505 	stb	r2,-44(fp)
			//Reset delay counter
			time_cnt = 0;
 40203f8:	e03ff315 	stw	zero,-52(fp)
		}

		//Default answer to 00
		//That way if no answer is given, the FSM won't change the state
		answer = 0b00;
 40203fc:	e03ff245 	stb	zero,-55(fp)

		//If ready to receive the next answer input
		if (ready == 1) {
 4020400:	e0bff503 	ldbu	r2,-44(fp)
 4020404:	10800058 	cmpnei	r2,r2,1
 4020408:	10005a1e 	bne	r2,zero,4020574 <main+0x220>
			//If level 0/idle state (no question asked yet, on screen: "Press any button")
			if (level == 0b0000) {
 402040c:	e0bff843 	ldbu	r2,-31(fp)
 4020410:	1000051e 	bne	r2,zero,4020428 <main+0xd4>
				//If any key is pressed
				if (key != 0b0000) {
 4020414:	e0bff803 	ldbu	r2,-32(fp)
 4020418:	10005626 	beq	r2,zero,4020574 <main+0x220>
					//Go to next state (question state)
					answer = 0b11;
 402041c:	008000c4 	movi	r2,3
 4020420:	e0bff245 	stb	r2,-55(fp)
 4020424:	00005306 	br	4020574 <main+0x220>
				}
			}
			//If level 6/winning state
			else if (level == 0b0110) {
 4020428:	e0bff843 	ldbu	r2,-31(fp)
 402042c:	10800198 	cmpnei	r2,r2,6
 4020430:	1000031e 	bne	r2,zero,4020440 <main+0xec>
				//Store "answered but incorrect" for FSM
				answer = 0b10;
 4020434:	00800084 	movi	r2,2
 4020438:	e0bff245 	stb	r2,-55(fp)
 402043c:	00004d06 	br	4020574 <main+0x220>
			}
			//If any other level and a key is pressed
			else if (key != 0b0000){
 4020440:	e0bff803 	ldbu	r2,-32(fp)
 4020444:	10004b26 	beq	r2,zero,4020574 <main+0x220>
				//Remember old key value
				key_mem = key;
 4020448:	e0bff803 	ldbu	r2,-32(fp)
 402044c:	e0bff885 	stb	r2,-30(fp)
				//Highlight the current chosen answer
				highlightAnswer(key, char_buf_dev);
 4020450:	e0bff803 	ldbu	r2,-32(fp)
 4020454:	e17ff617 	ldw	r5,-40(fp)
 4020458:	1009883a 	mov	r4,r2
 402045c:	40221f80 	call	40221f8 <highlightAnswer>
				//Store chosen answer for SSEG output
				SSEGvalue1 = getSSEG1value(q, key_mem);
 4020460:	e0fff883 	ldbu	r3,-30(fp)
 4020464:	00800034 	movhi	r2,0
 4020468:	1082f304 	addi	r2,r2,3020
 402046c:	d8c00215 	stw	r3,8(sp)
 4020470:	10c00417 	ldw	r3,16(r2)
 4020474:	d8c00015 	stw	r3,0(sp)
 4020478:	10c00517 	ldw	r3,20(r2)
 402047c:	d8c00115 	stw	r3,4(sp)
 4020480:	11000017 	ldw	r4,0(r2)
 4020484:	11400117 	ldw	r5,4(r2)
 4020488:	11800217 	ldw	r6,8(r2)
 402048c:	11c00317 	ldw	r7,12(r2)
 4020490:	40219e80 	call	40219e8 <getSSEG1value>
 4020494:	e0bff715 	stw	r2,-36(fp)
				//Increase delay counter
				time_cnt++;
 4020498:	e0bff317 	ldw	r2,-52(fp)
 402049c:	10800044 	addi	r2,r2,1
 40204a0:	e0bff315 	stw	r2,-52(fp)
				//If enough time has passed
				if (time_cnt >= 30000) {
 40204a4:	e0bff317 	ldw	r2,-52(fp)
 40204a8:	109d4c10 	cmplti	r2,r2,30000
 40204ac:	10002b1e 	bne	r2,zero,402055c <main+0x208>
					//Reset correct answer value for SSEG
					SSEGvalue2 = 0b0000000000000000;
 40204b0:	e03ff415 	stw	zero,-48(fp)
					//If chosen answers is correct
					if (answers[key2index(key)] == q.answerCorrect) {
 40204b4:	e0bff803 	ldbu	r2,-32(fp)
 40204b8:	1009883a 	mov	r4,r2
 40204bc:	40228d00 	call	40228d0 <key2index>
 40204c0:	1007883a 	mov	r3,r2
 40204c4:	00800034 	movhi	r2,0
 40204c8:	1081b804 	addi	r2,r2,1760
 40204cc:	18c7883a 	add	r3,r3,r3
 40204d0:	18c7883a 	add	r3,r3,r3
 40204d4:	10c5883a 	add	r2,r2,r3
 40204d8:	10c00017 	ldw	r3,0(r2)
 40204dc:	00800034 	movhi	r2,0
 40204e0:	1082f304 	addi	r2,r2,3020
 40204e4:	10800217 	ldw	r2,8(r2)
 40204e8:	1880031e 	bne	r3,r2,40204f8 <main+0x1a4>
						//Store "answered and correct" for FSM
						answer = 0b11;
 40204ec:	008000c4 	movi	r2,3
 40204f0:	e0bff245 	stb	r2,-55(fp)
 40204f4:	00000d06 	br	402052c <main+0x1d8>
					}
					//If answered but incorrect
					else {
						//Store "answered but incorrect" for FSM
						answer = 0b10;
 40204f8:	00800084 	movi	r2,2
 40204fc:	e0bff245 	stb	r2,-55(fp)
						//Return answer to FSM
						IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_ANSWER_BASE, answer);
 4020500:	e0fff243 	ldbu	r3,-55(fp)
 4020504:	00810134 	movhi	r2,1028
 4020508:	108c1004 	addi	r2,r2,12352
 402050c:	10c00035 	stwio	r3,0(r2)
						//Highlight the correct and incorrect answer
						highlighCorrecttAnswer(key, char_buf_dev);
 4020510:	e0bff803 	ldbu	r2,-32(fp)
 4020514:	e17ff617 	ldw	r5,-40(fp)
 4020518:	1009883a 	mov	r4,r2
 402051c:	40223d00 	call	40223d0 <highlighCorrecttAnswer>
						//Wait
						usleep(1000000);
 4020520:	010003f4 	movhi	r4,15
 4020524:	21109004 	addi	r4,r4,16960
 4020528:	40236140 	call	4023614 <usleep>
					}
					//Store correct answer for SSEG
					SSEGvalue2 = getSSEG2value(q);
 402052c:	00800034 	movhi	r2,0
 4020530:	1082f304 	addi	r2,r2,3020
 4020534:	10c00417 	ldw	r3,16(r2)
 4020538:	d8c00015 	stw	r3,0(sp)
 402053c:	10c00517 	ldw	r3,20(r2)
 4020540:	d8c00115 	stw	r3,4(sp)
 4020544:	11000017 	ldw	r4,0(r2)
 4020548:	11400117 	ldw	r5,4(r2)
 402054c:	11800217 	ldw	r6,8(r2)
 4020550:	11c00317 	ldw	r7,12(r2)
 4020554:	4021a7c0 	call	4021a7c <getSSEG2value>
 4020558:	e0bff415 	stw	r2,-48(fp)
				}
				//Output correct and chosen answer to SSEG
				IOWR_ALTERA_AVALON_PIO_DATA(PIO_SSEG_BASE, SSEGvalue1 + SSEGvalue2);
 402055c:	e0fff717 	ldw	r3,-36(fp)
 4020560:	e0bff417 	ldw	r2,-48(fp)
 4020564:	1887883a 	add	r3,r3,r2
 4020568:	00810134 	movhi	r2,1028
 402056c:	108c0804 	addi	r2,r2,12320
 4020570:	10c00035 	stwio	r3,0(r2)
			}
		}

		//If level has changed or first run
		if (level != old_level || cnt == 0) {
 4020574:	e0fff843 	ldbu	r3,-31(fp)
 4020578:	e0bff203 	ldbu	r2,-56(fp)
 402057c:	1880021e 	bne	r3,r2,4020588 <main+0x234>
 4020580:	e0bff283 	ldbu	r2,-54(fp)
 4020584:	1000981e 	bne	r2,zero,40207e8 <main+0x494>
			//If level 1 get level 1 question
			if (level == 0b0001) {
 4020588:	e0bff843 	ldbu	r2,-31(fp)
 402058c:	10800058 	cmpnei	r2,r2,1
 4020590:	1000131e 	bne	r2,zero,40205e0 <main+0x28c>
				q = getRandomQuestionByLevel(1);
 4020594:	04000034 	movhi	r16,0
 4020598:	8402f304 	addi	r16,r16,3020
 402059c:	e0bff904 	addi	r2,fp,-28
 40205a0:	01400044 	movi	r5,1
 40205a4:	1009883a 	mov	r4,r2
 40205a8:	402026c0 	call	402026c <getRandomQuestionByLevel>
 40205ac:	e0bff917 	ldw	r2,-28(fp)
 40205b0:	80800015 	stw	r2,0(r16)
 40205b4:	e0bffa17 	ldw	r2,-24(fp)
 40205b8:	80800115 	stw	r2,4(r16)
 40205bc:	e0bffb17 	ldw	r2,-20(fp)
 40205c0:	80800215 	stw	r2,8(r16)
 40205c4:	e0bffc17 	ldw	r2,-16(fp)
 40205c8:	80800315 	stw	r2,12(r16)
 40205cc:	e0bffd17 	ldw	r2,-12(fp)
 40205d0:	80800415 	stw	r2,16(r16)
 40205d4:	e0bffe17 	ldw	r2,-8(fp)
 40205d8:	80800515 	stw	r2,20(r16)
 40205dc:	00005706 	br	402073c <main+0x3e8>
			}
			//If level 2 get level 2 question
			else if (level == 0b0010) {
 40205e0:	e0bff843 	ldbu	r2,-31(fp)
 40205e4:	10800098 	cmpnei	r2,r2,2
 40205e8:	1000131e 	bne	r2,zero,4020638 <main+0x2e4>
				q = getRandomQuestionByLevel(2);
 40205ec:	04000034 	movhi	r16,0
 40205f0:	8402f304 	addi	r16,r16,3020
 40205f4:	e0bff904 	addi	r2,fp,-28
 40205f8:	01400084 	movi	r5,2
 40205fc:	1009883a 	mov	r4,r2
 4020600:	402026c0 	call	402026c <getRandomQuestionByLevel>
 4020604:	e0bff917 	ldw	r2,-28(fp)
 4020608:	80800015 	stw	r2,0(r16)
 402060c:	e0bffa17 	ldw	r2,-24(fp)
 4020610:	80800115 	stw	r2,4(r16)
 4020614:	e0bffb17 	ldw	r2,-20(fp)
 4020618:	80800215 	stw	r2,8(r16)
 402061c:	e0bffc17 	ldw	r2,-16(fp)
 4020620:	80800315 	stw	r2,12(r16)
 4020624:	e0bffd17 	ldw	r2,-12(fp)
 4020628:	80800415 	stw	r2,16(r16)
 402062c:	e0bffe17 	ldw	r2,-8(fp)
 4020630:	80800515 	stw	r2,20(r16)
 4020634:	00004106 	br	402073c <main+0x3e8>
			}
			//If level 3 get level 3 question
			else if (level == 0b0011) {
 4020638:	e0bff843 	ldbu	r2,-31(fp)
 402063c:	108000d8 	cmpnei	r2,r2,3
 4020640:	1000131e 	bne	r2,zero,4020690 <main+0x33c>
				q = getRandomQuestionByLevel(3);
 4020644:	04000034 	movhi	r16,0
 4020648:	8402f304 	addi	r16,r16,3020
 402064c:	e0bff904 	addi	r2,fp,-28
 4020650:	014000c4 	movi	r5,3
 4020654:	1009883a 	mov	r4,r2
 4020658:	402026c0 	call	402026c <getRandomQuestionByLevel>
 402065c:	e0bff917 	ldw	r2,-28(fp)
 4020660:	80800015 	stw	r2,0(r16)
 4020664:	e0bffa17 	ldw	r2,-24(fp)
 4020668:	80800115 	stw	r2,4(r16)
 402066c:	e0bffb17 	ldw	r2,-20(fp)
 4020670:	80800215 	stw	r2,8(r16)
 4020674:	e0bffc17 	ldw	r2,-16(fp)
 4020678:	80800315 	stw	r2,12(r16)
 402067c:	e0bffd17 	ldw	r2,-12(fp)
 4020680:	80800415 	stw	r2,16(r16)
 4020684:	e0bffe17 	ldw	r2,-8(fp)
 4020688:	80800515 	stw	r2,20(r16)
 402068c:	00002b06 	br	402073c <main+0x3e8>
			}
			//If level 4 get level 4 question
			else if (level == 0b0100) {
 4020690:	e0bff843 	ldbu	r2,-31(fp)
 4020694:	10800118 	cmpnei	r2,r2,4
 4020698:	1000131e 	bne	r2,zero,40206e8 <main+0x394>
				q = getRandomQuestionByLevel(4);
 402069c:	04000034 	movhi	r16,0
 40206a0:	8402f304 	addi	r16,r16,3020
 40206a4:	e0bff904 	addi	r2,fp,-28
 40206a8:	01400104 	movi	r5,4
 40206ac:	1009883a 	mov	r4,r2
 40206b0:	402026c0 	call	402026c <getRandomQuestionByLevel>
 40206b4:	e0bff917 	ldw	r2,-28(fp)
 40206b8:	80800015 	stw	r2,0(r16)
 40206bc:	e0bffa17 	ldw	r2,-24(fp)
 40206c0:	80800115 	stw	r2,4(r16)
 40206c4:	e0bffb17 	ldw	r2,-20(fp)
 40206c8:	80800215 	stw	r2,8(r16)
 40206cc:	e0bffc17 	ldw	r2,-16(fp)
 40206d0:	80800315 	stw	r2,12(r16)
 40206d4:	e0bffd17 	ldw	r2,-12(fp)
 40206d8:	80800415 	stw	r2,16(r16)
 40206dc:	e0bffe17 	ldw	r2,-8(fp)
 40206e0:	80800515 	stw	r2,20(r16)
 40206e4:	00001506 	br	402073c <main+0x3e8>
			}
			//If level 5 get level 5 question
			else if (level == 0b0101) {
 40206e8:	e0bff843 	ldbu	r2,-31(fp)
 40206ec:	10800158 	cmpnei	r2,r2,5
 40206f0:	1000121e 	bne	r2,zero,402073c <main+0x3e8>
				q = getRandomQuestionByLevel(5);
 40206f4:	04000034 	movhi	r16,0
 40206f8:	8402f304 	addi	r16,r16,3020
 40206fc:	e0bff904 	addi	r2,fp,-28
 4020700:	01400144 	movi	r5,5
 4020704:	1009883a 	mov	r4,r2
 4020708:	402026c0 	call	402026c <getRandomQuestionByLevel>
 402070c:	e0bff917 	ldw	r2,-28(fp)
 4020710:	80800015 	stw	r2,0(r16)
 4020714:	e0bffa17 	ldw	r2,-24(fp)
 4020718:	80800115 	stw	r2,4(r16)
 402071c:	e0bffb17 	ldw	r2,-20(fp)
 4020720:	80800215 	stw	r2,8(r16)
 4020724:	e0bffc17 	ldw	r2,-16(fp)
 4020728:	80800315 	stw	r2,12(r16)
 402072c:	e0bffd17 	ldw	r2,-12(fp)
 4020730:	80800415 	stw	r2,16(r16)
 4020734:	e0bffe17 	ldw	r2,-8(fp)
 4020738:	80800515 	stw	r2,20(r16)
			}

			//If idle state
			if (level == 0) {
 402073c:	e0bff843 	ldbu	r2,-31(fp)
 4020740:	1000051e 	bne	r2,zero,4020758 <main+0x404>
				//Show title with "Press any key.."
				displayTitle("Press any key to start the game.", char_buf_dev);
 4020744:	e17ff617 	ldw	r5,-40(fp)
 4020748:	01000034 	movhi	r4,0
 402074c:	21001004 	addi	r4,r4,64
 4020750:	4021b300 	call	4021b30 <displayTitle>
 4020754:	00001d06 	br	40207cc <main+0x478>
			}
			//If winning state
			else if (level == 6) {
 4020758:	e0bff843 	ldbu	r2,-31(fp)
 402075c:	10800198 	cmpnei	r2,r2,6
 4020760:	1000051e 	bne	r2,zero,4020778 <main+0x424>
				//Show title with "You win"
				displayTitle("You win!!!", char_buf_dev);
 4020764:	e17ff617 	ldw	r5,-40(fp)
 4020768:	01000034 	movhi	r4,0
 402076c:	21001904 	addi	r4,r4,100
 4020770:	4021b300 	call	4021b30 <displayTitle>
 4020774:	00001506 	br	40207cc <main+0x478>
			}
			//If other state
			else {
				//Display question and answers
				displayQuestion(q, char_buf_dev, true);
 4020778:	00800034 	movhi	r2,0
 402077c:	1082f304 	addi	r2,r2,3020
 4020780:	00c00044 	movi	r3,1
 4020784:	d8c00315 	stw	r3,12(sp)
 4020788:	e0fff617 	ldw	r3,-40(fp)
 402078c:	d8c00215 	stw	r3,8(sp)
 4020790:	10c00417 	ldw	r3,16(r2)
 4020794:	d8c00015 	stw	r3,0(sp)
 4020798:	10c00517 	ldw	r3,20(r2)
 402079c:	d8c00115 	stw	r3,4(sp)
 40207a0:	11000017 	ldw	r4,0(r2)
 40207a4:	11400117 	ldw	r5,4(r2)
 40207a8:	11800217 	ldw	r6,8(r2)
 40207ac:	11c00317 	ldw	r7,12(r2)
 40207b0:	40226200 	call	4022620 <displayQuestion>
				//Display the level and indicate which one the player is in
				displayLevel(level, char_buf_dev);
 40207b4:	e0bff843 	ldbu	r2,-31(fp)
 40207b8:	e17ff617 	ldw	r5,-40(fp)
 40207bc:	1009883a 	mov	r4,r2
 40207c0:	4021b900 	call	4021b90 <displayLevel>
				//Display the 'boxes' around the answer and question
				//(has to be done here bc other display functions clear buffer)
				displayBoxes(char_buf_dev);
 40207c4:	e13ff617 	ldw	r4,-40(fp)
 40207c8:	40215480 	call	4021548 <displayBoxes>
			}
			//Store old level
			old_level = level;
 40207cc:	e0bff843 	ldbu	r2,-31(fp)
 40207d0:	e0bff205 	stb	r2,-56(fp)
			//Not ready bc key pushed
			ready = 0;
 40207d4:	e03ff505 	stb	zero,-44(fp)
			//Reset delay counter
			time_cnt = 0;
 40207d8:	e03ff315 	stw	zero,-52(fp)
			cnt++;
 40207dc:	e0bff283 	ldbu	r2,-54(fp)
 40207e0:	10800044 	addi	r2,r2,1
 40207e4:	e0bff285 	stb	r2,-54(fp)
		}

		//Output answer to FSM
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_OUTPUT_ANSWER_BASE, answer);
 40207e8:	e0fff243 	ldbu	r3,-55(fp)
 40207ec:	00810134 	movhi	r2,1028
 40207f0:	108c1004 	addi	r2,r2,12352
 40207f4:	10c00035 	stwio	r3,0(r2)
	}
 40207f8:	003ee906 	br	40203a0 <__flash_rwdata_start+0xffffa9c0>

040207fc <fillQuestions>:

	return 0;
}

//Fills the question array
void fillQuestions() {
 40207fc:	deffff04 	addi	sp,sp,-4
 4020800:	df000015 	stw	fp,0(sp)
 4020804:	d839883a 	mov	fp,sp
	q.question = "What does the Analysis and Elaboration do?";
 4020808:	00800034 	movhi	r2,0
 402080c:	1082f304 	addi	r2,r2,3020
 4020810:	00c00034 	movhi	r3,0
 4020814:	18c01c04 	addi	r3,r3,112
 4020818:	10c00015 	stw	r3,0(r2)
	q.level = 1;
 402081c:	00800034 	movhi	r2,0
 4020820:	1082f304 	addi	r2,r2,3020
 4020824:	00c00044 	movi	r3,1
 4020828:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "Creates RTL";
 402082c:	00800034 	movhi	r2,0
 4020830:	1082f304 	addi	r2,r2,3020
 4020834:	00c00034 	movhi	r3,0
 4020838:	18c02704 	addi	r3,r3,156
 402083c:	10c00215 	stw	r3,8(r2)
	q.answer1 = "Creates Logic";
 4020840:	00800034 	movhi	r2,0
 4020844:	1082f304 	addi	r2,r2,3020
 4020848:	00c00034 	movhi	r3,0
 402084c:	18c02a04 	addi	r3,r3,168
 4020850:	10c00315 	stw	r3,12(r2)
	q.answer2 = "Assign/view pins";
 4020854:	00800034 	movhi	r2,0
 4020858:	1082f304 	addi	r2,r2,3020
 402085c:	00c00034 	movhi	r3,0
 4020860:	18c02e04 	addi	r3,r3,184
 4020864:	10c00415 	stw	r3,16(r2)
	q.answer3 = "Check syntax errors";
 4020868:	00800034 	movhi	r2,0
 402086c:	1082f304 	addi	r2,r2,3020
 4020870:	00c00034 	movhi	r3,0
 4020874:	18c03304 	addi	r3,r3,204
 4020878:	10c00515 	stw	r3,20(r2)
	questions[0] = (q);
 402087c:	00800034 	movhi	r2,0
 4020880:	10829304 	addi	r2,r2,2636
 4020884:	00c00034 	movhi	r3,0
 4020888:	18c2f304 	addi	r3,r3,3020
 402088c:	19000017 	ldw	r4,0(r3)
 4020890:	11000015 	stw	r4,0(r2)
 4020894:	19000117 	ldw	r4,4(r3)
 4020898:	11000115 	stw	r4,4(r2)
 402089c:	19000217 	ldw	r4,8(r3)
 40208a0:	11000215 	stw	r4,8(r2)
 40208a4:	19000317 	ldw	r4,12(r3)
 40208a8:	11000315 	stw	r4,12(r2)
 40208ac:	19000417 	ldw	r4,16(r3)
 40208b0:	11000415 	stw	r4,16(r2)
 40208b4:	18c00517 	ldw	r3,20(r3)
 40208b8:	10c00515 	stw	r3,20(r2)

	q.question = "What does RTL stand for?";
 40208bc:	00800034 	movhi	r2,0
 40208c0:	1082f304 	addi	r2,r2,3020
 40208c4:	00c00034 	movhi	r3,0
 40208c8:	18c03804 	addi	r3,r3,224
 40208cc:	10c00015 	stw	r3,0(r2)
	q.level = 1;
 40208d0:	00800034 	movhi	r2,0
 40208d4:	1082f304 	addi	r2,r2,3020
 40208d8:	00c00044 	movi	r3,1
 40208dc:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "Register Transfer Level";
 40208e0:	00800034 	movhi	r2,0
 40208e4:	1082f304 	addi	r2,r2,3020
 40208e8:	00c00034 	movhi	r3,0
 40208ec:	18c03f04 	addi	r3,r3,252
 40208f0:	10c00215 	stw	r3,8(r2)
	q.answer1 = "Real Time Logic";
 40208f4:	00800034 	movhi	r2,0
 40208f8:	1082f304 	addi	r2,r2,3020
 40208fc:	00c00034 	movhi	r3,0
 4020900:	18c04504 	addi	r3,r3,276
 4020904:	10c00315 	stw	r3,12(r2)
	q.answer2 = "Read Trunk Link";
 4020908:	00800034 	movhi	r2,0
 402090c:	1082f304 	addi	r2,r2,3020
 4020910:	00c00034 	movhi	r3,0
 4020914:	18c04904 	addi	r3,r3,292
 4020918:	10c00415 	stw	r3,16(r2)
	q.answer3 = "Route Through Line";
 402091c:	00800034 	movhi	r2,0
 4020920:	1082f304 	addi	r2,r2,3020
 4020924:	00c00034 	movhi	r3,0
 4020928:	18c04d04 	addi	r3,r3,308
 402092c:	10c00515 	stw	r3,20(r2)
	questions[1] = (q);
 4020930:	00800034 	movhi	r2,0
 4020934:	10829304 	addi	r2,r2,2636
 4020938:	00c00034 	movhi	r3,0
 402093c:	18c2f304 	addi	r3,r3,3020
 4020940:	19000017 	ldw	r4,0(r3)
 4020944:	11000615 	stw	r4,24(r2)
 4020948:	19000117 	ldw	r4,4(r3)
 402094c:	11000715 	stw	r4,28(r2)
 4020950:	19000217 	ldw	r4,8(r3)
 4020954:	11000815 	stw	r4,32(r2)
 4020958:	19000317 	ldw	r4,12(r3)
 402095c:	11000915 	stw	r4,36(r2)
 4020960:	19000417 	ldw	r4,16(r3)
 4020964:	11000a15 	stw	r4,40(r2)
 4020968:	18c00517 	ldw	r3,20(r3)
 402096c:	10c00b15 	stw	r3,44(r2)

	q.question = "How many bits are needed for 10 values?";
 4020970:	00800034 	movhi	r2,0
 4020974:	1082f304 	addi	r2,r2,3020
 4020978:	00c00034 	movhi	r3,0
 402097c:	18c05204 	addi	r3,r3,328
 4020980:	10c00015 	stw	r3,0(r2)
	q.level = 1;
 4020984:	00800034 	movhi	r2,0
 4020988:	1082f304 	addi	r2,r2,3020
 402098c:	00c00044 	movi	r3,1
 4020990:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "4";
 4020994:	00800034 	movhi	r2,0
 4020998:	1082f304 	addi	r2,r2,3020
 402099c:	00c00034 	movhi	r3,0
 40209a0:	18c05c04 	addi	r3,r3,368
 40209a4:	10c00215 	stw	r3,8(r2)
	q.answer1 = "5";
 40209a8:	00800034 	movhi	r2,0
 40209ac:	1082f304 	addi	r2,r2,3020
 40209b0:	00c00034 	movhi	r3,0
 40209b4:	18c05d04 	addi	r3,r3,372
 40209b8:	10c00315 	stw	r3,12(r2)
	q.answer2 = "6";
 40209bc:	00800034 	movhi	r2,0
 40209c0:	1082f304 	addi	r2,r2,3020
 40209c4:	00c00034 	movhi	r3,0
 40209c8:	18c05e04 	addi	r3,r3,376
 40209cc:	10c00415 	stw	r3,16(r2)
	q.answer3 = "3";
 40209d0:	00800034 	movhi	r2,0
 40209d4:	1082f304 	addi	r2,r2,3020
 40209d8:	00c00034 	movhi	r3,0
 40209dc:	18c05f04 	addi	r3,r3,380
 40209e0:	10c00515 	stw	r3,20(r2)
	questions[2] = (q);
 40209e4:	00800034 	movhi	r2,0
 40209e8:	10829304 	addi	r2,r2,2636
 40209ec:	00c00034 	movhi	r3,0
 40209f0:	18c2f304 	addi	r3,r3,3020
 40209f4:	19000017 	ldw	r4,0(r3)
 40209f8:	11000c15 	stw	r4,48(r2)
 40209fc:	19000117 	ldw	r4,4(r3)
 4020a00:	11000d15 	stw	r4,52(r2)
 4020a04:	19000217 	ldw	r4,8(r3)
 4020a08:	11000e15 	stw	r4,56(r2)
 4020a0c:	19000317 	ldw	r4,12(r3)
 4020a10:	11000f15 	stw	r4,60(r2)
 4020a14:	19000417 	ldw	r4,16(r3)
 4020a18:	11001015 	stw	r4,64(r2)
 4020a1c:	18c00517 	ldw	r3,20(r3)
 4020a20:	10c01115 	stw	r3,68(r2)

	q.question = "How many kB can be stored in an MK9 block?";
 4020a24:	00800034 	movhi	r2,0
 4020a28:	1082f304 	addi	r2,r2,3020
 4020a2c:	00c00034 	movhi	r3,0
 4020a30:	18c06004 	addi	r3,r3,384
 4020a34:	10c00015 	stw	r3,0(r2)
	q.level = 2;
 4020a38:	00800034 	movhi	r2,0
 4020a3c:	1082f304 	addi	r2,r2,3020
 4020a40:	00c00084 	movi	r3,2
 4020a44:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "9";
 4020a48:	00800034 	movhi	r2,0
 4020a4c:	1082f304 	addi	r2,r2,3020
 4020a50:	00c00034 	movhi	r3,0
 4020a54:	18c06b04 	addi	r3,r3,428
 4020a58:	10c00215 	stw	r3,8(r2)
	q.answer1 = "5";
 4020a5c:	00800034 	movhi	r2,0
 4020a60:	1082f304 	addi	r2,r2,3020
 4020a64:	00c00034 	movhi	r3,0
 4020a68:	18c05d04 	addi	r3,r3,372
 4020a6c:	10c00315 	stw	r3,12(r2)
	q.answer2 = "6";
 4020a70:	00800034 	movhi	r2,0
 4020a74:	1082f304 	addi	r2,r2,3020
 4020a78:	00c00034 	movhi	r3,0
 4020a7c:	18c05e04 	addi	r3,r3,376
 4020a80:	10c00415 	stw	r3,16(r2)
	q.answer3 = "3";
 4020a84:	00800034 	movhi	r2,0
 4020a88:	1082f304 	addi	r2,r2,3020
 4020a8c:	00c00034 	movhi	r3,0
 4020a90:	18c05f04 	addi	r3,r3,380
 4020a94:	10c00515 	stw	r3,20(r2)
	questions[3] = (q);
 4020a98:	00800034 	movhi	r2,0
 4020a9c:	10829304 	addi	r2,r2,2636
 4020aa0:	00c00034 	movhi	r3,0
 4020aa4:	18c2f304 	addi	r3,r3,3020
 4020aa8:	19000017 	ldw	r4,0(r3)
 4020aac:	11001215 	stw	r4,72(r2)
 4020ab0:	19000117 	ldw	r4,4(r3)
 4020ab4:	11001315 	stw	r4,76(r2)
 4020ab8:	19000217 	ldw	r4,8(r3)
 4020abc:	11001415 	stw	r4,80(r2)
 4020ac0:	19000317 	ldw	r4,12(r3)
 4020ac4:	11001515 	stw	r4,84(r2)
 4020ac8:	19000417 	ldw	r4,16(r3)
 4020acc:	11001615 	stw	r4,88(r2)
 4020ad0:	18c00517 	ldw	r3,20(r3)
 4020ad4:	10c01715 	stw	r3,92(r2)

	q.question = "Which of the following is a state machine type?";
 4020ad8:	00800034 	movhi	r2,0
 4020adc:	1082f304 	addi	r2,r2,3020
 4020ae0:	00c00034 	movhi	r3,0
 4020ae4:	18c06c04 	addi	r3,r3,432
 4020ae8:	10c00015 	stw	r3,0(r2)
	q.level = 2;
 4020aec:	00800034 	movhi	r2,0
 4020af0:	1082f304 	addi	r2,r2,3020
 4020af4:	00c00084 	movi	r3,2
 4020af8:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "Moore";
 4020afc:	00800034 	movhi	r2,0
 4020b00:	1082f304 	addi	r2,r2,3020
 4020b04:	00c00034 	movhi	r3,0
 4020b08:	18c07804 	addi	r3,r3,480
 4020b0c:	10c00215 	stw	r3,8(r2)
	q.answer1 = "Milly";
 4020b10:	00800034 	movhi	r2,0
 4020b14:	1082f304 	addi	r2,r2,3020
 4020b18:	00c00034 	movhi	r3,0
 4020b1c:	18c07a04 	addi	r3,r3,488
 4020b20:	10c00315 	stw	r3,12(r2)
	q.answer2 = "Morse";
 4020b24:	00800034 	movhi	r2,0
 4020b28:	1082f304 	addi	r2,r2,3020
 4020b2c:	00c00034 	movhi	r3,0
 4020b30:	18c07c04 	addi	r3,r3,496
 4020b34:	10c00415 	stw	r3,16(r2)
	q.answer3 = "Michael";
 4020b38:	00800034 	movhi	r2,0
 4020b3c:	1082f304 	addi	r2,r2,3020
 4020b40:	00c00034 	movhi	r3,0
 4020b44:	18c07e04 	addi	r3,r3,504
 4020b48:	10c00515 	stw	r3,20(r2)
	questions[4] = (q);
 4020b4c:	00800034 	movhi	r2,0
 4020b50:	10829304 	addi	r2,r2,2636
 4020b54:	00c00034 	movhi	r3,0
 4020b58:	18c2f304 	addi	r3,r3,3020
 4020b5c:	19000017 	ldw	r4,0(r3)
 4020b60:	11001815 	stw	r4,96(r2)
 4020b64:	19000117 	ldw	r4,4(r3)
 4020b68:	11001915 	stw	r4,100(r2)
 4020b6c:	19000217 	ldw	r4,8(r3)
 4020b70:	11001a15 	stw	r4,104(r2)
 4020b74:	19000317 	ldw	r4,12(r3)
 4020b78:	11001b15 	stw	r4,108(r2)
 4020b7c:	19000417 	ldw	r4,16(r3)
 4020b80:	11001c15 	stw	r4,112(r2)
 4020b84:	18c00517 	ldw	r3,20(r3)
 4020b88:	10c01d15 	stw	r3,116(r2)

	q.question = "What is the minimum sample rate for Nyquist?";
 4020b8c:	00800034 	movhi	r2,0
 4020b90:	1082f304 	addi	r2,r2,3020
 4020b94:	00c00034 	movhi	r3,0
 4020b98:	18c08004 	addi	r3,r3,512
 4020b9c:	10c00015 	stw	r3,0(r2)
	q.level = 2;
 4020ba0:	00800034 	movhi	r2,0
 4020ba4:	1082f304 	addi	r2,r2,3020
 4020ba8:	00c00084 	movi	r3,2
 4020bac:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "2 x f_in";
 4020bb0:	00800034 	movhi	r2,0
 4020bb4:	1082f304 	addi	r2,r2,3020
 4020bb8:	00c00034 	movhi	r3,0
 4020bbc:	18c08c04 	addi	r3,r3,560
 4020bc0:	10c00215 	stw	r3,8(r2)
	q.answer1 = "2/f_in";
 4020bc4:	00800034 	movhi	r2,0
 4020bc8:	1082f304 	addi	r2,r2,3020
 4020bcc:	00c00034 	movhi	r3,0
 4020bd0:	18c08f04 	addi	r3,r3,572
 4020bd4:	10c00315 	stw	r3,12(r2)
	q.answer2 = "f_in/2";
 4020bd8:	00800034 	movhi	r2,0
 4020bdc:	1082f304 	addi	r2,r2,3020
 4020be0:	00c00034 	movhi	r3,0
 4020be4:	18c09104 	addi	r3,r3,580
 4020be8:	10c00415 	stw	r3,16(r2)
	q.answer3 = "2^f_in";
 4020bec:	00800034 	movhi	r2,0
 4020bf0:	1082f304 	addi	r2,r2,3020
 4020bf4:	00c00034 	movhi	r3,0
 4020bf8:	18c09304 	addi	r3,r3,588
 4020bfc:	10c00515 	stw	r3,20(r2)
	questions[5] = (q);
 4020c00:	00800034 	movhi	r2,0
 4020c04:	10829304 	addi	r2,r2,2636
 4020c08:	00c00034 	movhi	r3,0
 4020c0c:	18c2f304 	addi	r3,r3,3020
 4020c10:	19000017 	ldw	r4,0(r3)
 4020c14:	11001e15 	stw	r4,120(r2)
 4020c18:	19000117 	ldw	r4,4(r3)
 4020c1c:	11001f15 	stw	r4,124(r2)
 4020c20:	19000217 	ldw	r4,8(r3)
 4020c24:	11002015 	stw	r4,128(r2)
 4020c28:	19000317 	ldw	r4,12(r3)
 4020c2c:	11002115 	stw	r4,132(r2)
 4020c30:	19000417 	ldw	r4,16(r3)
 4020c34:	11002215 	stw	r4,136(r2)
 4020c38:	18c00517 	ldw	r3,20(r3)
 4020c3c:	10c02315 	stw	r3,140(r2)

	q.question = "What does LAB stand for?";
 4020c40:	00800034 	movhi	r2,0
 4020c44:	1082f304 	addi	r2,r2,3020
 4020c48:	00c00034 	movhi	r3,0
 4020c4c:	18c09504 	addi	r3,r3,596
 4020c50:	10c00015 	stw	r3,0(r2)
	q.level = 3;
 4020c54:	00800034 	movhi	r2,0
 4020c58:	1082f304 	addi	r2,r2,3020
 4020c5c:	00c000c4 	movi	r3,3
 4020c60:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "Logic Array Block";
 4020c64:	00800034 	movhi	r2,0
 4020c68:	1082f304 	addi	r2,r2,3020
 4020c6c:	00c00034 	movhi	r3,0
 4020c70:	18c09c04 	addi	r3,r3,624
 4020c74:	10c00215 	stw	r3,8(r2)
	q.answer1 = "Logic Array Bridge";
 4020c78:	00800034 	movhi	r2,0
 4020c7c:	1082f304 	addi	r2,r2,3020
 4020c80:	00c00034 	movhi	r3,0
 4020c84:	18c0a104 	addi	r3,r3,644
 4020c88:	10c00315 	stw	r3,12(r2)
	q.answer2 = "Low Amp Block";
 4020c8c:	00800034 	movhi	r2,0
 4020c90:	1082f304 	addi	r2,r2,3020
 4020c94:	00c00034 	movhi	r3,0
 4020c98:	18c0a604 	addi	r3,r3,664
 4020c9c:	10c00415 	stw	r3,16(r2)
	q.answer3 = "Little as Big";
 4020ca0:	00800034 	movhi	r2,0
 4020ca4:	1082f304 	addi	r2,r2,3020
 4020ca8:	00c00034 	movhi	r3,0
 4020cac:	18c0aa04 	addi	r3,r3,680
 4020cb0:	10c00515 	stw	r3,20(r2)
	questions[6] = (q);
 4020cb4:	00800034 	movhi	r2,0
 4020cb8:	10829304 	addi	r2,r2,2636
 4020cbc:	00c00034 	movhi	r3,0
 4020cc0:	18c2f304 	addi	r3,r3,3020
 4020cc4:	19000017 	ldw	r4,0(r3)
 4020cc8:	11002415 	stw	r4,144(r2)
 4020ccc:	19000117 	ldw	r4,4(r3)
 4020cd0:	11002515 	stw	r4,148(r2)
 4020cd4:	19000217 	ldw	r4,8(r3)
 4020cd8:	11002615 	stw	r4,152(r2)
 4020cdc:	19000317 	ldw	r4,12(r3)
 4020ce0:	11002715 	stw	r4,156(r2)
 4020ce4:	19000417 	ldw	r4,16(r3)
 4020ce8:	11002815 	stw	r4,160(r2)
 4020cec:	18c00517 	ldw	r3,20(r3)
 4020cf0:	10c02915 	stw	r3,164(r2)

	q.question = "Which of the following is not part of a PLL?";
 4020cf4:	00800034 	movhi	r2,0
 4020cf8:	1082f304 	addi	r2,r2,3020
 4020cfc:	00c00034 	movhi	r3,0
 4020d00:	18c0ae04 	addi	r3,r3,696
 4020d04:	10c00015 	stw	r3,0(r2)
	q.level = 3;
 4020d08:	00800034 	movhi	r2,0
 4020d0c:	1082f304 	addi	r2,r2,3020
 4020d10:	00c000c4 	movi	r3,3
 4020d14:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "Clock Divider";
 4020d18:	00800034 	movhi	r2,0
 4020d1c:	1082f304 	addi	r2,r2,3020
 4020d20:	00c00034 	movhi	r3,0
 4020d24:	18c0ba04 	addi	r3,r3,744
 4020d28:	10c00215 	stw	r3,8(r2)
	q.answer1 = "Charge Pump";
 4020d2c:	00800034 	movhi	r2,0
 4020d30:	1082f304 	addi	r2,r2,3020
 4020d34:	00c00034 	movhi	r3,0
 4020d38:	18c0be04 	addi	r3,r3,760
 4020d3c:	10c00315 	stw	r3,12(r2)
	q.answer2 = "Low Pass Filter";
 4020d40:	00800034 	movhi	r2,0
 4020d44:	1082f304 	addi	r2,r2,3020
 4020d48:	00c00034 	movhi	r3,0
 4020d4c:	18c0c104 	addi	r3,r3,772
 4020d50:	10c00415 	stw	r3,16(r2)
	q.answer3 = "Phase Detector";
 4020d54:	00800034 	movhi	r2,0
 4020d58:	1082f304 	addi	r2,r2,3020
 4020d5c:	00c00034 	movhi	r3,0
 4020d60:	18c0c504 	addi	r3,r3,788
 4020d64:	10c00515 	stw	r3,20(r2)
	questions[7] = (q);
 4020d68:	00800034 	movhi	r2,0
 4020d6c:	10829304 	addi	r2,r2,2636
 4020d70:	00c00034 	movhi	r3,0
 4020d74:	18c2f304 	addi	r3,r3,3020
 4020d78:	19000017 	ldw	r4,0(r3)
 4020d7c:	11002a15 	stw	r4,168(r2)
 4020d80:	19000117 	ldw	r4,4(r3)
 4020d84:	11002b15 	stw	r4,172(r2)
 4020d88:	19000217 	ldw	r4,8(r3)
 4020d8c:	11002c15 	stw	r4,176(r2)
 4020d90:	19000317 	ldw	r4,12(r3)
 4020d94:	11002d15 	stw	r4,180(r2)
 4020d98:	19000417 	ldw	r4,16(r3)
 4020d9c:	11002e15 	stw	r4,184(r2)
 4020da0:	18c00517 	ldw	r3,20(r3)
 4020da4:	10c02f15 	stw	r3,188(r2)

	q.question = "How do you calculate the output frequency of a PLL?";
 4020da8:	00800034 	movhi	r2,0
 4020dac:	1082f304 	addi	r2,r2,3020
 4020db0:	00c00034 	movhi	r3,0
 4020db4:	18c0c904 	addi	r3,r3,804
 4020db8:	10c00015 	stw	r3,0(r2)
	q.level = 3;
 4020dbc:	00800034 	movhi	r2,0
 4020dc0:	1082f304 	addi	r2,r2,3020
 4020dc4:	00c000c4 	movi	r3,3
 4020dc8:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "f_in x M/N";
 4020dcc:	00800034 	movhi	r2,0
 4020dd0:	1082f304 	addi	r2,r2,3020
 4020dd4:	00c00034 	movhi	r3,0
 4020dd8:	18c0d604 	addi	r3,r3,856
 4020ddc:	10c00215 	stw	r3,8(r2)
	q.answer1 = "f_in x N/M";
 4020de0:	00800034 	movhi	r2,0
 4020de4:	1082f304 	addi	r2,r2,3020
 4020de8:	00c00034 	movhi	r3,0
 4020dec:	18c0d904 	addi	r3,r3,868
 4020df0:	10c00315 	stw	r3,12(r2)
	q.answer2 = "M/f_in x N";
 4020df4:	00800034 	movhi	r2,0
 4020df8:	1082f304 	addi	r2,r2,3020
 4020dfc:	00c00034 	movhi	r3,0
 4020e00:	18c0dc04 	addi	r3,r3,880
 4020e04:	10c00415 	stw	r3,16(r2)
	q.answer3 = "M^f_in - N";
 4020e08:	00800034 	movhi	r2,0
 4020e0c:	1082f304 	addi	r2,r2,3020
 4020e10:	00c00034 	movhi	r3,0
 4020e14:	18c0df04 	addi	r3,r3,892
 4020e18:	10c00515 	stw	r3,20(r2)
	questions[8] = (q);
 4020e1c:	00800034 	movhi	r2,0
 4020e20:	10829304 	addi	r2,r2,2636
 4020e24:	00c00034 	movhi	r3,0
 4020e28:	18c2f304 	addi	r3,r3,3020
 4020e2c:	19000017 	ldw	r4,0(r3)
 4020e30:	11003015 	stw	r4,192(r2)
 4020e34:	19000117 	ldw	r4,4(r3)
 4020e38:	11003115 	stw	r4,196(r2)
 4020e3c:	19000217 	ldw	r4,8(r3)
 4020e40:	11003215 	stw	r4,200(r2)
 4020e44:	19000317 	ldw	r4,12(r3)
 4020e48:	11003315 	stw	r4,204(r2)
 4020e4c:	19000417 	ldw	r4,16(r3)
 4020e50:	11003415 	stw	r4,208(r2)
 4020e54:	18c00517 	ldw	r3,20(r3)
 4020e58:	10c03515 	stw	r3,212(r2)

	q.question = "What is not correct about pointers?";
 4020e5c:	00800034 	movhi	r2,0
 4020e60:	1082f304 	addi	r2,r2,3020
 4020e64:	00c00034 	movhi	r3,0
 4020e68:	18c0e204 	addi	r3,r3,904
 4020e6c:	10c00015 	stw	r3,0(r2)
	q.level = 4;
 4020e70:	00800034 	movhi	r2,0
 4020e74:	1082f304 	addi	r2,r2,3020
 4020e78:	00c00104 	movi	r3,4
 4020e7c:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "Are case sensitive";
 4020e80:	00800034 	movhi	r2,0
 4020e84:	1082f304 	addi	r2,r2,3020
 4020e88:	00c00034 	movhi	r3,0
 4020e8c:	18c0eb04 	addi	r3,r3,940
 4020e90:	10c00215 	stw	r3,8(r2)
	q.answer1 = "Have no type";
 4020e94:	00800034 	movhi	r2,0
 4020e98:	1082f304 	addi	r2,r2,3020
 4020e9c:	00c00034 	movhi	r3,0
 4020ea0:	18c0f004 	addi	r3,r3,960
 4020ea4:	10c00315 	stw	r3,12(r2)
	q.answer2 = "Point to any type";
 4020ea8:	00800034 	movhi	r2,0
 4020eac:	1082f304 	addi	r2,r2,3020
 4020eb0:	00c00034 	movhi	r3,0
 4020eb4:	18c0f404 	addi	r3,r3,976
 4020eb8:	10c00415 	stw	r3,16(r2)
	q.answer3 = "Can be casted";
 4020ebc:	00800034 	movhi	r2,0
 4020ec0:	1082f304 	addi	r2,r2,3020
 4020ec4:	00c00034 	movhi	r3,0
 4020ec8:	18c0f904 	addi	r3,r3,996
 4020ecc:	10c00515 	stw	r3,20(r2)
	questions[9] = (q);
 4020ed0:	00800034 	movhi	r2,0
 4020ed4:	10829304 	addi	r2,r2,2636
 4020ed8:	00c00034 	movhi	r3,0
 4020edc:	18c2f304 	addi	r3,r3,3020
 4020ee0:	19000017 	ldw	r4,0(r3)
 4020ee4:	11003615 	stw	r4,216(r2)
 4020ee8:	19000117 	ldw	r4,4(r3)
 4020eec:	11003715 	stw	r4,220(r2)
 4020ef0:	19000217 	ldw	r4,8(r3)
 4020ef4:	11003815 	stw	r4,224(r2)
 4020ef8:	19000317 	ldw	r4,12(r3)
 4020efc:	11003915 	stw	r4,228(r2)
 4020f00:	19000417 	ldw	r4,16(r3)
 4020f04:	11003a15 	stw	r4,232(r2)
 4020f08:	18c00517 	ldw	r3,20(r3)
 4020f0c:	10c03b15 	stw	r3,236(r2)

	q.question = "In which file can you find base addresses?";
 4020f10:	00800034 	movhi	r2,0
 4020f14:	1082f304 	addi	r2,r2,3020
 4020f18:	00c00034 	movhi	r3,0
 4020f1c:	18c0fd04 	addi	r3,r3,1012
 4020f20:	10c00015 	stw	r3,0(r2)
	q.level = 4;
 4020f24:	00800034 	movhi	r2,0
 4020f28:	1082f304 	addi	r2,r2,3020
 4020f2c:	00c00104 	movi	r3,4
 4020f30:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "system.h";
 4020f34:	00800034 	movhi	r2,0
 4020f38:	1082f304 	addi	r2,r2,3020
 4020f3c:	00c00034 	movhi	r3,0
 4020f40:	18c10804 	addi	r3,r3,1056
 4020f44:	10c00215 	stw	r3,8(r2)
	q.answer1 = "linker.h";
 4020f48:	00800034 	movhi	r2,0
 4020f4c:	1082f304 	addi	r2,r2,3020
 4020f50:	00c00034 	movhi	r3,0
 4020f54:	18c10b04 	addi	r3,r3,1068
 4020f58:	10c00315 	stw	r3,12(r2)
	q.answer2 = "nios2.h";
 4020f5c:	00800034 	movhi	r2,0
 4020f60:	1082f304 	addi	r2,r2,3020
 4020f64:	00c00034 	movhi	r3,0
 4020f68:	18c10e04 	addi	r3,r3,1080
 4020f6c:	10c00415 	stw	r3,16(r2)
	q.answer3 = ".._pio_regs.h";
 4020f70:	00800034 	movhi	r2,0
 4020f74:	1082f304 	addi	r2,r2,3020
 4020f78:	00c00034 	movhi	r3,0
 4020f7c:	18c11004 	addi	r3,r3,1088
 4020f80:	10c00515 	stw	r3,20(r2)
	questions[10] = (q);
 4020f84:	00800034 	movhi	r2,0
 4020f88:	10829304 	addi	r2,r2,2636
 4020f8c:	00c00034 	movhi	r3,0
 4020f90:	18c2f304 	addi	r3,r3,3020
 4020f94:	19000017 	ldw	r4,0(r3)
 4020f98:	11003c15 	stw	r4,240(r2)
 4020f9c:	19000117 	ldw	r4,4(r3)
 4020fa0:	11003d15 	stw	r4,244(r2)
 4020fa4:	19000217 	ldw	r4,8(r3)
 4020fa8:	11003e15 	stw	r4,248(r2)
 4020fac:	19000317 	ldw	r4,12(r3)
 4020fb0:	11003f15 	stw	r4,252(r2)
 4020fb4:	19000417 	ldw	r4,16(r3)
 4020fb8:	11004015 	stw	r4,256(r2)
 4020fbc:	18c00517 	ldw	r3,20(r3)
 4020fc0:	10c04115 	stw	r3,260(r2)

	q.question = "In which file can you find IO read and write functions?";
 4020fc4:	00800034 	movhi	r2,0
 4020fc8:	1082f304 	addi	r2,r2,3020
 4020fcc:	00c00034 	movhi	r3,0
 4020fd0:	18c11404 	addi	r3,r3,1104
 4020fd4:	10c00015 	stw	r3,0(r2)
	q.level = 4;
 4020fd8:	00800034 	movhi	r2,0
 4020fdc:	1082f304 	addi	r2,r2,3020
 4020fe0:	00c00104 	movi	r3,4
 4020fe4:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = ".._pio_regs.h";
 4020fe8:	00800034 	movhi	r2,0
 4020fec:	1082f304 	addi	r2,r2,3020
 4020ff0:	00c00034 	movhi	r3,0
 4020ff4:	18c11004 	addi	r3,r3,1088
 4020ff8:	10c00215 	stw	r3,8(r2)
	q.answer1 = "linker.h";
 4020ffc:	00800034 	movhi	r2,0
 4021000:	1082f304 	addi	r2,r2,3020
 4021004:	00c00034 	movhi	r3,0
 4021008:	18c10b04 	addi	r3,r3,1068
 402100c:	10c00315 	stw	r3,12(r2)
	q.answer2 = "nios2.h";
 4021010:	00800034 	movhi	r2,0
 4021014:	1082f304 	addi	r2,r2,3020
 4021018:	00c00034 	movhi	r3,0
 402101c:	18c10e04 	addi	r3,r3,1080
 4021020:	10c00415 	stw	r3,16(r2)
	q.answer3 = "system.h";
 4021024:	00800034 	movhi	r2,0
 4021028:	1082f304 	addi	r2,r2,3020
 402102c:	00c00034 	movhi	r3,0
 4021030:	18c10804 	addi	r3,r3,1056
 4021034:	10c00515 	stw	r3,20(r2)
	questions[11] = (q);
 4021038:	00800034 	movhi	r2,0
 402103c:	10829304 	addi	r2,r2,2636
 4021040:	00c00034 	movhi	r3,0
 4021044:	18c2f304 	addi	r3,r3,3020
 4021048:	19000017 	ldw	r4,0(r3)
 402104c:	11004215 	stw	r4,264(r2)
 4021050:	19000117 	ldw	r4,4(r3)
 4021054:	11004315 	stw	r4,268(r2)
 4021058:	19000217 	ldw	r4,8(r3)
 402105c:	11004415 	stw	r4,272(r2)
 4021060:	19000317 	ldw	r4,12(r3)
 4021064:	11004515 	stw	r4,276(r2)
 4021068:	19000417 	ldw	r4,16(r3)
 402106c:	11004615 	stw	r4,280(r2)
 4021070:	18c00517 	ldw	r3,20(r3)
 4021074:	10c04715 	stw	r3,284(r2)

	q.question = "What is not correct about the accelerometor?";
 4021078:	00800034 	movhi	r2,0
 402107c:	1082f304 	addi	r2,r2,3020
 4021080:	00c00034 	movhi	r3,0
 4021084:	18c12204 	addi	r3,r3,1160
 4021088:	10c00015 	stw	r3,0(r2)
	q.level = 5;
 402108c:	00800034 	movhi	r2,0
 4021090:	1082f304 	addi	r2,r2,3020
 4021094:	00c00144 	movi	r3,5
 4021098:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "5 wire SPI";
 402109c:	00800034 	movhi	r2,0
 40210a0:	1082f304 	addi	r2,r2,3020
 40210a4:	00c00034 	movhi	r3,0
 40210a8:	18c12e04 	addi	r3,r3,1208
 40210ac:	10c00215 	stw	r3,8(r2)
	q.answer1 = "Triggers on int1";
 40210b0:	00800034 	movhi	r2,0
 40210b4:	1082f304 	addi	r2,r2,3020
 40210b8:	00c00034 	movhi	r3,0
 40210bc:	18c13104 	addi	r3,r3,1220
 40210c0:	10c00315 	stw	r3,12(r2)
	q.answer2 = "10 bit wide";
 40210c4:	00800034 	movhi	r2,0
 40210c8:	1082f304 	addi	r2,r2,3020
 40210cc:	00c00034 	movhi	r3,0
 40210d0:	18c13604 	addi	r3,r3,1240
 40210d4:	10c00415 	stw	r3,16(r2)
	q.answer3 = "+/- 2g range";
 40210d8:	00800034 	movhi	r2,0
 40210dc:	1082f304 	addi	r2,r2,3020
 40210e0:	00c00034 	movhi	r3,0
 40210e4:	18c13904 	addi	r3,r3,1252
 40210e8:	10c00515 	stw	r3,20(r2)
	questions[12] = (q);
 40210ec:	00800034 	movhi	r2,0
 40210f0:	10829304 	addi	r2,r2,2636
 40210f4:	00c00034 	movhi	r3,0
 40210f8:	18c2f304 	addi	r3,r3,3020
 40210fc:	19000017 	ldw	r4,0(r3)
 4021100:	11004815 	stw	r4,288(r2)
 4021104:	19000117 	ldw	r4,4(r3)
 4021108:	11004915 	stw	r4,292(r2)
 402110c:	19000217 	ldw	r4,8(r3)
 4021110:	11004a15 	stw	r4,296(r2)
 4021114:	19000317 	ldw	r4,12(r3)
 4021118:	11004b15 	stw	r4,300(r2)
 402111c:	19000417 	ldw	r4,16(r3)
 4021120:	11004c15 	stw	r4,304(r2)
 4021124:	18c00517 	ldw	r3,20(r3)
 4021128:	10c04d15 	stw	r3,308(r2)

	q.question = "What is the correct order of the blocks of a PLL?";
 402112c:	00800034 	movhi	r2,0
 4021130:	1082f304 	addi	r2,r2,3020
 4021134:	00c00034 	movhi	r3,0
 4021138:	18c13d04 	addi	r3,r3,1268
 402113c:	10c00015 	stw	r3,0(r2)
	q.level = 5;
 4021140:	00800034 	movhi	r2,0
 4021144:	1082f304 	addi	r2,r2,3020
 4021148:	00c00144 	movi	r3,5
 402114c:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "Error Det., LPF, VCO";
 4021150:	00800034 	movhi	r2,0
 4021154:	1082f304 	addi	r2,r2,3020
 4021158:	00c00034 	movhi	r3,0
 402115c:	18c14a04 	addi	r3,r3,1320
 4021160:	10c00215 	stw	r3,8(r2)
	q.answer1 = "LPF, VCO, Error Det.";
 4021164:	00800034 	movhi	r2,0
 4021168:	1082f304 	addi	r2,r2,3020
 402116c:	00c00034 	movhi	r3,0
 4021170:	18c15004 	addi	r3,r3,1344
 4021174:	10c00315 	stw	r3,12(r2)
	q.answer2 = "Error Det., VCO, LPF";
 4021178:	00800034 	movhi	r2,0
 402117c:	1082f304 	addi	r2,r2,3020
 4021180:	00c00034 	movhi	r3,0
 4021184:	18c15604 	addi	r3,r3,1368
 4021188:	10c00415 	stw	r3,16(r2)
	q.answer3 = "VCO, Error Det. LPF";
 402118c:	00800034 	movhi	r2,0
 4021190:	1082f304 	addi	r2,r2,3020
 4021194:	00c00034 	movhi	r3,0
 4021198:	18c15c04 	addi	r3,r3,1392
 402119c:	10c00515 	stw	r3,20(r2)
	questions[13] = (q);
 40211a0:	00800034 	movhi	r2,0
 40211a4:	10829304 	addi	r2,r2,2636
 40211a8:	00c00034 	movhi	r3,0
 40211ac:	18c2f304 	addi	r3,r3,3020
 40211b0:	19000017 	ldw	r4,0(r3)
 40211b4:	11004e15 	stw	r4,312(r2)
 40211b8:	19000117 	ldw	r4,4(r3)
 40211bc:	11004f15 	stw	r4,316(r2)
 40211c0:	19000217 	ldw	r4,8(r3)
 40211c4:	11005015 	stw	r4,320(r2)
 40211c8:	19000317 	ldw	r4,12(r3)
 40211cc:	11005115 	stw	r4,324(r2)
 40211d0:	19000417 	ldw	r4,16(r3)
 40211d4:	11005215 	stw	r4,328(r2)
 40211d8:	18c00517 	ldw	r3,20(r3)
 40211dc:	10c05315 	stw	r3,332(r2)

	q.question = "Who is the VHDL god?";
 40211e0:	00800034 	movhi	r2,0
 40211e4:	1082f304 	addi	r2,r2,3020
 40211e8:	00c00034 	movhi	r3,0
 40211ec:	18c16104 	addi	r3,r3,1412
 40211f0:	10c00015 	stw	r3,0(r2)
	q.level = 5;
 40211f4:	00800034 	movhi	r2,0
 40211f8:	1082f304 	addi	r2,r2,3020
 40211fc:	00c00144 	movi	r3,5
 4021200:	10c00115 	stw	r3,4(r2)
	q.answerCorrect = "Dr. Johnson";
 4021204:	00800034 	movhi	r2,0
 4021208:	1082f304 	addi	r2,r2,3020
 402120c:	00c00034 	movhi	r3,0
 4021210:	18c16704 	addi	r3,r3,1436
 4021214:	10c00215 	stw	r3,8(r2)
	q.answer1 = "Stephen Hawking";
 4021218:	00800034 	movhi	r2,0
 402121c:	1082f304 	addi	r2,r2,3020
 4021220:	00c00034 	movhi	r3,0
 4021224:	18c16a04 	addi	r3,r3,1448
 4021228:	10c00315 	stw	r3,12(r2)
	q.answer2 = "Dr. Stecklina";
 402122c:	00800034 	movhi	r2,0
 4021230:	1082f304 	addi	r2,r2,3020
 4021234:	00c00034 	movhi	r3,0
 4021238:	18c16e04 	addi	r3,r3,1464
 402123c:	10c00415 	stw	r3,16(r2)
	q.answer3 = "Angela Merkel";
 4021240:	00800034 	movhi	r2,0
 4021244:	1082f304 	addi	r2,r2,3020
 4021248:	00c00034 	movhi	r3,0
 402124c:	18c17204 	addi	r3,r3,1480
 4021250:	10c00515 	stw	r3,20(r2)
	questions[14] = (q);
 4021254:	00800034 	movhi	r2,0
 4021258:	10829304 	addi	r2,r2,2636
 402125c:	00c00034 	movhi	r3,0
 4021260:	18c2f304 	addi	r3,r3,3020
 4021264:	19000017 	ldw	r4,0(r3)
 4021268:	11005415 	stw	r4,336(r2)
 402126c:	19000117 	ldw	r4,4(r3)
 4021270:	11005515 	stw	r4,340(r2)
 4021274:	19000217 	ldw	r4,8(r3)
 4021278:	11005615 	stw	r4,344(r2)
 402127c:	19000317 	ldw	r4,12(r3)
 4021280:	11005715 	stw	r4,348(r2)
 4021284:	19000417 	ldw	r4,16(r3)
 4021288:	11005815 	stw	r4,352(r2)
 402128c:	18c00517 	ldw	r3,20(r3)
 4021290:	10c05915 	stw	r3,356(r2)
}
 4021294:	0001883a 	nop
 4021298:	e037883a 	mov	sp,fp
 402129c:	df000017 	ldw	fp,0(sp)
 40212a0:	dec00104 	addi	sp,sp,4
 40212a4:	f800283a 	ret

040212a8 <shuffleQuestions>:

//Shuffles the question array randomly
void shuffleQuestions() {
 40212a8:	defff404 	addi	sp,sp,-48
 40212ac:	dfc00b15 	stw	ra,44(sp)
 40212b0:	df000a15 	stw	fp,40(sp)
 40212b4:	dc400915 	stw	r17,36(sp)
 40212b8:	dc000815 	stw	r16,32(sp)
 40212bc:	df000a04 	addi	fp,sp,40
	if (n > 1) {
 40212c0:	d0a00217 	ldw	r2,-32760(gp)
 40212c4:	10800090 	cmplti	r2,r2,2
 40212c8:	10005c1e 	bne	r2,zero,402143c <shuffleQuestions+0x194>
        size_t i;
        for (i = 0; i < n - 1; i++)
 40212cc:	e03ff615 	stw	zero,-40(fp)
 40212d0:	00005506 	br	4021428 <shuffleQuestions+0x180>
        {
          size_t j = i + rand() / (RAND_MAX / (n - i) + 1);
 40212d4:	4022c600 	call	4022c60 <rand>
 40212d8:	1021883a 	mov	r16,r2
 40212dc:	d0a00217 	ldw	r2,-32760(gp)
 40212e0:	1007883a 	mov	r3,r2
 40212e4:	e0bff617 	ldw	r2,-40(fp)
 40212e8:	1885c83a 	sub	r2,r3,r2
 40212ec:	100b883a 	mov	r5,r2
 40212f0:	01200034 	movhi	r4,32768
 40212f4:	213fffc4 	addi	r4,r4,-1
 40212f8:	4022a4c0 	call	4022a4c <__udivsi3>
 40212fc:	10800044 	addi	r2,r2,1
 4021300:	100b883a 	mov	r5,r2
 4021304:	8009883a 	mov	r4,r16
 4021308:	4022a4c0 	call	4022a4c <__udivsi3>
 402130c:	1007883a 	mov	r3,r2
 4021310:	e0bff617 	ldw	r2,-40(fp)
 4021314:	1885883a 	add	r2,r3,r2
 4021318:	e0bff715 	stw	r2,-36(fp)
          struct Question t = questions[j];
 402131c:	04000034 	movhi	r16,0
 4021320:	84029304 	addi	r16,r16,2636
 4021324:	e0bff717 	ldw	r2,-36(fp)
 4021328:	01400604 	movi	r5,24
 402132c:	1009883a 	mov	r4,r2
 4021330:	4022b080 	call	4022b08 <__mulsi3>
 4021334:	8085883a 	add	r2,r16,r2
 4021338:	10c00017 	ldw	r3,0(r2)
 402133c:	e0fff815 	stw	r3,-32(fp)
 4021340:	10c00117 	ldw	r3,4(r2)
 4021344:	e0fff915 	stw	r3,-28(fp)
 4021348:	10c00217 	ldw	r3,8(r2)
 402134c:	e0fffa15 	stw	r3,-24(fp)
 4021350:	10c00317 	ldw	r3,12(r2)
 4021354:	e0fffb15 	stw	r3,-20(fp)
 4021358:	10c00417 	ldw	r3,16(r2)
 402135c:	e0fffc15 	stw	r3,-16(fp)
 4021360:	10800517 	ldw	r2,20(r2)
 4021364:	e0bffd15 	stw	r2,-12(fp)
          questions[j] = questions[i];
 4021368:	04000034 	movhi	r16,0
 402136c:	84029304 	addi	r16,r16,2636
 4021370:	e0bff717 	ldw	r2,-36(fp)
 4021374:	01400604 	movi	r5,24
 4021378:	1009883a 	mov	r4,r2
 402137c:	4022b080 	call	4022b08 <__mulsi3>
 4021380:	80a1883a 	add	r16,r16,r2
 4021384:	04400034 	movhi	r17,0
 4021388:	8c429304 	addi	r17,r17,2636
 402138c:	e0bff617 	ldw	r2,-40(fp)
 4021390:	01400604 	movi	r5,24
 4021394:	1009883a 	mov	r4,r2
 4021398:	4022b080 	call	4022b08 <__mulsi3>
 402139c:	8885883a 	add	r2,r17,r2
 40213a0:	10c00017 	ldw	r3,0(r2)
 40213a4:	80c00015 	stw	r3,0(r16)
 40213a8:	10c00117 	ldw	r3,4(r2)
 40213ac:	80c00115 	stw	r3,4(r16)
 40213b0:	10c00217 	ldw	r3,8(r2)
 40213b4:	80c00215 	stw	r3,8(r16)
 40213b8:	10c00317 	ldw	r3,12(r2)
 40213bc:	80c00315 	stw	r3,12(r16)
 40213c0:	10c00417 	ldw	r3,16(r2)
 40213c4:	80c00415 	stw	r3,16(r16)
 40213c8:	10800517 	ldw	r2,20(r2)
 40213cc:	80800515 	stw	r2,20(r16)
          questions[i] = t;
 40213d0:	04000034 	movhi	r16,0
 40213d4:	84029304 	addi	r16,r16,2636
 40213d8:	e0bff617 	ldw	r2,-40(fp)
 40213dc:	01400604 	movi	r5,24
 40213e0:	1009883a 	mov	r4,r2
 40213e4:	4022b080 	call	4022b08 <__mulsi3>
 40213e8:	8085883a 	add	r2,r16,r2
 40213ec:	e0fff817 	ldw	r3,-32(fp)
 40213f0:	10c00015 	stw	r3,0(r2)
 40213f4:	e0fff917 	ldw	r3,-28(fp)
 40213f8:	10c00115 	stw	r3,4(r2)
 40213fc:	e0fffa17 	ldw	r3,-24(fp)
 4021400:	10c00215 	stw	r3,8(r2)
 4021404:	e0fffb17 	ldw	r3,-20(fp)
 4021408:	10c00315 	stw	r3,12(r2)
 402140c:	e0fffc17 	ldw	r3,-16(fp)
 4021410:	10c00415 	stw	r3,16(r2)
 4021414:	e0fffd17 	ldw	r3,-12(fp)
 4021418:	10c00515 	stw	r3,20(r2)

//Shuffles the question array randomly
void shuffleQuestions() {
	if (n > 1) {
        size_t i;
        for (i = 0; i < n - 1; i++)
 402141c:	e0bff617 	ldw	r2,-40(fp)
 4021420:	10800044 	addi	r2,r2,1
 4021424:	e0bff615 	stw	r2,-40(fp)
 4021428:	d0a00217 	ldw	r2,-32760(gp)
 402142c:	10bfffc4 	addi	r2,r2,-1
 4021430:	1007883a 	mov	r3,r2
 4021434:	e0bff617 	ldw	r2,-40(fp)
 4021438:	10ffa636 	bltu	r2,r3,40212d4 <__flash_rwdata_start+0xffffb8f4>
          struct Question t = questions[j];
          questions[j] = questions[i];
          questions[i] = t;
        }
   }
}
 402143c:	0001883a 	nop
 4021440:	e6fffe04 	addi	sp,fp,-8
 4021444:	dfc00317 	ldw	ra,12(sp)
 4021448:	df000217 	ldw	fp,8(sp)
 402144c:	dc400117 	ldw	r17,4(sp)
 4021450:	dc000017 	ldw	r16,0(sp)
 4021454:	dec00404 	addi	sp,sp,16
 4021458:	f800283a 	ret

0402145c <shuffleAnswers>:

//Shuffles the answer array randomly
void shuffleAnswers()
{
 402145c:	defffa04 	addi	sp,sp,-24
 4021460:	dfc00515 	stw	ra,20(sp)
 4021464:	df000415 	stw	fp,16(sp)
 4021468:	df000404 	addi	fp,sp,16
    int size = 4;
 402146c:	00800104 	movi	r2,4
 4021470:	e0bffd15 	stw	r2,-12(fp)
    if (size > 1)
 4021474:	e0bffd17 	ldw	r2,-12(fp)
 4021478:	10800090 	cmplti	r2,r2,2
 402147c:	10002c1e 	bne	r2,zero,4021530 <shuffleAnswers+0xd4>
    {
        int i;
        for (i = 0; i < size - 1; i++)
 4021480:	e03ffc15 	stw	zero,-16(fp)
 4021484:	00002606 	br	4021520 <shuffleAnswers+0xc4>
        {
            int j = rand() % size; //Random number between 0 and 3
 4021488:	4022c600 	call	4022c60 <rand>
 402148c:	e17ffd17 	ldw	r5,-12(fp)
 4021490:	1009883a 	mov	r4,r2
 4021494:	40229d80 	call	40229d8 <__modsi3>
 4021498:	e0bffe15 	stw	r2,-8(fp)
            const char* temp = answers[j];
 402149c:	00800034 	movhi	r2,0
 40214a0:	1081b804 	addi	r2,r2,1760
 40214a4:	e0fffe17 	ldw	r3,-8(fp)
 40214a8:	18c7883a 	add	r3,r3,r3
 40214ac:	18c7883a 	add	r3,r3,r3
 40214b0:	10c5883a 	add	r2,r2,r3
 40214b4:	10800017 	ldw	r2,0(r2)
 40214b8:	e0bfff15 	stw	r2,-4(fp)
            answers[j] = answers[i];
 40214bc:	00800034 	movhi	r2,0
 40214c0:	1081b804 	addi	r2,r2,1760
 40214c4:	e0fffc17 	ldw	r3,-16(fp)
 40214c8:	18c7883a 	add	r3,r3,r3
 40214cc:	18c7883a 	add	r3,r3,r3
 40214d0:	10c5883a 	add	r2,r2,r3
 40214d4:	11000017 	ldw	r4,0(r2)
 40214d8:	00800034 	movhi	r2,0
 40214dc:	1081b804 	addi	r2,r2,1760
 40214e0:	e0fffe17 	ldw	r3,-8(fp)
 40214e4:	18c7883a 	add	r3,r3,r3
 40214e8:	18c7883a 	add	r3,r3,r3
 40214ec:	10c5883a 	add	r2,r2,r3
 40214f0:	11000015 	stw	r4,0(r2)
            answers[i] = temp;
 40214f4:	00800034 	movhi	r2,0
 40214f8:	1081b804 	addi	r2,r2,1760
 40214fc:	e0fffc17 	ldw	r3,-16(fp)
 4021500:	18c7883a 	add	r3,r3,r3
 4021504:	18c7883a 	add	r3,r3,r3
 4021508:	10c5883a 	add	r2,r2,r3
 402150c:	e0ffff17 	ldw	r3,-4(fp)
 4021510:	10c00015 	stw	r3,0(r2)
{
    int size = 4;
    if (size > 1)
    {
        int i;
        for (i = 0; i < size - 1; i++)
 4021514:	e0bffc17 	ldw	r2,-16(fp)
 4021518:	10800044 	addi	r2,r2,1
 402151c:	e0bffc15 	stw	r2,-16(fp)
 4021520:	e0bffd17 	ldw	r2,-12(fp)
 4021524:	10bfffc4 	addi	r2,r2,-1
 4021528:	e0fffc17 	ldw	r3,-16(fp)
 402152c:	18bfd616 	blt	r3,r2,4021488 <__flash_rwdata_start+0xffffbaa8>
            const char* temp = answers[j];
            answers[j] = answers[i];
            answers[i] = temp;
        }
    }
}
 4021530:	0001883a 	nop
 4021534:	e037883a 	mov	sp,fp
 4021538:	dfc00117 	ldw	ra,4(sp)
 402153c:	df000017 	ldw	fp,0(sp)
 4021540:	dec00204 	addi	sp,sp,8
 4021544:	f800283a 	ret

04021548 <displayBoxes>:

//Displays the margins of the question and answers to make it look better
void displayBoxes(alt_up_char_buffer_dev *char_buf_dev) {
 4021548:	defffc04 	addi	sp,sp,-16
 402154c:	dfc00315 	stw	ra,12(sp)
 4021550:	df000215 	stw	fp,8(sp)
 4021554:	df000204 	addi	fp,sp,8
 4021558:	e13fff15 	stw	r4,-4(fp)
	//Draw a line under the question from the left to right
	for (int i = -2; i < 56; i++) {
 402155c:	00bfff84 	movi	r2,-2
 4021560:	e0bffe15 	stw	r2,-8(fp)
 4021564:	00000f06 	br	40215a4 <displayBoxes+0x5c>
		alt_up_char_buffer_string(char_buf_dev, "_", xMargin+i ,yMargin + 1);
 4021568:	d0e00017 	ldw	r3,-32768(gp)
 402156c:	e0bffe17 	ldw	r2,-8(fp)
 4021570:	1885883a 	add	r2,r3,r2
 4021574:	1007883a 	mov	r3,r2
 4021578:	d0a00117 	ldw	r2,-32764(gp)
 402157c:	10800044 	addi	r2,r2,1
 4021580:	100f883a 	mov	r7,r2
 4021584:	180d883a 	mov	r6,r3
 4021588:	01400034 	movhi	r5,0
 402158c:	29417604 	addi	r5,r5,1496
 4021590:	e13fff17 	ldw	r4,-4(fp)
 4021594:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
}

//Displays the margins of the question and answers to make it look better
void displayBoxes(alt_up_char_buffer_dev *char_buf_dev) {
	//Draw a line under the question from the left to right
	for (int i = -2; i < 56; i++) {
 4021598:	e0bffe17 	ldw	r2,-8(fp)
 402159c:	10800044 	addi	r2,r2,1
 40215a0:	e0bffe15 	stw	r2,-8(fp)
 40215a4:	e0bffe17 	ldw	r2,-8(fp)
 40215a8:	10800e10 	cmplti	r2,r2,56
 40215ac:	103fee1e 	bne	r2,zero,4021568 <__flash_rwdata_start+0xffffbb88>
		alt_up_char_buffer_string(char_buf_dev, "_", xMargin+i ,yMargin + 1);
	}

	//Draw lines next to Answer A
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin-2 ,yMargin + 9);
 40215b0:	d0a00017 	ldw	r2,-32768(gp)
 40215b4:	10bfff84 	addi	r2,r2,-2
 40215b8:	1007883a 	mov	r3,r2
 40215bc:	d0a00117 	ldw	r2,-32764(gp)
 40215c0:	10800244 	addi	r2,r2,9
 40215c4:	100f883a 	mov	r7,r2
 40215c8:	180d883a 	mov	r6,r3
 40215cc:	01400034 	movhi	r5,0
 40215d0:	29417704 	addi	r5,r5,1500
 40215d4:	e13fff17 	ldw	r4,-4(fp)
 40215d8:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin-2 ,yMargin + 10);
 40215dc:	d0a00017 	ldw	r2,-32768(gp)
 40215e0:	10bfff84 	addi	r2,r2,-2
 40215e4:	1007883a 	mov	r3,r2
 40215e8:	d0a00117 	ldw	r2,-32764(gp)
 40215ec:	10800284 	addi	r2,r2,10
 40215f0:	100f883a 	mov	r7,r2
 40215f4:	180d883a 	mov	r6,r3
 40215f8:	01400034 	movhi	r5,0
 40215fc:	29417704 	addi	r5,r5,1500
 4021600:	e13fff17 	ldw	r4,-4(fp)
 4021604:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin-2 ,yMargin + 11);
 4021608:	d0a00017 	ldw	r2,-32768(gp)
 402160c:	10bfff84 	addi	r2,r2,-2
 4021610:	1007883a 	mov	r3,r2
 4021614:	d0a00117 	ldw	r2,-32764(gp)
 4021618:	108002c4 	addi	r2,r2,11
 402161c:	100f883a 	mov	r7,r2
 4021620:	180d883a 	mov	r6,r3
 4021624:	01400034 	movhi	r5,0
 4021628:	29417704 	addi	r5,r5,1500
 402162c:	e13fff17 	ldw	r4,-4(fp)
 4021630:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin+25 ,yMargin + 9);
 4021634:	d0a00017 	ldw	r2,-32768(gp)
 4021638:	10800644 	addi	r2,r2,25
 402163c:	1007883a 	mov	r3,r2
 4021640:	d0a00117 	ldw	r2,-32764(gp)
 4021644:	10800244 	addi	r2,r2,9
 4021648:	100f883a 	mov	r7,r2
 402164c:	180d883a 	mov	r6,r3
 4021650:	01400034 	movhi	r5,0
 4021654:	29417704 	addi	r5,r5,1500
 4021658:	e13fff17 	ldw	r4,-4(fp)
 402165c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin+25 ,yMargin + 10);
 4021660:	d0a00017 	ldw	r2,-32768(gp)
 4021664:	10800644 	addi	r2,r2,25
 4021668:	1007883a 	mov	r3,r2
 402166c:	d0a00117 	ldw	r2,-32764(gp)
 4021670:	10800284 	addi	r2,r2,10
 4021674:	100f883a 	mov	r7,r2
 4021678:	180d883a 	mov	r6,r3
 402167c:	01400034 	movhi	r5,0
 4021680:	29417704 	addi	r5,r5,1500
 4021684:	e13fff17 	ldw	r4,-4(fp)
 4021688:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin+25 ,yMargin + 11);
 402168c:	d0a00017 	ldw	r2,-32768(gp)
 4021690:	10800644 	addi	r2,r2,25
 4021694:	1007883a 	mov	r3,r2
 4021698:	d0a00117 	ldw	r2,-32764(gp)
 402169c:	108002c4 	addi	r2,r2,11
 40216a0:	100f883a 	mov	r7,r2
 40216a4:	180d883a 	mov	r6,r3
 40216a8:	01400034 	movhi	r5,0
 40216ac:	29417704 	addi	r5,r5,1500
 40216b0:	e13fff17 	ldw	r4,-4(fp)
 40216b4:	4023db00 	call	4023db0 <alt_up_char_buffer_string>

	//Draw lines next to Answer B
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin-2 ,yMargin + 19);
 40216b8:	d0a00017 	ldw	r2,-32768(gp)
 40216bc:	10bfff84 	addi	r2,r2,-2
 40216c0:	1007883a 	mov	r3,r2
 40216c4:	d0a00117 	ldw	r2,-32764(gp)
 40216c8:	108004c4 	addi	r2,r2,19
 40216cc:	100f883a 	mov	r7,r2
 40216d0:	180d883a 	mov	r6,r3
 40216d4:	01400034 	movhi	r5,0
 40216d8:	29417704 	addi	r5,r5,1500
 40216dc:	e13fff17 	ldw	r4,-4(fp)
 40216e0:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin-2 ,yMargin + 20);
 40216e4:	d0a00017 	ldw	r2,-32768(gp)
 40216e8:	10bfff84 	addi	r2,r2,-2
 40216ec:	1007883a 	mov	r3,r2
 40216f0:	d0a00117 	ldw	r2,-32764(gp)
 40216f4:	10800504 	addi	r2,r2,20
 40216f8:	100f883a 	mov	r7,r2
 40216fc:	180d883a 	mov	r6,r3
 4021700:	01400034 	movhi	r5,0
 4021704:	29417704 	addi	r5,r5,1500
 4021708:	e13fff17 	ldw	r4,-4(fp)
 402170c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin-2 ,yMargin + 21);
 4021710:	d0a00017 	ldw	r2,-32768(gp)
 4021714:	10bfff84 	addi	r2,r2,-2
 4021718:	1007883a 	mov	r3,r2
 402171c:	d0a00117 	ldw	r2,-32764(gp)
 4021720:	10800544 	addi	r2,r2,21
 4021724:	100f883a 	mov	r7,r2
 4021728:	180d883a 	mov	r6,r3
 402172c:	01400034 	movhi	r5,0
 4021730:	29417704 	addi	r5,r5,1500
 4021734:	e13fff17 	ldw	r4,-4(fp)
 4021738:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin+25 ,yMargin + 19);
 402173c:	d0a00017 	ldw	r2,-32768(gp)
 4021740:	10800644 	addi	r2,r2,25
 4021744:	1007883a 	mov	r3,r2
 4021748:	d0a00117 	ldw	r2,-32764(gp)
 402174c:	108004c4 	addi	r2,r2,19
 4021750:	100f883a 	mov	r7,r2
 4021754:	180d883a 	mov	r6,r3
 4021758:	01400034 	movhi	r5,0
 402175c:	29417704 	addi	r5,r5,1500
 4021760:	e13fff17 	ldw	r4,-4(fp)
 4021764:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin+25 ,yMargin + 20);
 4021768:	d0a00017 	ldw	r2,-32768(gp)
 402176c:	10800644 	addi	r2,r2,25
 4021770:	1007883a 	mov	r3,r2
 4021774:	d0a00117 	ldw	r2,-32764(gp)
 4021778:	10800504 	addi	r2,r2,20
 402177c:	100f883a 	mov	r7,r2
 4021780:	180d883a 	mov	r6,r3
 4021784:	01400034 	movhi	r5,0
 4021788:	29417704 	addi	r5,r5,1500
 402178c:	e13fff17 	ldw	r4,-4(fp)
 4021790:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin+25 ,yMargin + 21);
 4021794:	d0a00017 	ldw	r2,-32768(gp)
 4021798:	10800644 	addi	r2,r2,25
 402179c:	1007883a 	mov	r3,r2
 40217a0:	d0a00117 	ldw	r2,-32764(gp)
 40217a4:	10800544 	addi	r2,r2,21
 40217a8:	100f883a 	mov	r7,r2
 40217ac:	180d883a 	mov	r6,r3
 40217b0:	01400034 	movhi	r5,0
 40217b4:	29417704 	addi	r5,r5,1500
 40217b8:	e13fff17 	ldw	r4,-4(fp)
 40217bc:	4023db00 	call	4023db0 <alt_up_char_buffer_string>

	//Draw lines next to Answer C
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 28 ,yMargin + 9);
 40217c0:	d0a00017 	ldw	r2,-32768(gp)
 40217c4:	10800704 	addi	r2,r2,28
 40217c8:	1007883a 	mov	r3,r2
 40217cc:	d0a00117 	ldw	r2,-32764(gp)
 40217d0:	10800244 	addi	r2,r2,9
 40217d4:	100f883a 	mov	r7,r2
 40217d8:	180d883a 	mov	r6,r3
 40217dc:	01400034 	movhi	r5,0
 40217e0:	29417704 	addi	r5,r5,1500
 40217e4:	e13fff17 	ldw	r4,-4(fp)
 40217e8:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 28 ,yMargin + 10);
 40217ec:	d0a00017 	ldw	r2,-32768(gp)
 40217f0:	10800704 	addi	r2,r2,28
 40217f4:	1007883a 	mov	r3,r2
 40217f8:	d0a00117 	ldw	r2,-32764(gp)
 40217fc:	10800284 	addi	r2,r2,10
 4021800:	100f883a 	mov	r7,r2
 4021804:	180d883a 	mov	r6,r3
 4021808:	01400034 	movhi	r5,0
 402180c:	29417704 	addi	r5,r5,1500
 4021810:	e13fff17 	ldw	r4,-4(fp)
 4021814:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 28 ,yMargin + 11);
 4021818:	d0a00017 	ldw	r2,-32768(gp)
 402181c:	10800704 	addi	r2,r2,28
 4021820:	1007883a 	mov	r3,r2
 4021824:	d0a00117 	ldw	r2,-32764(gp)
 4021828:	108002c4 	addi	r2,r2,11
 402182c:	100f883a 	mov	r7,r2
 4021830:	180d883a 	mov	r6,r3
 4021834:	01400034 	movhi	r5,0
 4021838:	29417704 	addi	r5,r5,1500
 402183c:	e13fff17 	ldw	r4,-4(fp)
 4021840:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 55 ,yMargin + 9);
 4021844:	d0a00017 	ldw	r2,-32768(gp)
 4021848:	10800dc4 	addi	r2,r2,55
 402184c:	1007883a 	mov	r3,r2
 4021850:	d0a00117 	ldw	r2,-32764(gp)
 4021854:	10800244 	addi	r2,r2,9
 4021858:	100f883a 	mov	r7,r2
 402185c:	180d883a 	mov	r6,r3
 4021860:	01400034 	movhi	r5,0
 4021864:	29417704 	addi	r5,r5,1500
 4021868:	e13fff17 	ldw	r4,-4(fp)
 402186c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 55 ,yMargin + 10);
 4021870:	d0a00017 	ldw	r2,-32768(gp)
 4021874:	10800dc4 	addi	r2,r2,55
 4021878:	1007883a 	mov	r3,r2
 402187c:	d0a00117 	ldw	r2,-32764(gp)
 4021880:	10800284 	addi	r2,r2,10
 4021884:	100f883a 	mov	r7,r2
 4021888:	180d883a 	mov	r6,r3
 402188c:	01400034 	movhi	r5,0
 4021890:	29417704 	addi	r5,r5,1500
 4021894:	e13fff17 	ldw	r4,-4(fp)
 4021898:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 55 ,yMargin + 11);
 402189c:	d0a00017 	ldw	r2,-32768(gp)
 40218a0:	10800dc4 	addi	r2,r2,55
 40218a4:	1007883a 	mov	r3,r2
 40218a8:	d0a00117 	ldw	r2,-32764(gp)
 40218ac:	108002c4 	addi	r2,r2,11
 40218b0:	100f883a 	mov	r7,r2
 40218b4:	180d883a 	mov	r6,r3
 40218b8:	01400034 	movhi	r5,0
 40218bc:	29417704 	addi	r5,r5,1500
 40218c0:	e13fff17 	ldw	r4,-4(fp)
 40218c4:	4023db00 	call	4023db0 <alt_up_char_buffer_string>

	//Draw lines next to Answer D
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 28 ,yMargin + 19);
 40218c8:	d0a00017 	ldw	r2,-32768(gp)
 40218cc:	10800704 	addi	r2,r2,28
 40218d0:	1007883a 	mov	r3,r2
 40218d4:	d0a00117 	ldw	r2,-32764(gp)
 40218d8:	108004c4 	addi	r2,r2,19
 40218dc:	100f883a 	mov	r7,r2
 40218e0:	180d883a 	mov	r6,r3
 40218e4:	01400034 	movhi	r5,0
 40218e8:	29417704 	addi	r5,r5,1500
 40218ec:	e13fff17 	ldw	r4,-4(fp)
 40218f0:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 28 ,yMargin + 20);
 40218f4:	d0a00017 	ldw	r2,-32768(gp)
 40218f8:	10800704 	addi	r2,r2,28
 40218fc:	1007883a 	mov	r3,r2
 4021900:	d0a00117 	ldw	r2,-32764(gp)
 4021904:	10800504 	addi	r2,r2,20
 4021908:	100f883a 	mov	r7,r2
 402190c:	180d883a 	mov	r6,r3
 4021910:	01400034 	movhi	r5,0
 4021914:	29417704 	addi	r5,r5,1500
 4021918:	e13fff17 	ldw	r4,-4(fp)
 402191c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 28 ,yMargin + 21);
 4021920:	d0a00017 	ldw	r2,-32768(gp)
 4021924:	10800704 	addi	r2,r2,28
 4021928:	1007883a 	mov	r3,r2
 402192c:	d0a00117 	ldw	r2,-32764(gp)
 4021930:	10800544 	addi	r2,r2,21
 4021934:	100f883a 	mov	r7,r2
 4021938:	180d883a 	mov	r6,r3
 402193c:	01400034 	movhi	r5,0
 4021940:	29417704 	addi	r5,r5,1500
 4021944:	e13fff17 	ldw	r4,-4(fp)
 4021948:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 55 ,yMargin + 19);
 402194c:	d0a00017 	ldw	r2,-32768(gp)
 4021950:	10800dc4 	addi	r2,r2,55
 4021954:	1007883a 	mov	r3,r2
 4021958:	d0a00117 	ldw	r2,-32764(gp)
 402195c:	108004c4 	addi	r2,r2,19
 4021960:	100f883a 	mov	r7,r2
 4021964:	180d883a 	mov	r6,r3
 4021968:	01400034 	movhi	r5,0
 402196c:	29417704 	addi	r5,r5,1500
 4021970:	e13fff17 	ldw	r4,-4(fp)
 4021974:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 55 ,yMargin + 20);
 4021978:	d0a00017 	ldw	r2,-32768(gp)
 402197c:	10800dc4 	addi	r2,r2,55
 4021980:	1007883a 	mov	r3,r2
 4021984:	d0a00117 	ldw	r2,-32764(gp)
 4021988:	10800504 	addi	r2,r2,20
 402198c:	100f883a 	mov	r7,r2
 4021990:	180d883a 	mov	r6,r3
 4021994:	01400034 	movhi	r5,0
 4021998:	29417704 	addi	r5,r5,1500
 402199c:	e13fff17 	ldw	r4,-4(fp)
 40219a0:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "|", xMargin + 55 ,yMargin + 21);
 40219a4:	d0a00017 	ldw	r2,-32768(gp)
 40219a8:	10800dc4 	addi	r2,r2,55
 40219ac:	1007883a 	mov	r3,r2
 40219b0:	d0a00117 	ldw	r2,-32764(gp)
 40219b4:	10800544 	addi	r2,r2,21
 40219b8:	100f883a 	mov	r7,r2
 40219bc:	180d883a 	mov	r6,r3
 40219c0:	01400034 	movhi	r5,0
 40219c4:	29417704 	addi	r5,r5,1500
 40219c8:	e13fff17 	ldw	r4,-4(fp)
 40219cc:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
}
 40219d0:	0001883a 	nop
 40219d4:	e037883a 	mov	sp,fp
 40219d8:	dfc00117 	ldw	ra,4(sp)
 40219dc:	df000017 	ldw	fp,0(sp)
 40219e0:	dec00204 	addi	sp,sp,8
 40219e4:	f800283a 	ret

040219e8 <getSSEG1value>:

//Returns a value the SSEG can interpret, based on a key input
int getSSEG1value(struct Question q, int key) {
 40219e8:	defffa04 	addi	sp,sp,-24
 40219ec:	df000115 	stw	fp,4(sp)
 40219f0:	df000104 	addi	fp,sp,4
 40219f4:	e1000115 	stw	r4,4(fp)
 40219f8:	e1400215 	stw	r5,8(fp)
 40219fc:	e1800315 	stw	r6,12(fp)
 4021a00:	e1c00415 	stw	r7,16(fp)
	int value;
	if (key == 0b0001) {
 4021a04:	e0800717 	ldw	r2,28(fp)
 4021a08:	10800058 	cmpnei	r2,r2,1
 4021a0c:	1000031e 	bne	r2,zero,4021a1c <getSSEG1value+0x34>
		value = 0b10001000;
 4021a10:	00802204 	movi	r2,136
 4021a14:	e0bfff15 	stw	r2,-4(fp)
 4021a18:	00001306 	br	4021a68 <getSSEG1value+0x80>
	}
	else if (key == 0b0010) {
 4021a1c:	e0800717 	ldw	r2,28(fp)
 4021a20:	10800098 	cmpnei	r2,r2,2
 4021a24:	1000031e 	bne	r2,zero,4021a34 <getSSEG1value+0x4c>
		value = 0b10000011;
 4021a28:	008020c4 	movi	r2,131
 4021a2c:	e0bfff15 	stw	r2,-4(fp)
 4021a30:	00000d06 	br	4021a68 <getSSEG1value+0x80>
	}
	else if (key == 0b0100) {
 4021a34:	e0800717 	ldw	r2,28(fp)
 4021a38:	10800118 	cmpnei	r2,r2,4
 4021a3c:	1000031e 	bne	r2,zero,4021a4c <getSSEG1value+0x64>
		value = 0b11000110;
 4021a40:	00803184 	movi	r2,198
 4021a44:	e0bfff15 	stw	r2,-4(fp)
 4021a48:	00000706 	br	4021a68 <getSSEG1value+0x80>
	}
	else if (key == 0b1000) {
 4021a4c:	e0800717 	ldw	r2,28(fp)
 4021a50:	10800218 	cmpnei	r2,r2,8
 4021a54:	1000031e 	bne	r2,zero,4021a64 <getSSEG1value+0x7c>
		value = 0b10100001;
 4021a58:	00802844 	movi	r2,161
 4021a5c:	e0bfff15 	stw	r2,-4(fp)
 4021a60:	00000106 	br	4021a68 <getSSEG1value+0x80>
	}
	else {
		value = 0b00000000;
 4021a64:	e03fff15 	stw	zero,-4(fp)
	}
	return value;
 4021a68:	e0bfff17 	ldw	r2,-4(fp)
}
 4021a6c:	e037883a 	mov	sp,fp
 4021a70:	df000017 	ldw	fp,0(sp)
 4021a74:	dec00504 	addi	sp,sp,20
 4021a78:	f800283a 	ret

04021a7c <getSSEG2value>:

//Returns a value the SSEG can interpret, based on a key input
int getSSEG2value(struct Question q) {
 4021a7c:	defffa04 	addi	sp,sp,-24
 4021a80:	df000115 	stw	fp,4(sp)
 4021a84:	df000104 	addi	fp,sp,4
 4021a88:	e1000115 	stw	r4,4(fp)
 4021a8c:	e1400215 	stw	r5,8(fp)
 4021a90:	e1800315 	stw	r6,12(fp)
 4021a94:	e1c00415 	stw	r7,16(fp)
	int value;
	if (answers[0] == q.answerCorrect) {
 4021a98:	00800034 	movhi	r2,0
 4021a9c:	1081b804 	addi	r2,r2,1760
 4021aa0:	10c00017 	ldw	r3,0(r2)
 4021aa4:	e0800317 	ldw	r2,12(fp)
 4021aa8:	1880031e 	bne	r3,r2,4021ab8 <getSSEG2value+0x3c>
		value = 0b1000100000000000;
 4021aac:	00a20014 	movui	r2,34816
 4021ab0:	e0bfff15 	stw	r2,-4(fp)
 4021ab4:	00001906 	br	4021b1c <getSSEG2value+0xa0>
	}
	else if (answers[1] == q.answerCorrect) {
 4021ab8:	00800034 	movhi	r2,0
 4021abc:	1081b804 	addi	r2,r2,1760
 4021ac0:	10c00117 	ldw	r3,4(r2)
 4021ac4:	e0800317 	ldw	r2,12(fp)
 4021ac8:	1880031e 	bne	r3,r2,4021ad8 <getSSEG2value+0x5c>
		value = 0b1000001100000000;
 4021acc:	00a0c014 	movui	r2,33536
 4021ad0:	e0bfff15 	stw	r2,-4(fp)
 4021ad4:	00001106 	br	4021b1c <getSSEG2value+0xa0>
	}
	else if (answers[2] == q.answerCorrect) {
 4021ad8:	00800034 	movhi	r2,0
 4021adc:	1081b804 	addi	r2,r2,1760
 4021ae0:	10c00217 	ldw	r3,8(r2)
 4021ae4:	e0800317 	ldw	r2,12(fp)
 4021ae8:	1880031e 	bne	r3,r2,4021af8 <getSSEG2value+0x7c>
		value = 0b1100011000000000;
 4021aec:	00b18014 	movui	r2,50688
 4021af0:	e0bfff15 	stw	r2,-4(fp)
 4021af4:	00000906 	br	4021b1c <getSSEG2value+0xa0>
	}
	else if (answers[3] == q.answerCorrect) {
 4021af8:	00800034 	movhi	r2,0
 4021afc:	1081b804 	addi	r2,r2,1760
 4021b00:	10c00317 	ldw	r3,12(r2)
 4021b04:	e0800317 	ldw	r2,12(fp)
 4021b08:	1880031e 	bne	r3,r2,4021b18 <getSSEG2value+0x9c>
		value = 0b1010000100000000;
 4021b0c:	00a84014 	movui	r2,41216
 4021b10:	e0bfff15 	stw	r2,-4(fp)
 4021b14:	00000106 	br	4021b1c <getSSEG2value+0xa0>
	}
	else {
		value = 0b0000000000000000;
 4021b18:	e03fff15 	stw	zero,-4(fp)
	}
	return value;
 4021b1c:	e0bfff17 	ldw	r2,-4(fp)
}
 4021b20:	e037883a 	mov	sp,fp
 4021b24:	df000017 	ldw	fp,0(sp)
 4021b28:	dec00504 	addi	sp,sp,20
 4021b2c:	f800283a 	ret

04021b30 <displayTitle>:

//Displays a title, nearly in the center of the screen
void displayTitle(char* text, alt_up_char_buffer_dev *char_buf_dev) {
 4021b30:	defffc04 	addi	sp,sp,-16
 4021b34:	dfc00315 	stw	ra,12(sp)
 4021b38:	df000215 	stw	fp,8(sp)
 4021b3c:	df000204 	addi	fp,sp,8
 4021b40:	e13ffe15 	stw	r4,-8(fp)
 4021b44:	e17fff15 	stw	r5,-4(fp)
	alt_up_char_buffer_clear(char_buf_dev);
 4021b48:	e13fff17 	ldw	r4,-4(fp)
 4021b4c:	4023eac0 	call	4023eac <alt_up_char_buffer_clear>
	alt_up_char_buffer_string(char_buf_dev, text, xMargin + 17 ,yMargin + 15);
 4021b50:	d0a00017 	ldw	r2,-32768(gp)
 4021b54:	10800444 	addi	r2,r2,17
 4021b58:	1007883a 	mov	r3,r2
 4021b5c:	d0a00117 	ldw	r2,-32764(gp)
 4021b60:	108003c4 	addi	r2,r2,15
 4021b64:	100f883a 	mov	r7,r2
 4021b68:	180d883a 	mov	r6,r3
 4021b6c:	e17ffe17 	ldw	r5,-8(fp)
 4021b70:	e13fff17 	ldw	r4,-4(fp)
 4021b74:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
}
 4021b78:	0001883a 	nop
 4021b7c:	e037883a 	mov	sp,fp
 4021b80:	dfc00117 	ldw	ra,4(sp)
 4021b84:	df000017 	ldw	fp,0(sp)
 4021b88:	dec00204 	addi	sp,sp,8
 4021b8c:	f800283a 	ret

04021b90 <displayLevel>:

//Displays the levels on the right side of the screen and highlights the current one
void displayLevel(int level, alt_up_char_buffer_dev *char_buf_dev) {
 4021b90:	defffc04 	addi	sp,sp,-16
 4021b94:	dfc00315 	stw	ra,12(sp)
 4021b98:	df000215 	stw	fp,8(sp)
 4021b9c:	df000204 	addi	fp,sp,8
 4021ba0:	e13ffe15 	stw	r4,-8(fp)
 4021ba4:	e17fff15 	stw	r5,-4(fp)
	//Display all levels
	alt_up_char_buffer_string(char_buf_dev, "Level 1", xMargin + 60,yMargin + 20);
 4021ba8:	d0a00017 	ldw	r2,-32768(gp)
 4021bac:	10800f04 	addi	r2,r2,60
 4021bb0:	1007883a 	mov	r3,r2
 4021bb4:	d0a00117 	ldw	r2,-32764(gp)
 4021bb8:	10800504 	addi	r2,r2,20
 4021bbc:	100f883a 	mov	r7,r2
 4021bc0:	180d883a 	mov	r6,r3
 4021bc4:	01400034 	movhi	r5,0
 4021bc8:	29417804 	addi	r5,r5,1504
 4021bcc:	e13fff17 	ldw	r4,-4(fp)
 4021bd0:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "Level 2", xMargin + 60,yMargin + 15);
 4021bd4:	d0a00017 	ldw	r2,-32768(gp)
 4021bd8:	10800f04 	addi	r2,r2,60
 4021bdc:	1007883a 	mov	r3,r2
 4021be0:	d0a00117 	ldw	r2,-32764(gp)
 4021be4:	108003c4 	addi	r2,r2,15
 4021be8:	100f883a 	mov	r7,r2
 4021bec:	180d883a 	mov	r6,r3
 4021bf0:	01400034 	movhi	r5,0
 4021bf4:	29417a04 	addi	r5,r5,1512
 4021bf8:	e13fff17 	ldw	r4,-4(fp)
 4021bfc:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "Level 3", xMargin + 60,yMargin + 10);
 4021c00:	d0a00017 	ldw	r2,-32768(gp)
 4021c04:	10800f04 	addi	r2,r2,60
 4021c08:	1007883a 	mov	r3,r2
 4021c0c:	d0a00117 	ldw	r2,-32764(gp)
 4021c10:	10800284 	addi	r2,r2,10
 4021c14:	100f883a 	mov	r7,r2
 4021c18:	180d883a 	mov	r6,r3
 4021c1c:	01400034 	movhi	r5,0
 4021c20:	29417c04 	addi	r5,r5,1520
 4021c24:	e13fff17 	ldw	r4,-4(fp)
 4021c28:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "Level 4", xMargin + 60,yMargin + 5);
 4021c2c:	d0a00017 	ldw	r2,-32768(gp)
 4021c30:	10800f04 	addi	r2,r2,60
 4021c34:	1007883a 	mov	r3,r2
 4021c38:	d0a00117 	ldw	r2,-32764(gp)
 4021c3c:	10800144 	addi	r2,r2,5
 4021c40:	100f883a 	mov	r7,r2
 4021c44:	180d883a 	mov	r6,r3
 4021c48:	01400034 	movhi	r5,0
 4021c4c:	29417e04 	addi	r5,r5,1528
 4021c50:	e13fff17 	ldw	r4,-4(fp)
 4021c54:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "Level 5", xMargin + 60,yMargin);
 4021c58:	d0a00017 	ldw	r2,-32768(gp)
 4021c5c:	10800f04 	addi	r2,r2,60
 4021c60:	1007883a 	mov	r3,r2
 4021c64:	d0a00117 	ldw	r2,-32764(gp)
 4021c68:	100f883a 	mov	r7,r2
 4021c6c:	180d883a 	mov	r6,r3
 4021c70:	01400034 	movhi	r5,0
 4021c74:	29418004 	addi	r5,r5,1536
 4021c78:	e13fff17 	ldw	r4,-4(fp)
 4021c7c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>

	//If current level is 1, highlight level 1
	if (level == 1) {
 4021c80:	e0bffe17 	ldw	r2,-8(fp)
 4021c84:	10800058 	cmpnei	r2,r2,1
 4021c88:	1000371e 	bne	r2,zero,4021d68 <displayLevel+0x1d8>
		alt_up_char_buffer_string(char_buf_dev, "->", xMargin + 58 ,yMargin + 20);
 4021c8c:	d0a00017 	ldw	r2,-32768(gp)
 4021c90:	10800e84 	addi	r2,r2,58
 4021c94:	1007883a 	mov	r3,r2
 4021c98:	d0a00117 	ldw	r2,-32764(gp)
 4021c9c:	10800504 	addi	r2,r2,20
 4021ca0:	100f883a 	mov	r7,r2
 4021ca4:	180d883a 	mov	r6,r3
 4021ca8:	01400034 	movhi	r5,0
 4021cac:	29418204 	addi	r5,r5,1544
 4021cb0:	e13fff17 	ldw	r4,-4(fp)
 4021cb4:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 15);
 4021cb8:	d0a00017 	ldw	r2,-32768(gp)
 4021cbc:	10800e84 	addi	r2,r2,58
 4021cc0:	1007883a 	mov	r3,r2
 4021cc4:	d0a00117 	ldw	r2,-32764(gp)
 4021cc8:	108003c4 	addi	r2,r2,15
 4021ccc:	100f883a 	mov	r7,r2
 4021cd0:	180d883a 	mov	r6,r3
 4021cd4:	01400034 	movhi	r5,0
 4021cd8:	29418304 	addi	r5,r5,1548
 4021cdc:	e13fff17 	ldw	r4,-4(fp)
 4021ce0:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
 4021ce4:	d0a00017 	ldw	r2,-32768(gp)
 4021ce8:	10800e84 	addi	r2,r2,58
 4021cec:	1007883a 	mov	r3,r2
 4021cf0:	d0a00117 	ldw	r2,-32764(gp)
 4021cf4:	10800284 	addi	r2,r2,10
 4021cf8:	100f883a 	mov	r7,r2
 4021cfc:	180d883a 	mov	r6,r3
 4021d00:	01400034 	movhi	r5,0
 4021d04:	29418304 	addi	r5,r5,1548
 4021d08:	e13fff17 	ldw	r4,-4(fp)
 4021d0c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
 4021d10:	d0a00017 	ldw	r2,-32768(gp)
 4021d14:	10800e84 	addi	r2,r2,58
 4021d18:	1007883a 	mov	r3,r2
 4021d1c:	d0a00117 	ldw	r2,-32764(gp)
 4021d20:	10800144 	addi	r2,r2,5
 4021d24:	100f883a 	mov	r7,r2
 4021d28:	180d883a 	mov	r6,r3
 4021d2c:	01400034 	movhi	r5,0
 4021d30:	29418304 	addi	r5,r5,1548
 4021d34:	e13fff17 	ldw	r4,-4(fp)
 4021d38:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin);
 4021d3c:	d0a00017 	ldw	r2,-32768(gp)
 4021d40:	10800e84 	addi	r2,r2,58
 4021d44:	1007883a 	mov	r3,r2
 4021d48:	d0a00117 	ldw	r2,-32764(gp)
 4021d4c:	100f883a 	mov	r7,r2
 4021d50:	180d883a 	mov	r6,r3
 4021d54:	01400034 	movhi	r5,0
 4021d58:	29418304 	addi	r5,r5,1548
 4021d5c:	e13fff17 	ldw	r4,-4(fp)
 4021d60:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 15);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
	}
}
 4021d64:	00011e06 	br	40221e0 <displayLevel+0x650>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin);
	}
	//If current level is 2, highlight level 2
	else if (level == 2) {
 4021d68:	e0bffe17 	ldw	r2,-8(fp)
 4021d6c:	10800098 	cmpnei	r2,r2,2
 4021d70:	1000371e 	bne	r2,zero,4021e50 <displayLevel+0x2c0>
		alt_up_char_buffer_string(char_buf_dev, "->", xMargin + 58 ,yMargin + 15);
 4021d74:	d0a00017 	ldw	r2,-32768(gp)
 4021d78:	10800e84 	addi	r2,r2,58
 4021d7c:	1007883a 	mov	r3,r2
 4021d80:	d0a00117 	ldw	r2,-32764(gp)
 4021d84:	108003c4 	addi	r2,r2,15
 4021d88:	100f883a 	mov	r7,r2
 4021d8c:	180d883a 	mov	r6,r3
 4021d90:	01400034 	movhi	r5,0
 4021d94:	29418204 	addi	r5,r5,1544
 4021d98:	e13fff17 	ldw	r4,-4(fp)
 4021d9c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
 4021da0:	d0a00017 	ldw	r2,-32768(gp)
 4021da4:	10800e84 	addi	r2,r2,58
 4021da8:	1007883a 	mov	r3,r2
 4021dac:	d0a00117 	ldw	r2,-32764(gp)
 4021db0:	10800504 	addi	r2,r2,20
 4021db4:	100f883a 	mov	r7,r2
 4021db8:	180d883a 	mov	r6,r3
 4021dbc:	01400034 	movhi	r5,0
 4021dc0:	29418304 	addi	r5,r5,1548
 4021dc4:	e13fff17 	ldw	r4,-4(fp)
 4021dc8:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
 4021dcc:	d0a00017 	ldw	r2,-32768(gp)
 4021dd0:	10800e84 	addi	r2,r2,58
 4021dd4:	1007883a 	mov	r3,r2
 4021dd8:	d0a00117 	ldw	r2,-32764(gp)
 4021ddc:	10800284 	addi	r2,r2,10
 4021de0:	100f883a 	mov	r7,r2
 4021de4:	180d883a 	mov	r6,r3
 4021de8:	01400034 	movhi	r5,0
 4021dec:	29418304 	addi	r5,r5,1548
 4021df0:	e13fff17 	ldw	r4,-4(fp)
 4021df4:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
 4021df8:	d0a00017 	ldw	r2,-32768(gp)
 4021dfc:	10800e84 	addi	r2,r2,58
 4021e00:	1007883a 	mov	r3,r2
 4021e04:	d0a00117 	ldw	r2,-32764(gp)
 4021e08:	10800144 	addi	r2,r2,5
 4021e0c:	100f883a 	mov	r7,r2
 4021e10:	180d883a 	mov	r6,r3
 4021e14:	01400034 	movhi	r5,0
 4021e18:	29418304 	addi	r5,r5,1548
 4021e1c:	e13fff17 	ldw	r4,-4(fp)
 4021e20:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin);
 4021e24:	d0a00017 	ldw	r2,-32768(gp)
 4021e28:	10800e84 	addi	r2,r2,58
 4021e2c:	1007883a 	mov	r3,r2
 4021e30:	d0a00117 	ldw	r2,-32764(gp)
 4021e34:	100f883a 	mov	r7,r2
 4021e38:	180d883a 	mov	r6,r3
 4021e3c:	01400034 	movhi	r5,0
 4021e40:	29418304 	addi	r5,r5,1548
 4021e44:	e13fff17 	ldw	r4,-4(fp)
 4021e48:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 15);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
	}
}
 4021e4c:	0000e406 	br	40221e0 <displayLevel+0x650>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin);
	}
	//If current level is 3, highlight level 3
	else if (level == 3) {
 4021e50:	e0bffe17 	ldw	r2,-8(fp)
 4021e54:	108000d8 	cmpnei	r2,r2,3
 4021e58:	1000371e 	bne	r2,zero,4021f38 <displayLevel+0x3a8>
		alt_up_char_buffer_string(char_buf_dev, "->", xMargin + 58 ,yMargin + 10);
 4021e5c:	d0a00017 	ldw	r2,-32768(gp)
 4021e60:	10800e84 	addi	r2,r2,58
 4021e64:	1007883a 	mov	r3,r2
 4021e68:	d0a00117 	ldw	r2,-32764(gp)
 4021e6c:	10800284 	addi	r2,r2,10
 4021e70:	100f883a 	mov	r7,r2
 4021e74:	180d883a 	mov	r6,r3
 4021e78:	01400034 	movhi	r5,0
 4021e7c:	29418204 	addi	r5,r5,1544
 4021e80:	e13fff17 	ldw	r4,-4(fp)
 4021e84:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 15);
 4021e88:	d0a00017 	ldw	r2,-32768(gp)
 4021e8c:	10800e84 	addi	r2,r2,58
 4021e90:	1007883a 	mov	r3,r2
 4021e94:	d0a00117 	ldw	r2,-32764(gp)
 4021e98:	108003c4 	addi	r2,r2,15
 4021e9c:	100f883a 	mov	r7,r2
 4021ea0:	180d883a 	mov	r6,r3
 4021ea4:	01400034 	movhi	r5,0
 4021ea8:	29418304 	addi	r5,r5,1548
 4021eac:	e13fff17 	ldw	r4,-4(fp)
 4021eb0:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
 4021eb4:	d0a00017 	ldw	r2,-32768(gp)
 4021eb8:	10800e84 	addi	r2,r2,58
 4021ebc:	1007883a 	mov	r3,r2
 4021ec0:	d0a00117 	ldw	r2,-32764(gp)
 4021ec4:	10800504 	addi	r2,r2,20
 4021ec8:	100f883a 	mov	r7,r2
 4021ecc:	180d883a 	mov	r6,r3
 4021ed0:	01400034 	movhi	r5,0
 4021ed4:	29418304 	addi	r5,r5,1548
 4021ed8:	e13fff17 	ldw	r4,-4(fp)
 4021edc:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
 4021ee0:	d0a00017 	ldw	r2,-32768(gp)
 4021ee4:	10800e84 	addi	r2,r2,58
 4021ee8:	1007883a 	mov	r3,r2
 4021eec:	d0a00117 	ldw	r2,-32764(gp)
 4021ef0:	10800144 	addi	r2,r2,5
 4021ef4:	100f883a 	mov	r7,r2
 4021ef8:	180d883a 	mov	r6,r3
 4021efc:	01400034 	movhi	r5,0
 4021f00:	29418304 	addi	r5,r5,1548
 4021f04:	e13fff17 	ldw	r4,-4(fp)
 4021f08:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin);
 4021f0c:	d0a00017 	ldw	r2,-32768(gp)
 4021f10:	10800e84 	addi	r2,r2,58
 4021f14:	1007883a 	mov	r3,r2
 4021f18:	d0a00117 	ldw	r2,-32764(gp)
 4021f1c:	100f883a 	mov	r7,r2
 4021f20:	180d883a 	mov	r6,r3
 4021f24:	01400034 	movhi	r5,0
 4021f28:	29418304 	addi	r5,r5,1548
 4021f2c:	e13fff17 	ldw	r4,-4(fp)
 4021f30:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 15);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
	}
}
 4021f34:	0000aa06 	br	40221e0 <displayLevel+0x650>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin);
	}
	//If current level is 4, highlight level 4
	else if (level == 4) {
 4021f38:	e0bffe17 	ldw	r2,-8(fp)
 4021f3c:	10800118 	cmpnei	r2,r2,4
 4021f40:	1000371e 	bne	r2,zero,4022020 <displayLevel+0x490>
		alt_up_char_buffer_string(char_buf_dev, "->", xMargin + 58 ,yMargin + 5);
 4021f44:	d0a00017 	ldw	r2,-32768(gp)
 4021f48:	10800e84 	addi	r2,r2,58
 4021f4c:	1007883a 	mov	r3,r2
 4021f50:	d0a00117 	ldw	r2,-32764(gp)
 4021f54:	10800144 	addi	r2,r2,5
 4021f58:	100f883a 	mov	r7,r2
 4021f5c:	180d883a 	mov	r6,r3
 4021f60:	01400034 	movhi	r5,0
 4021f64:	29418204 	addi	r5,r5,1544
 4021f68:	e13fff17 	ldw	r4,-4(fp)
 4021f6c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 15);
 4021f70:	d0a00017 	ldw	r2,-32768(gp)
 4021f74:	10800e84 	addi	r2,r2,58
 4021f78:	1007883a 	mov	r3,r2
 4021f7c:	d0a00117 	ldw	r2,-32764(gp)
 4021f80:	108003c4 	addi	r2,r2,15
 4021f84:	100f883a 	mov	r7,r2
 4021f88:	180d883a 	mov	r6,r3
 4021f8c:	01400034 	movhi	r5,0
 4021f90:	29418304 	addi	r5,r5,1548
 4021f94:	e13fff17 	ldw	r4,-4(fp)
 4021f98:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
 4021f9c:	d0a00017 	ldw	r2,-32768(gp)
 4021fa0:	10800e84 	addi	r2,r2,58
 4021fa4:	1007883a 	mov	r3,r2
 4021fa8:	d0a00117 	ldw	r2,-32764(gp)
 4021fac:	10800284 	addi	r2,r2,10
 4021fb0:	100f883a 	mov	r7,r2
 4021fb4:	180d883a 	mov	r6,r3
 4021fb8:	01400034 	movhi	r5,0
 4021fbc:	29418304 	addi	r5,r5,1548
 4021fc0:	e13fff17 	ldw	r4,-4(fp)
 4021fc4:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
 4021fc8:	d0a00017 	ldw	r2,-32768(gp)
 4021fcc:	10800e84 	addi	r2,r2,58
 4021fd0:	1007883a 	mov	r3,r2
 4021fd4:	d0a00117 	ldw	r2,-32764(gp)
 4021fd8:	10800504 	addi	r2,r2,20
 4021fdc:	100f883a 	mov	r7,r2
 4021fe0:	180d883a 	mov	r6,r3
 4021fe4:	01400034 	movhi	r5,0
 4021fe8:	29418304 	addi	r5,r5,1548
 4021fec:	e13fff17 	ldw	r4,-4(fp)
 4021ff0:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin);
 4021ff4:	d0a00017 	ldw	r2,-32768(gp)
 4021ff8:	10800e84 	addi	r2,r2,58
 4021ffc:	1007883a 	mov	r3,r2
 4022000:	d0a00117 	ldw	r2,-32764(gp)
 4022004:	100f883a 	mov	r7,r2
 4022008:	180d883a 	mov	r6,r3
 402200c:	01400034 	movhi	r5,0
 4022010:	29418304 	addi	r5,r5,1548
 4022014:	e13fff17 	ldw	r4,-4(fp)
 4022018:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 15);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
	}
}
 402201c:	00007006 	br	40221e0 <displayLevel+0x650>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin);
	}
	//If current level is 5, highlight level 5
	else if (level == 5) {
 4022020:	e0bffe17 	ldw	r2,-8(fp)
 4022024:	10800158 	cmpnei	r2,r2,5
 4022028:	1000371e 	bne	r2,zero,4022108 <displayLevel+0x578>
		alt_up_char_buffer_string(char_buf_dev, "->", xMargin + 58 ,yMargin);
 402202c:	d0a00017 	ldw	r2,-32768(gp)
 4022030:	10800e84 	addi	r2,r2,58
 4022034:	1007883a 	mov	r3,r2
 4022038:	d0a00117 	ldw	r2,-32764(gp)
 402203c:	100f883a 	mov	r7,r2
 4022040:	180d883a 	mov	r6,r3
 4022044:	01400034 	movhi	r5,0
 4022048:	29418204 	addi	r5,r5,1544
 402204c:	e13fff17 	ldw	r4,-4(fp)
 4022050:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 15);
 4022054:	d0a00017 	ldw	r2,-32768(gp)
 4022058:	10800e84 	addi	r2,r2,58
 402205c:	1007883a 	mov	r3,r2
 4022060:	d0a00117 	ldw	r2,-32764(gp)
 4022064:	108003c4 	addi	r2,r2,15
 4022068:	100f883a 	mov	r7,r2
 402206c:	180d883a 	mov	r6,r3
 4022070:	01400034 	movhi	r5,0
 4022074:	29418304 	addi	r5,r5,1548
 4022078:	e13fff17 	ldw	r4,-4(fp)
 402207c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
 4022080:	d0a00017 	ldw	r2,-32768(gp)
 4022084:	10800e84 	addi	r2,r2,58
 4022088:	1007883a 	mov	r3,r2
 402208c:	d0a00117 	ldw	r2,-32764(gp)
 4022090:	10800284 	addi	r2,r2,10
 4022094:	100f883a 	mov	r7,r2
 4022098:	180d883a 	mov	r6,r3
 402209c:	01400034 	movhi	r5,0
 40220a0:	29418304 	addi	r5,r5,1548
 40220a4:	e13fff17 	ldw	r4,-4(fp)
 40220a8:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
 40220ac:	d0a00017 	ldw	r2,-32768(gp)
 40220b0:	10800e84 	addi	r2,r2,58
 40220b4:	1007883a 	mov	r3,r2
 40220b8:	d0a00117 	ldw	r2,-32764(gp)
 40220bc:	10800144 	addi	r2,r2,5
 40220c0:	100f883a 	mov	r7,r2
 40220c4:	180d883a 	mov	r6,r3
 40220c8:	01400034 	movhi	r5,0
 40220cc:	29418304 	addi	r5,r5,1548
 40220d0:	e13fff17 	ldw	r4,-4(fp)
 40220d4:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
 40220d8:	d0a00017 	ldw	r2,-32768(gp)
 40220dc:	10800e84 	addi	r2,r2,58
 40220e0:	1007883a 	mov	r3,r2
 40220e4:	d0a00117 	ldw	r2,-32764(gp)
 40220e8:	10800504 	addi	r2,r2,20
 40220ec:	100f883a 	mov	r7,r2
 40220f0:	180d883a 	mov	r6,r3
 40220f4:	01400034 	movhi	r5,0
 40220f8:	29418304 	addi	r5,r5,1548
 40220fc:	e13fff17 	ldw	r4,-4(fp)
 4022100:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 15);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
	}
}
 4022104:	00003606 	br	40221e0 <displayLevel+0x650>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
	}
	//If no current level, clear all indicators
	else {
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin);
 4022108:	d0a00017 	ldw	r2,-32768(gp)
 402210c:	10800e84 	addi	r2,r2,58
 4022110:	1007883a 	mov	r3,r2
 4022114:	d0a00117 	ldw	r2,-32764(gp)
 4022118:	100f883a 	mov	r7,r2
 402211c:	180d883a 	mov	r6,r3
 4022120:	01400034 	movhi	r5,0
 4022124:	29418304 	addi	r5,r5,1548
 4022128:	e13fff17 	ldw	r4,-4(fp)
 402212c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 15);
 4022130:	d0a00017 	ldw	r2,-32768(gp)
 4022134:	10800e84 	addi	r2,r2,58
 4022138:	1007883a 	mov	r3,r2
 402213c:	d0a00117 	ldw	r2,-32764(gp)
 4022140:	108003c4 	addi	r2,r2,15
 4022144:	100f883a 	mov	r7,r2
 4022148:	180d883a 	mov	r6,r3
 402214c:	01400034 	movhi	r5,0
 4022150:	29418304 	addi	r5,r5,1548
 4022154:	e13fff17 	ldw	r4,-4(fp)
 4022158:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 10);
 402215c:	d0a00017 	ldw	r2,-32768(gp)
 4022160:	10800e84 	addi	r2,r2,58
 4022164:	1007883a 	mov	r3,r2
 4022168:	d0a00117 	ldw	r2,-32764(gp)
 402216c:	10800284 	addi	r2,r2,10
 4022170:	100f883a 	mov	r7,r2
 4022174:	180d883a 	mov	r6,r3
 4022178:	01400034 	movhi	r5,0
 402217c:	29418304 	addi	r5,r5,1548
 4022180:	e13fff17 	ldw	r4,-4(fp)
 4022184:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 5);
 4022188:	d0a00017 	ldw	r2,-32768(gp)
 402218c:	10800e84 	addi	r2,r2,58
 4022190:	1007883a 	mov	r3,r2
 4022194:	d0a00117 	ldw	r2,-32764(gp)
 4022198:	10800144 	addi	r2,r2,5
 402219c:	100f883a 	mov	r7,r2
 40221a0:	180d883a 	mov	r6,r3
 40221a4:	01400034 	movhi	r5,0
 40221a8:	29418304 	addi	r5,r5,1548
 40221ac:	e13fff17 	ldw	r4,-4(fp)
 40221b0:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "  ", xMargin + 58 ,yMargin + 20);
 40221b4:	d0a00017 	ldw	r2,-32768(gp)
 40221b8:	10800e84 	addi	r2,r2,58
 40221bc:	1007883a 	mov	r3,r2
 40221c0:	d0a00117 	ldw	r2,-32764(gp)
 40221c4:	10800504 	addi	r2,r2,20
 40221c8:	100f883a 	mov	r7,r2
 40221cc:	180d883a 	mov	r6,r3
 40221d0:	01400034 	movhi	r5,0
 40221d4:	29418304 	addi	r5,r5,1548
 40221d8:	e13fff17 	ldw	r4,-4(fp)
 40221dc:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}
}
 40221e0:	0001883a 	nop
 40221e4:	e037883a 	mov	sp,fp
 40221e8:	dfc00117 	ldw	ra,4(sp)
 40221ec:	df000017 	ldw	fp,0(sp)
 40221f0:	dec00204 	addi	sp,sp,8
 40221f4:	f800283a 	ret

040221f8 <highlightAnswer>:

//Highlights an answer by drawing an O next to it
void highlightAnswer(int key, alt_up_char_buffer_dev *char_buf_dev) {
 40221f8:	defffc04 	addi	sp,sp,-16
 40221fc:	dfc00315 	stw	ra,12(sp)
 4022200:	df000215 	stw	fp,8(sp)
 4022204:	df000204 	addi	fp,sp,8
 4022208:	e13ffe15 	stw	r4,-8(fp)
 402220c:	e17fff15 	stw	r5,-4(fp)
	//If no key pressed, clear all indicators
	if (key == 0b0000) {
 4022210:	e0bffe17 	ldw	r2,-8(fp)
 4022214:	10002d1e 	bne	r2,zero,40222cc <highlightAnswer+0xd4>
		alt_up_char_buffer_string(char_buf_dev, " ", xMargin-1 ,yMargin + 10);
 4022218:	d0a00017 	ldw	r2,-32768(gp)
 402221c:	10bfffc4 	addi	r2,r2,-1
 4022220:	1007883a 	mov	r3,r2
 4022224:	d0a00117 	ldw	r2,-32764(gp)
 4022228:	10800284 	addi	r2,r2,10
 402222c:	100f883a 	mov	r7,r2
 4022230:	180d883a 	mov	r6,r3
 4022234:	01400034 	movhi	r5,0
 4022238:	29418404 	addi	r5,r5,1552
 402223c:	e13fff17 	ldw	r4,-4(fp)
 4022240:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, " ", xMargin + 30 -1 ,yMargin + 10);
 4022244:	d0a00017 	ldw	r2,-32768(gp)
 4022248:	10800744 	addi	r2,r2,29
 402224c:	1007883a 	mov	r3,r2
 4022250:	d0a00117 	ldw	r2,-32764(gp)
 4022254:	10800284 	addi	r2,r2,10
 4022258:	100f883a 	mov	r7,r2
 402225c:	180d883a 	mov	r6,r3
 4022260:	01400034 	movhi	r5,0
 4022264:	29418404 	addi	r5,r5,1552
 4022268:	e13fff17 	ldw	r4,-4(fp)
 402226c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, " ", xMargin-1 ,yMargin + 20);
 4022270:	d0a00017 	ldw	r2,-32768(gp)
 4022274:	10bfffc4 	addi	r2,r2,-1
 4022278:	1007883a 	mov	r3,r2
 402227c:	d0a00117 	ldw	r2,-32764(gp)
 4022280:	10800504 	addi	r2,r2,20
 4022284:	100f883a 	mov	r7,r2
 4022288:	180d883a 	mov	r6,r3
 402228c:	01400034 	movhi	r5,0
 4022290:	29418404 	addi	r5,r5,1552
 4022294:	e13fff17 	ldw	r4,-4(fp)
 4022298:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, " ", xMargin + 30 -1 ,yMargin + 20);
 402229c:	d0a00017 	ldw	r2,-32768(gp)
 40222a0:	10800744 	addi	r2,r2,29
 40222a4:	1007883a 	mov	r3,r2
 40222a8:	d0a00117 	ldw	r2,-32764(gp)
 40222ac:	10800504 	addi	r2,r2,20
 40222b0:	100f883a 	mov	r7,r2
 40222b4:	180d883a 	mov	r6,r3
 40222b8:	01400034 	movhi	r5,0
 40222bc:	29418404 	addi	r5,r5,1552
 40222c0:	e13fff17 	ldw	r4,-4(fp)
 40222c4:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}
	//Highlight question D
	else if (key == 0b1000) {
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin + 30 -1 ,yMargin + 20);
	}
}
 40222c8:	00003b06 	br	40223b8 <highlightAnswer+0x1c0>
		alt_up_char_buffer_string(char_buf_dev, " ", xMargin + 30 -1 ,yMargin + 10);
		alt_up_char_buffer_string(char_buf_dev, " ", xMargin-1 ,yMargin + 20);
		alt_up_char_buffer_string(char_buf_dev, " ", xMargin + 30 -1 ,yMargin + 20);
	}
	//Highlight question A
	else if (key == 0b0001) {
 40222cc:	e0bffe17 	ldw	r2,-8(fp)
 40222d0:	10800058 	cmpnei	r2,r2,1
 40222d4:	10000c1e 	bne	r2,zero,4022308 <highlightAnswer+0x110>
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin-1 ,yMargin + 10);
 40222d8:	d0a00017 	ldw	r2,-32768(gp)
 40222dc:	10bfffc4 	addi	r2,r2,-1
 40222e0:	1007883a 	mov	r3,r2
 40222e4:	d0a00117 	ldw	r2,-32764(gp)
 40222e8:	10800284 	addi	r2,r2,10
 40222ec:	100f883a 	mov	r7,r2
 40222f0:	180d883a 	mov	r6,r3
 40222f4:	01400034 	movhi	r5,0
 40222f8:	29418504 	addi	r5,r5,1556
 40222fc:	e13fff17 	ldw	r4,-4(fp)
 4022300:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}
	//Highlight question D
	else if (key == 0b1000) {
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin + 30 -1 ,yMargin + 20);
	}
}
 4022304:	00002c06 	br	40223b8 <highlightAnswer+0x1c0>
	//Highlight question A
	else if (key == 0b0001) {
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin-1 ,yMargin + 10);
	}
	//Highlight question B
	else if (key == 0b0010) {
 4022308:	e0bffe17 	ldw	r2,-8(fp)
 402230c:	10800098 	cmpnei	r2,r2,2
 4022310:	10000c1e 	bne	r2,zero,4022344 <highlightAnswer+0x14c>
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin + 30 -1 ,yMargin + 10);
 4022314:	d0a00017 	ldw	r2,-32768(gp)
 4022318:	10800744 	addi	r2,r2,29
 402231c:	1007883a 	mov	r3,r2
 4022320:	d0a00117 	ldw	r2,-32764(gp)
 4022324:	10800284 	addi	r2,r2,10
 4022328:	100f883a 	mov	r7,r2
 402232c:	180d883a 	mov	r6,r3
 4022330:	01400034 	movhi	r5,0
 4022334:	29418504 	addi	r5,r5,1556
 4022338:	e13fff17 	ldw	r4,-4(fp)
 402233c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}
	//Highlight question D
	else if (key == 0b1000) {
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin + 30 -1 ,yMargin + 20);
	}
}
 4022340:	00001d06 	br	40223b8 <highlightAnswer+0x1c0>
	//Highlight question B
	else if (key == 0b0010) {
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin + 30 -1 ,yMargin + 10);
	}
	//Highlight question C
	else if (key == 0b0100) {
 4022344:	e0bffe17 	ldw	r2,-8(fp)
 4022348:	10800118 	cmpnei	r2,r2,4
 402234c:	10000c1e 	bne	r2,zero,4022380 <highlightAnswer+0x188>
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin-1 ,yMargin + 20);
 4022350:	d0a00017 	ldw	r2,-32768(gp)
 4022354:	10bfffc4 	addi	r2,r2,-1
 4022358:	1007883a 	mov	r3,r2
 402235c:	d0a00117 	ldw	r2,-32764(gp)
 4022360:	10800504 	addi	r2,r2,20
 4022364:	100f883a 	mov	r7,r2
 4022368:	180d883a 	mov	r6,r3
 402236c:	01400034 	movhi	r5,0
 4022370:	29418504 	addi	r5,r5,1556
 4022374:	e13fff17 	ldw	r4,-4(fp)
 4022378:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}
	//Highlight question D
	else if (key == 0b1000) {
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin + 30 -1 ,yMargin + 20);
	}
}
 402237c:	00000e06 	br	40223b8 <highlightAnswer+0x1c0>
	//Highlight question C
	else if (key == 0b0100) {
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin-1 ,yMargin + 20);
	}
	//Highlight question D
	else if (key == 0b1000) {
 4022380:	e0bffe17 	ldw	r2,-8(fp)
 4022384:	10800218 	cmpnei	r2,r2,8
 4022388:	10000b1e 	bne	r2,zero,40223b8 <highlightAnswer+0x1c0>
		alt_up_char_buffer_string(char_buf_dev, "O", xMargin + 30 -1 ,yMargin + 20);
 402238c:	d0a00017 	ldw	r2,-32768(gp)
 4022390:	10800744 	addi	r2,r2,29
 4022394:	1007883a 	mov	r3,r2
 4022398:	d0a00117 	ldw	r2,-32764(gp)
 402239c:	10800504 	addi	r2,r2,20
 40223a0:	100f883a 	mov	r7,r2
 40223a4:	180d883a 	mov	r6,r3
 40223a8:	01400034 	movhi	r5,0
 40223ac:	29418504 	addi	r5,r5,1556
 40223b0:	e13fff17 	ldw	r4,-4(fp)
 40223b4:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}
}
 40223b8:	0001883a 	nop
 40223bc:	e037883a 	mov	sp,fp
 40223c0:	dfc00117 	ldw	ra,4(sp)
 40223c4:	df000017 	ldw	fp,0(sp)
 40223c8:	dec00204 	addi	sp,sp,8
 40223cc:	f800283a 	ret

040223d0 <highlighCorrecttAnswer>:

//Highlights the correct answer, and marks chosen answers as incorrect
void highlighCorrecttAnswer(int key, alt_up_char_buffer_dev *char_buf_dev) {
 40223d0:	defffb04 	addi	sp,sp,-20
 40223d4:	dfc00415 	stw	ra,16(sp)
 40223d8:	df000315 	stw	fp,12(sp)
 40223dc:	df000304 	addi	fp,sp,12
 40223e0:	e13ffe15 	stw	r4,-8(fp)
 40223e4:	e17fff15 	stw	r5,-4(fp)
	//Go through all answers
	for (int i = 0; i < 4; i++) {
 40223e8:	e03ffd15 	stw	zero,-12(fp)
 40223ec:	00004806 	br	4022510 <highlighCorrecttAnswer+0x140>
		//If correct one is found
		if (answers[i] == q.answerCorrect) {
 40223f0:	00800034 	movhi	r2,0
 40223f4:	1081b804 	addi	r2,r2,1760
 40223f8:	e0fffd17 	ldw	r3,-12(fp)
 40223fc:	18c7883a 	add	r3,r3,r3
 4022400:	18c7883a 	add	r3,r3,r3
 4022404:	10c5883a 	add	r2,r2,r3
 4022408:	10c00017 	ldw	r3,0(r2)
 402240c:	00800034 	movhi	r2,0
 4022410:	1082f304 	addi	r2,r2,3020
 4022414:	10800217 	ldw	r2,8(r2)
 4022418:	18803a1e 	bne	r3,r2,4022504 <highlighCorrecttAnswer+0x134>
			//If index is 0, highlight A
			if (i == 0) {
 402241c:	e0bffd17 	ldw	r2,-12(fp)
 4022420:	10000c1e 	bne	r2,zero,4022454 <highlighCorrecttAnswer+0x84>
				alt_up_char_buffer_string(char_buf_dev, "O", xMargin-1 ,yMargin + 10);
 4022424:	d0a00017 	ldw	r2,-32768(gp)
 4022428:	10bfffc4 	addi	r2,r2,-1
 402242c:	1007883a 	mov	r3,r2
 4022430:	d0a00117 	ldw	r2,-32764(gp)
 4022434:	10800284 	addi	r2,r2,10
 4022438:	100f883a 	mov	r7,r2
 402243c:	180d883a 	mov	r6,r3
 4022440:	01400034 	movhi	r5,0
 4022444:	29418504 	addi	r5,r5,1556
 4022448:	e13fff17 	ldw	r4,-4(fp)
 402244c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
 4022450:	00002c06 	br	4022504 <highlighCorrecttAnswer+0x134>
			}
			//If index is 1, highlight B
			else if (i == 1) {
 4022454:	e0bffd17 	ldw	r2,-12(fp)
 4022458:	10800058 	cmpnei	r2,r2,1
 402245c:	10000c1e 	bne	r2,zero,4022490 <highlighCorrecttAnswer+0xc0>
				alt_up_char_buffer_string(char_buf_dev, "O", xMargin + 30 -1 ,yMargin + 10);
 4022460:	d0a00017 	ldw	r2,-32768(gp)
 4022464:	10800744 	addi	r2,r2,29
 4022468:	1007883a 	mov	r3,r2
 402246c:	d0a00117 	ldw	r2,-32764(gp)
 4022470:	10800284 	addi	r2,r2,10
 4022474:	100f883a 	mov	r7,r2
 4022478:	180d883a 	mov	r6,r3
 402247c:	01400034 	movhi	r5,0
 4022480:	29418504 	addi	r5,r5,1556
 4022484:	e13fff17 	ldw	r4,-4(fp)
 4022488:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
 402248c:	00001d06 	br	4022504 <highlighCorrecttAnswer+0x134>
			}
			//If index is 2, highlight C
			else if (i == 2) {
 4022490:	e0bffd17 	ldw	r2,-12(fp)
 4022494:	10800098 	cmpnei	r2,r2,2
 4022498:	10000c1e 	bne	r2,zero,40224cc <highlighCorrecttAnswer+0xfc>
				alt_up_char_buffer_string(char_buf_dev, "O", xMargin-1 ,yMargin + 20);
 402249c:	d0a00017 	ldw	r2,-32768(gp)
 40224a0:	10bfffc4 	addi	r2,r2,-1
 40224a4:	1007883a 	mov	r3,r2
 40224a8:	d0a00117 	ldw	r2,-32764(gp)
 40224ac:	10800504 	addi	r2,r2,20
 40224b0:	100f883a 	mov	r7,r2
 40224b4:	180d883a 	mov	r6,r3
 40224b8:	01400034 	movhi	r5,0
 40224bc:	29418504 	addi	r5,r5,1556
 40224c0:	e13fff17 	ldw	r4,-4(fp)
 40224c4:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
 40224c8:	00000e06 	br	4022504 <highlighCorrecttAnswer+0x134>
			}
			//If index is 3, highlight D
			else if (i == 3) {
 40224cc:	e0bffd17 	ldw	r2,-12(fp)
 40224d0:	108000d8 	cmpnei	r2,r2,3
 40224d4:	10000b1e 	bne	r2,zero,4022504 <highlighCorrecttAnswer+0x134>
				alt_up_char_buffer_string(char_buf_dev, "O", xMargin + 30 -1 ,yMargin + 20);
 40224d8:	d0a00017 	ldw	r2,-32768(gp)
 40224dc:	10800744 	addi	r2,r2,29
 40224e0:	1007883a 	mov	r3,r2
 40224e4:	d0a00117 	ldw	r2,-32764(gp)
 40224e8:	10800504 	addi	r2,r2,20
 40224ec:	100f883a 	mov	r7,r2
 40224f0:	180d883a 	mov	r6,r3
 40224f4:	01400034 	movhi	r5,0
 40224f8:	29418504 	addi	r5,r5,1556
 40224fc:	e13fff17 	ldw	r4,-4(fp)
 4022500:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
}

//Highlights the correct answer, and marks chosen answers as incorrect
void highlighCorrecttAnswer(int key, alt_up_char_buffer_dev *char_buf_dev) {
	//Go through all answers
	for (int i = 0; i < 4; i++) {
 4022504:	e0bffd17 	ldw	r2,-12(fp)
 4022508:	10800044 	addi	r2,r2,1
 402250c:	e0bffd15 	stw	r2,-12(fp)
 4022510:	e0bffd17 	ldw	r2,-12(fp)
 4022514:	10800110 	cmplti	r2,r2,4
 4022518:	103fb51e 	bne	r2,zero,40223f0 <__flash_rwdata_start+0xffffca10>
			}
		}
	}

	//If chosen answer is A
	if (key == 0b0001) {
 402251c:	e0bffe17 	ldw	r2,-8(fp)
 4022520:	10800058 	cmpnei	r2,r2,1
 4022524:	10000c1e 	bne	r2,zero,4022558 <highlighCorrecttAnswer+0x188>
		alt_up_char_buffer_string(char_buf_dev, "X", xMargin-1 ,yMargin + 10);
 4022528:	d0a00017 	ldw	r2,-32768(gp)
 402252c:	10bfffc4 	addi	r2,r2,-1
 4022530:	1007883a 	mov	r3,r2
 4022534:	d0a00117 	ldw	r2,-32764(gp)
 4022538:	10800284 	addi	r2,r2,10
 402253c:	100f883a 	mov	r7,r2
 4022540:	180d883a 	mov	r6,r3
 4022544:	01400034 	movhi	r5,0
 4022548:	29418604 	addi	r5,r5,1560
 402254c:	e13fff17 	ldw	r4,-4(fp)
 4022550:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}
	//If chosen answer is D
	else if (key == 0b1000) {
		alt_up_char_buffer_string(char_buf_dev, "X", xMargin + 30 -1 ,yMargin + 20);
	}
}
 4022554:	00002c06 	br	4022608 <highlighCorrecttAnswer+0x238>
	//If chosen answer is A
	if (key == 0b0001) {
		alt_up_char_buffer_string(char_buf_dev, "X", xMargin-1 ,yMargin + 10);
	}
	//If chosen answer is B
	else if (key == 0b0010) {
 4022558:	e0bffe17 	ldw	r2,-8(fp)
 402255c:	10800098 	cmpnei	r2,r2,2
 4022560:	10000c1e 	bne	r2,zero,4022594 <highlighCorrecttAnswer+0x1c4>
		alt_up_char_buffer_string(char_buf_dev, "X", xMargin + 30 -1 ,yMargin + 10);
 4022564:	d0a00017 	ldw	r2,-32768(gp)
 4022568:	10800744 	addi	r2,r2,29
 402256c:	1007883a 	mov	r3,r2
 4022570:	d0a00117 	ldw	r2,-32764(gp)
 4022574:	10800284 	addi	r2,r2,10
 4022578:	100f883a 	mov	r7,r2
 402257c:	180d883a 	mov	r6,r3
 4022580:	01400034 	movhi	r5,0
 4022584:	29418604 	addi	r5,r5,1560
 4022588:	e13fff17 	ldw	r4,-4(fp)
 402258c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}
	//If chosen answer is D
	else if (key == 0b1000) {
		alt_up_char_buffer_string(char_buf_dev, "X", xMargin + 30 -1 ,yMargin + 20);
	}
}
 4022590:	00001d06 	br	4022608 <highlighCorrecttAnswer+0x238>
	//If chosen answer is B
	else if (key == 0b0010) {
		alt_up_char_buffer_string(char_buf_dev, "X", xMargin + 30 -1 ,yMargin + 10);
	}
	//If chosen answer is C
	else if (key == 0b0100) {
 4022594:	e0bffe17 	ldw	r2,-8(fp)
 4022598:	10800118 	cmpnei	r2,r2,4
 402259c:	10000c1e 	bne	r2,zero,40225d0 <highlighCorrecttAnswer+0x200>
		alt_up_char_buffer_string(char_buf_dev, "X", xMargin-1 ,yMargin + 20);
 40225a0:	d0a00017 	ldw	r2,-32768(gp)
 40225a4:	10bfffc4 	addi	r2,r2,-1
 40225a8:	1007883a 	mov	r3,r2
 40225ac:	d0a00117 	ldw	r2,-32764(gp)
 40225b0:	10800504 	addi	r2,r2,20
 40225b4:	100f883a 	mov	r7,r2
 40225b8:	180d883a 	mov	r6,r3
 40225bc:	01400034 	movhi	r5,0
 40225c0:	29418604 	addi	r5,r5,1560
 40225c4:	e13fff17 	ldw	r4,-4(fp)
 40225c8:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}
	//If chosen answer is D
	else if (key == 0b1000) {
		alt_up_char_buffer_string(char_buf_dev, "X", xMargin + 30 -1 ,yMargin + 20);
	}
}
 40225cc:	00000e06 	br	4022608 <highlighCorrecttAnswer+0x238>
	//If chosen answer is C
	else if (key == 0b0100) {
		alt_up_char_buffer_string(char_buf_dev, "X", xMargin-1 ,yMargin + 20);
	}
	//If chosen answer is D
	else if (key == 0b1000) {
 40225d0:	e0bffe17 	ldw	r2,-8(fp)
 40225d4:	10800218 	cmpnei	r2,r2,8
 40225d8:	10000b1e 	bne	r2,zero,4022608 <highlighCorrecttAnswer+0x238>
		alt_up_char_buffer_string(char_buf_dev, "X", xMargin + 30 -1 ,yMargin + 20);
 40225dc:	d0a00017 	ldw	r2,-32768(gp)
 40225e0:	10800744 	addi	r2,r2,29
 40225e4:	1007883a 	mov	r3,r2
 40225e8:	d0a00117 	ldw	r2,-32764(gp)
 40225ec:	10800504 	addi	r2,r2,20
 40225f0:	100f883a 	mov	r7,r2
 40225f4:	180d883a 	mov	r6,r3
 40225f8:	01400034 	movhi	r5,0
 40225fc:	29418604 	addi	r5,r5,1560
 4022600:	e13fff17 	ldw	r4,-4(fp)
 4022604:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}
}
 4022608:	0001883a 	nop
 402260c:	e037883a 	mov	sp,fp
 4022610:	dfc00117 	ldw	ra,4(sp)
 4022614:	df000017 	ldw	fp,0(sp)
 4022618:	dec00204 	addi	sp,sp,8
 402261c:	f800283a 	ret

04022620 <displayQuestion>:

//Displays the questions and answers
void displayQuestion(struct Question q, alt_up_char_buffer_dev *char_buf_dev, bool showAnswers ) {
 4022620:	defff904 	addi	sp,sp,-28
 4022624:	dfc00215 	stw	ra,8(sp)
 4022628:	df000115 	stw	fp,4(sp)
 402262c:	df000104 	addi	fp,sp,4
 4022630:	e1000215 	stw	r4,8(fp)
 4022634:	e1400315 	stw	r5,12(fp)
 4022638:	e1800415 	stw	r6,16(fp)
 402263c:	e1c00515 	stw	r7,20(fp)
 4022640:	e0800917 	ldw	r2,36(fp)
 4022644:	e0bfff05 	stb	r2,-4(fp)
	//Fill answers array with answers of current question
	answers[0] = q.answer1;
 4022648:	e0c00517 	ldw	r3,20(fp)
 402264c:	00800034 	movhi	r2,0
 4022650:	1081b804 	addi	r2,r2,1760
 4022654:	10c00015 	stw	r3,0(r2)
	answers[1] = q.answer2;
 4022658:	e0c00617 	ldw	r3,24(fp)
 402265c:	00800034 	movhi	r2,0
 4022660:	1081b804 	addi	r2,r2,1760
 4022664:	10c00115 	stw	r3,4(r2)
	answers[2] = q.answer3;
 4022668:	e0c00717 	ldw	r3,28(fp)
 402266c:	00800034 	movhi	r2,0
 4022670:	1081b804 	addi	r2,r2,1760
 4022674:	10c00215 	stw	r3,8(r2)
	answers[3] = q.answerCorrect;
 4022678:	e0c00417 	ldw	r3,16(fp)
 402267c:	00800034 	movhi	r2,0
 4022680:	1081b804 	addi	r2,r2,1760
 4022684:	10c00315 	stw	r3,12(r2)

	//Shuffle answers
	shuffleAnswers();
 4022688:	402145c0 	call	402145c <shuffleAnswers>

	printf("%s\n", q.question);
 402268c:	e0800217 	ldw	r2,8(fp)
 4022690:	1009883a 	mov	r4,r2
 4022694:	4022c380 	call	4022c38 <puts>

	//Clear buffer
	alt_up_char_buffer_clear(char_buf_dev);
 4022698:	e1000817 	ldw	r4,32(fp)
 402269c:	4023eac0 	call	4023eac <alt_up_char_buffer_clear>

	//If answers are supposed to be shown
	if (showAnswers) {
 40226a0:	e0bfff03 	ldbu	r2,-4(fp)
 40226a4:	10007a26 	beq	r2,zero,4022890 <displayQuestion+0x270>
		printf("A: %s\n", answers[0]);
 40226a8:	00800034 	movhi	r2,0
 40226ac:	1081b804 	addi	r2,r2,1760
 40226b0:	10800017 	ldw	r2,0(r2)
 40226b4:	100b883a 	mov	r5,r2
 40226b8:	01000034 	movhi	r4,0
 40226bc:	21018704 	addi	r4,r4,1564
 40226c0:	4022b6c0 	call	4022b6c <printf>
		printf("B: %s\n", answers[1]);
 40226c4:	00800034 	movhi	r2,0
 40226c8:	1081b804 	addi	r2,r2,1760
 40226cc:	10800117 	ldw	r2,4(r2)
 40226d0:	100b883a 	mov	r5,r2
 40226d4:	01000034 	movhi	r4,0
 40226d8:	21018904 	addi	r4,r4,1572
 40226dc:	4022b6c0 	call	4022b6c <printf>
		printf("C: %s\n", answers[2]);
 40226e0:	00800034 	movhi	r2,0
 40226e4:	1081b804 	addi	r2,r2,1760
 40226e8:	10800217 	ldw	r2,8(r2)
 40226ec:	100b883a 	mov	r5,r2
 40226f0:	01000034 	movhi	r4,0
 40226f4:	21018b04 	addi	r4,r4,1580
 40226f8:	4022b6c0 	call	4022b6c <printf>
		printf("D: %s\n", answers[3]);
 40226fc:	00800034 	movhi	r2,0
 4022700:	1081b804 	addi	r2,r2,1760
 4022704:	10800317 	ldw	r2,12(r2)
 4022708:	100b883a 	mov	r5,r2
 402270c:	01000034 	movhi	r4,0
 4022710:	21018d04 	addi	r4,r4,1588
 4022714:	4022b6c0 	call	4022b6c <printf>

		//Display answers
		alt_up_char_buffer_string(char_buf_dev, "A.", xMargin ,yMargin + 10);
 4022718:	d0a00017 	ldw	r2,-32768(gp)
 402271c:	1007883a 	mov	r3,r2
 4022720:	d0a00117 	ldw	r2,-32764(gp)
 4022724:	10800284 	addi	r2,r2,10
 4022728:	100f883a 	mov	r7,r2
 402272c:	180d883a 	mov	r6,r3
 4022730:	01400034 	movhi	r5,0
 4022734:	29418f04 	addi	r5,r5,1596
 4022738:	e1000817 	ldw	r4,32(fp)
 402273c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "B.", xMargin + 30, yMargin + 10);
 4022740:	d0a00017 	ldw	r2,-32768(gp)
 4022744:	10800784 	addi	r2,r2,30
 4022748:	1007883a 	mov	r3,r2
 402274c:	d0a00117 	ldw	r2,-32764(gp)
 4022750:	10800284 	addi	r2,r2,10
 4022754:	100f883a 	mov	r7,r2
 4022758:	180d883a 	mov	r6,r3
 402275c:	01400034 	movhi	r5,0
 4022760:	29419004 	addi	r5,r5,1600
 4022764:	e1000817 	ldw	r4,32(fp)
 4022768:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "C.", xMargin, yMargin + 20);
 402276c:	d0a00017 	ldw	r2,-32768(gp)
 4022770:	1007883a 	mov	r3,r2
 4022774:	d0a00117 	ldw	r2,-32764(gp)
 4022778:	10800504 	addi	r2,r2,20
 402277c:	100f883a 	mov	r7,r2
 4022780:	180d883a 	mov	r6,r3
 4022784:	01400034 	movhi	r5,0
 4022788:	29419104 	addi	r5,r5,1604
 402278c:	e1000817 	ldw	r4,32(fp)
 4022790:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, "D.", xMargin + 30, yMargin + 20);
 4022794:	d0a00017 	ldw	r2,-32768(gp)
 4022798:	10800784 	addi	r2,r2,30
 402279c:	1007883a 	mov	r3,r2
 40227a0:	d0a00117 	ldw	r2,-32764(gp)
 40227a4:	10800504 	addi	r2,r2,20
 40227a8:	100f883a 	mov	r7,r2
 40227ac:	180d883a 	mov	r6,r3
 40227b0:	01400034 	movhi	r5,0
 40227b4:	29419204 	addi	r5,r5,1608
 40227b8:	e1000817 	ldw	r4,32(fp)
 40227bc:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, answers[0], xMargin + 3, yMargin + 10);
 40227c0:	00800034 	movhi	r2,0
 40227c4:	1081b804 	addi	r2,r2,1760
 40227c8:	10c00017 	ldw	r3,0(r2)
 40227cc:	d0a00017 	ldw	r2,-32768(gp)
 40227d0:	108000c4 	addi	r2,r2,3
 40227d4:	1009883a 	mov	r4,r2
 40227d8:	d0a00117 	ldw	r2,-32764(gp)
 40227dc:	10800284 	addi	r2,r2,10
 40227e0:	100f883a 	mov	r7,r2
 40227e4:	200d883a 	mov	r6,r4
 40227e8:	180b883a 	mov	r5,r3
 40227ec:	e1000817 	ldw	r4,32(fp)
 40227f0:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, answers[1], xMargin + 33, yMargin + 10);
 40227f4:	00800034 	movhi	r2,0
 40227f8:	1081b804 	addi	r2,r2,1760
 40227fc:	10c00117 	ldw	r3,4(r2)
 4022800:	d0a00017 	ldw	r2,-32768(gp)
 4022804:	10800844 	addi	r2,r2,33
 4022808:	1009883a 	mov	r4,r2
 402280c:	d0a00117 	ldw	r2,-32764(gp)
 4022810:	10800284 	addi	r2,r2,10
 4022814:	100f883a 	mov	r7,r2
 4022818:	200d883a 	mov	r6,r4
 402281c:	180b883a 	mov	r5,r3
 4022820:	e1000817 	ldw	r4,32(fp)
 4022824:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, answers[2], xMargin + 3, yMargin + 20);
 4022828:	00800034 	movhi	r2,0
 402282c:	1081b804 	addi	r2,r2,1760
 4022830:	10c00217 	ldw	r3,8(r2)
 4022834:	d0a00017 	ldw	r2,-32768(gp)
 4022838:	108000c4 	addi	r2,r2,3
 402283c:	1009883a 	mov	r4,r2
 4022840:	d0a00117 	ldw	r2,-32764(gp)
 4022844:	10800504 	addi	r2,r2,20
 4022848:	100f883a 	mov	r7,r2
 402284c:	200d883a 	mov	r6,r4
 4022850:	180b883a 	mov	r5,r3
 4022854:	e1000817 	ldw	r4,32(fp)
 4022858:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buf_dev, answers[3], xMargin + 33, yMargin + 20);
 402285c:	00800034 	movhi	r2,0
 4022860:	1081b804 	addi	r2,r2,1760
 4022864:	10c00317 	ldw	r3,12(r2)
 4022868:	d0a00017 	ldw	r2,-32768(gp)
 402286c:	10800844 	addi	r2,r2,33
 4022870:	1009883a 	mov	r4,r2
 4022874:	d0a00117 	ldw	r2,-32764(gp)
 4022878:	10800504 	addi	r2,r2,20
 402287c:	100f883a 	mov	r7,r2
 4022880:	200d883a 	mov	r6,r4
 4022884:	180b883a 	mov	r5,r3
 4022888:	e1000817 	ldw	r4,32(fp)
 402288c:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
	}

	//Display question
	alt_up_char_buffer_string(char_buf_dev, q.question, xMargin - 2, yMargin);
 4022890:	e0c00217 	ldw	r3,8(fp)
 4022894:	d0a00017 	ldw	r2,-32768(gp)
 4022898:	10bfff84 	addi	r2,r2,-2
 402289c:	1009883a 	mov	r4,r2
 40228a0:	d0a00117 	ldw	r2,-32764(gp)
 40228a4:	100f883a 	mov	r7,r2
 40228a8:	200d883a 	mov	r6,r4
 40228ac:	180b883a 	mov	r5,r3
 40228b0:	e1000817 	ldw	r4,32(fp)
 40228b4:	4023db00 	call	4023db0 <alt_up_char_buffer_string>
}
 40228b8:	0001883a 	nop
 40228bc:	e037883a 	mov	sp,fp
 40228c0:	dfc00117 	ldw	ra,4(sp)
 40228c4:	df000017 	ldw	fp,0(sp)
 40228c8:	dec00604 	addi	sp,sp,24
 40228cc:	f800283a 	ret

040228d0 <key2index>:

//Returns an index of the answer array based on the key input
int key2index(int key) {
 40228d0:	defffd04 	addi	sp,sp,-12
 40228d4:	df000215 	stw	fp,8(sp)
 40228d8:	df000204 	addi	fp,sp,8
 40228dc:	e13fff15 	stw	r4,-4(fp)
	int index = -1;
 40228e0:	00bfffc4 	movi	r2,-1
 40228e4:	e0bffe15 	stw	r2,-8(fp)

	if (key == 0b0001)
 40228e8:	e0bfff17 	ldw	r2,-4(fp)
 40228ec:	10800058 	cmpnei	r2,r2,1
 40228f0:	1000021e 	bne	r2,zero,40228fc <key2index+0x2c>
		index = 0;
 40228f4:	e03ffe15 	stw	zero,-8(fp)
 40228f8:	00001106 	br	4022940 <key2index+0x70>
	else if (key == 0b0010)
 40228fc:	e0bfff17 	ldw	r2,-4(fp)
 4022900:	10800098 	cmpnei	r2,r2,2
 4022904:	1000031e 	bne	r2,zero,4022914 <key2index+0x44>
		index = 1;
 4022908:	00800044 	movi	r2,1
 402290c:	e0bffe15 	stw	r2,-8(fp)
 4022910:	00000b06 	br	4022940 <key2index+0x70>
	else if (key == 0b0100)
 4022914:	e0bfff17 	ldw	r2,-4(fp)
 4022918:	10800118 	cmpnei	r2,r2,4
 402291c:	1000031e 	bne	r2,zero,402292c <key2index+0x5c>
		index = 2;
 4022920:	00800084 	movi	r2,2
 4022924:	e0bffe15 	stw	r2,-8(fp)
 4022928:	00000506 	br	4022940 <key2index+0x70>
	else if (key == 0b1000)
 402292c:	e0bfff17 	ldw	r2,-4(fp)
 4022930:	10800218 	cmpnei	r2,r2,8
 4022934:	1000021e 	bne	r2,zero,4022940 <key2index+0x70>
		index = 3;
 4022938:	008000c4 	movi	r2,3
 402293c:	e0bffe15 	stw	r2,-8(fp)

	return index;
 4022940:	e0bffe17 	ldw	r2,-8(fp)
}
 4022944:	e037883a 	mov	sp,fp
 4022948:	df000017 	ldw	fp,0(sp)
 402294c:	dec00104 	addi	sp,sp,4
 4022950:	f800283a 	ret

04022954 <__divsi3>:
 4022954:	20001b16 	blt	r4,zero,40229c4 <__divsi3+0x70>
 4022958:	000f883a 	mov	r7,zero
 402295c:	28001616 	blt	r5,zero,40229b8 <__divsi3+0x64>
 4022960:	200d883a 	mov	r6,r4
 4022964:	29001a2e 	bgeu	r5,r4,40229d0 <__divsi3+0x7c>
 4022968:	00800804 	movi	r2,32
 402296c:	00c00044 	movi	r3,1
 4022970:	00000106 	br	4022978 <__divsi3+0x24>
 4022974:	10000d26 	beq	r2,zero,40229ac <__divsi3+0x58>
 4022978:	294b883a 	add	r5,r5,r5
 402297c:	10bfffc4 	addi	r2,r2,-1
 4022980:	18c7883a 	add	r3,r3,r3
 4022984:	293ffb36 	bltu	r5,r4,4022974 <__flash_rwdata_start+0xffffcf94>
 4022988:	0005883a 	mov	r2,zero
 402298c:	18000726 	beq	r3,zero,40229ac <__divsi3+0x58>
 4022990:	0005883a 	mov	r2,zero
 4022994:	31400236 	bltu	r6,r5,40229a0 <__divsi3+0x4c>
 4022998:	314dc83a 	sub	r6,r6,r5
 402299c:	10c4b03a 	or	r2,r2,r3
 40229a0:	1806d07a 	srli	r3,r3,1
 40229a4:	280ad07a 	srli	r5,r5,1
 40229a8:	183ffa1e 	bne	r3,zero,4022994 <__flash_rwdata_start+0xffffcfb4>
 40229ac:	38000126 	beq	r7,zero,40229b4 <__divsi3+0x60>
 40229b0:	0085c83a 	sub	r2,zero,r2
 40229b4:	f800283a 	ret
 40229b8:	014bc83a 	sub	r5,zero,r5
 40229bc:	39c0005c 	xori	r7,r7,1
 40229c0:	003fe706 	br	4022960 <__flash_rwdata_start+0xffffcf80>
 40229c4:	0109c83a 	sub	r4,zero,r4
 40229c8:	01c00044 	movi	r7,1
 40229cc:	003fe306 	br	402295c <__flash_rwdata_start+0xffffcf7c>
 40229d0:	00c00044 	movi	r3,1
 40229d4:	003fee06 	br	4022990 <__flash_rwdata_start+0xffffcfb0>

040229d8 <__modsi3>:
 40229d8:	20001716 	blt	r4,zero,4022a38 <__modsi3+0x60>
 40229dc:	000f883a 	mov	r7,zero
 40229e0:	2005883a 	mov	r2,r4
 40229e4:	28001216 	blt	r5,zero,4022a30 <__modsi3+0x58>
 40229e8:	2900162e 	bgeu	r5,r4,4022a44 <__modsi3+0x6c>
 40229ec:	01800804 	movi	r6,32
 40229f0:	00c00044 	movi	r3,1
 40229f4:	00000106 	br	40229fc <__modsi3+0x24>
 40229f8:	30000a26 	beq	r6,zero,4022a24 <__modsi3+0x4c>
 40229fc:	294b883a 	add	r5,r5,r5
 4022a00:	31bfffc4 	addi	r6,r6,-1
 4022a04:	18c7883a 	add	r3,r3,r3
 4022a08:	293ffb36 	bltu	r5,r4,40229f8 <__flash_rwdata_start+0xffffd018>
 4022a0c:	18000526 	beq	r3,zero,4022a24 <__modsi3+0x4c>
 4022a10:	1806d07a 	srli	r3,r3,1
 4022a14:	11400136 	bltu	r2,r5,4022a1c <__modsi3+0x44>
 4022a18:	1145c83a 	sub	r2,r2,r5
 4022a1c:	280ad07a 	srli	r5,r5,1
 4022a20:	183ffb1e 	bne	r3,zero,4022a10 <__flash_rwdata_start+0xffffd030>
 4022a24:	38000126 	beq	r7,zero,4022a2c <__modsi3+0x54>
 4022a28:	0085c83a 	sub	r2,zero,r2
 4022a2c:	f800283a 	ret
 4022a30:	014bc83a 	sub	r5,zero,r5
 4022a34:	003fec06 	br	40229e8 <__flash_rwdata_start+0xffffd008>
 4022a38:	0109c83a 	sub	r4,zero,r4
 4022a3c:	01c00044 	movi	r7,1
 4022a40:	003fe706 	br	40229e0 <__flash_rwdata_start+0xffffd000>
 4022a44:	00c00044 	movi	r3,1
 4022a48:	003ff106 	br	4022a10 <__flash_rwdata_start+0xffffd030>

04022a4c <__udivsi3>:
 4022a4c:	200d883a 	mov	r6,r4
 4022a50:	2900152e 	bgeu	r5,r4,4022aa8 <__udivsi3+0x5c>
 4022a54:	28001416 	blt	r5,zero,4022aa8 <__udivsi3+0x5c>
 4022a58:	00800804 	movi	r2,32
 4022a5c:	00c00044 	movi	r3,1
 4022a60:	00000206 	br	4022a6c <__udivsi3+0x20>
 4022a64:	10000e26 	beq	r2,zero,4022aa0 <__udivsi3+0x54>
 4022a68:	28000516 	blt	r5,zero,4022a80 <__udivsi3+0x34>
 4022a6c:	294b883a 	add	r5,r5,r5
 4022a70:	10bfffc4 	addi	r2,r2,-1
 4022a74:	18c7883a 	add	r3,r3,r3
 4022a78:	293ffa36 	bltu	r5,r4,4022a64 <__flash_rwdata_start+0xffffd084>
 4022a7c:	18000826 	beq	r3,zero,4022aa0 <__udivsi3+0x54>
 4022a80:	0005883a 	mov	r2,zero
 4022a84:	31400236 	bltu	r6,r5,4022a90 <__udivsi3+0x44>
 4022a88:	314dc83a 	sub	r6,r6,r5
 4022a8c:	10c4b03a 	or	r2,r2,r3
 4022a90:	1806d07a 	srli	r3,r3,1
 4022a94:	280ad07a 	srli	r5,r5,1
 4022a98:	183ffa1e 	bne	r3,zero,4022a84 <__flash_rwdata_start+0xffffd0a4>
 4022a9c:	f800283a 	ret
 4022aa0:	0005883a 	mov	r2,zero
 4022aa4:	f800283a 	ret
 4022aa8:	00c00044 	movi	r3,1
 4022aac:	003ff406 	br	4022a80 <__flash_rwdata_start+0xffffd0a0>

04022ab0 <__umodsi3>:
 4022ab0:	2005883a 	mov	r2,r4
 4022ab4:	2900122e 	bgeu	r5,r4,4022b00 <__umodsi3+0x50>
 4022ab8:	28001116 	blt	r5,zero,4022b00 <__umodsi3+0x50>
 4022abc:	01800804 	movi	r6,32
 4022ac0:	00c00044 	movi	r3,1
 4022ac4:	00000206 	br	4022ad0 <__umodsi3+0x20>
 4022ac8:	30000c26 	beq	r6,zero,4022afc <__umodsi3+0x4c>
 4022acc:	28000516 	blt	r5,zero,4022ae4 <__umodsi3+0x34>
 4022ad0:	294b883a 	add	r5,r5,r5
 4022ad4:	31bfffc4 	addi	r6,r6,-1
 4022ad8:	18c7883a 	add	r3,r3,r3
 4022adc:	293ffa36 	bltu	r5,r4,4022ac8 <__flash_rwdata_start+0xffffd0e8>
 4022ae0:	18000626 	beq	r3,zero,4022afc <__umodsi3+0x4c>
 4022ae4:	1806d07a 	srli	r3,r3,1
 4022ae8:	11400136 	bltu	r2,r5,4022af0 <__umodsi3+0x40>
 4022aec:	1145c83a 	sub	r2,r2,r5
 4022af0:	280ad07a 	srli	r5,r5,1
 4022af4:	183ffb1e 	bne	r3,zero,4022ae4 <__flash_rwdata_start+0xffffd104>
 4022af8:	f800283a 	ret
 4022afc:	f800283a 	ret
 4022b00:	00c00044 	movi	r3,1
 4022b04:	003ff706 	br	4022ae4 <__flash_rwdata_start+0xffffd104>

04022b08 <__mulsi3>:
 4022b08:	0005883a 	mov	r2,zero
 4022b0c:	20000726 	beq	r4,zero,4022b2c <__mulsi3+0x24>
 4022b10:	20c0004c 	andi	r3,r4,1
 4022b14:	2008d07a 	srli	r4,r4,1
 4022b18:	18000126 	beq	r3,zero,4022b20 <__mulsi3+0x18>
 4022b1c:	1145883a 	add	r2,r2,r5
 4022b20:	294b883a 	add	r5,r5,r5
 4022b24:	203ffa1e 	bne	r4,zero,4022b10 <__flash_rwdata_start+0xffffd130>
 4022b28:	f800283a 	ret
 4022b2c:	f800283a 	ret

04022b30 <_printf_r>:
 4022b30:	defffd04 	addi	sp,sp,-12
 4022b34:	dfc00015 	stw	ra,0(sp)
 4022b38:	d9800115 	stw	r6,4(sp)
 4022b3c:	d9c00215 	stw	r7,8(sp)
 4022b40:	20c00217 	ldw	r3,8(r4)
 4022b44:	018100b4 	movhi	r6,1026
 4022b48:	318ca404 	addi	r6,r6,12944
 4022b4c:	19800115 	stw	r6,4(r3)
 4022b50:	280d883a 	mov	r6,r5
 4022b54:	21400217 	ldw	r5,8(r4)
 4022b58:	d9c00104 	addi	r7,sp,4
 4022b5c:	4022d480 	call	4022d48 <___vfprintf_internal_r>
 4022b60:	dfc00017 	ldw	ra,0(sp)
 4022b64:	dec00304 	addi	sp,sp,12
 4022b68:	f800283a 	ret

04022b6c <printf>:
 4022b6c:	defffc04 	addi	sp,sp,-16
 4022b70:	dfc00015 	stw	ra,0(sp)
 4022b74:	d9400115 	stw	r5,4(sp)
 4022b78:	d9800215 	stw	r6,8(sp)
 4022b7c:	d9c00315 	stw	r7,12(sp)
 4022b80:	00800034 	movhi	r2,0
 4022b84:	10827f04 	addi	r2,r2,2556
 4022b88:	10800017 	ldw	r2,0(r2)
 4022b8c:	014100b4 	movhi	r5,1026
 4022b90:	294ca404 	addi	r5,r5,12944
 4022b94:	10c00217 	ldw	r3,8(r2)
 4022b98:	d9800104 	addi	r6,sp,4
 4022b9c:	19400115 	stw	r5,4(r3)
 4022ba0:	200b883a 	mov	r5,r4
 4022ba4:	11000217 	ldw	r4,8(r2)
 4022ba8:	40232740 	call	4023274 <__vfprintf_internal>
 4022bac:	dfc00017 	ldw	ra,0(sp)
 4022bb0:	dec00404 	addi	sp,sp,16
 4022bb4:	f800283a 	ret

04022bb8 <_puts_r>:
 4022bb8:	defffd04 	addi	sp,sp,-12
 4022bbc:	dc000015 	stw	r16,0(sp)
 4022bc0:	2021883a 	mov	r16,r4
 4022bc4:	2809883a 	mov	r4,r5
 4022bc8:	dfc00215 	stw	ra,8(sp)
 4022bcc:	dc400115 	stw	r17,4(sp)
 4022bd0:	2823883a 	mov	r17,r5
 4022bd4:	4022cc00 	call	4022cc0 <strlen>
 4022bd8:	81400217 	ldw	r5,8(r16)
 4022bdc:	010100b4 	movhi	r4,1026
 4022be0:	210ca404 	addi	r4,r4,12944
 4022be4:	29000115 	stw	r4,4(r5)
 4022be8:	100f883a 	mov	r7,r2
 4022bec:	880d883a 	mov	r6,r17
 4022bf0:	8009883a 	mov	r4,r16
 4022bf4:	40232900 	call	4023290 <__sfvwrite_small_dev>
 4022bf8:	00ffffc4 	movi	r3,-1
 4022bfc:	10c00926 	beq	r2,r3,4022c24 <_puts_r+0x6c>
 4022c00:	81400217 	ldw	r5,8(r16)
 4022c04:	01800034 	movhi	r6,0
 4022c08:	01c00044 	movi	r7,1
 4022c0c:	28800117 	ldw	r2,4(r5)
 4022c10:	31819304 	addi	r6,r6,1612
 4022c14:	8009883a 	mov	r4,r16
 4022c18:	103ee83a 	callr	r2
 4022c1c:	10bfffe0 	cmpeqi	r2,r2,-1
 4022c20:	0085c83a 	sub	r2,zero,r2
 4022c24:	dfc00217 	ldw	ra,8(sp)
 4022c28:	dc400117 	ldw	r17,4(sp)
 4022c2c:	dc000017 	ldw	r16,0(sp)
 4022c30:	dec00304 	addi	sp,sp,12
 4022c34:	f800283a 	ret

04022c38 <puts>:
 4022c38:	00800034 	movhi	r2,0
 4022c3c:	10827f04 	addi	r2,r2,2556
 4022c40:	200b883a 	mov	r5,r4
 4022c44:	11000017 	ldw	r4,0(r2)
 4022c48:	4022bb81 	jmpi	4022bb8 <_puts_r>

04022c4c <srand>:
 4022c4c:	00800034 	movhi	r2,0
 4022c50:	10828904 	addi	r2,r2,2596
 4022c54:	11000015 	stw	r4,0(r2)
 4022c58:	10000115 	stw	zero,4(r2)
 4022c5c:	f800283a 	ret

04022c60 <rand>:
 4022c60:	defffe04 	addi	sp,sp,-8
 4022c64:	dc000015 	stw	r16,0(sp)
 4022c68:	04000034 	movhi	r16,0
 4022c6c:	84028904 	addi	r16,r16,2596
 4022c70:	81000017 	ldw	r4,0(r16)
 4022c74:	81400117 	ldw	r5,4(r16)
 4022c78:	01932574 	movhi	r6,19605
 4022c7c:	01d614b4 	movhi	r7,22610
 4022c80:	319fcb44 	addi	r6,r6,32557
 4022c84:	39fd0b44 	addi	r7,r7,-3027
 4022c88:	dfc00115 	stw	ra,4(sp)
 4022c8c:	40233a00 	call	40233a0 <__muldi3>
 4022c90:	11000044 	addi	r4,r2,1
 4022c94:	2085803a 	cmpltu	r2,r4,r2
 4022c98:	10c7883a 	add	r3,r2,r3
 4022c9c:	00a00034 	movhi	r2,32768
 4022ca0:	10bfffc4 	addi	r2,r2,-1
 4022ca4:	1884703a 	and	r2,r3,r2
 4022ca8:	81000015 	stw	r4,0(r16)
 4022cac:	80c00115 	stw	r3,4(r16)
 4022cb0:	dfc00117 	ldw	ra,4(sp)
 4022cb4:	dc000017 	ldw	r16,0(sp)
 4022cb8:	dec00204 	addi	sp,sp,8
 4022cbc:	f800283a 	ret

04022cc0 <strlen>:
 4022cc0:	2005883a 	mov	r2,r4
 4022cc4:	10c00007 	ldb	r3,0(r2)
 4022cc8:	18000226 	beq	r3,zero,4022cd4 <strlen+0x14>
 4022ccc:	10800044 	addi	r2,r2,1
 4022cd0:	003ffc06 	br	4022cc4 <__flash_rwdata_start+0xffffd2e4>
 4022cd4:	1105c83a 	sub	r2,r2,r4
 4022cd8:	f800283a 	ret

04022cdc <print_repeat>:
 4022cdc:	defffb04 	addi	sp,sp,-20
 4022ce0:	dc800315 	stw	r18,12(sp)
 4022ce4:	dc400215 	stw	r17,8(sp)
 4022ce8:	dc000115 	stw	r16,4(sp)
 4022cec:	dfc00415 	stw	ra,16(sp)
 4022cf0:	2025883a 	mov	r18,r4
 4022cf4:	2823883a 	mov	r17,r5
 4022cf8:	d9800005 	stb	r6,0(sp)
 4022cfc:	3821883a 	mov	r16,r7
 4022d00:	04000a0e 	bge	zero,r16,4022d2c <print_repeat+0x50>
 4022d04:	88800117 	ldw	r2,4(r17)
 4022d08:	01c00044 	movi	r7,1
 4022d0c:	d80d883a 	mov	r6,sp
 4022d10:	880b883a 	mov	r5,r17
 4022d14:	9009883a 	mov	r4,r18
 4022d18:	103ee83a 	callr	r2
 4022d1c:	843fffc4 	addi	r16,r16,-1
 4022d20:	103ff726 	beq	r2,zero,4022d00 <__flash_rwdata_start+0xffffd320>
 4022d24:	00bfffc4 	movi	r2,-1
 4022d28:	00000106 	br	4022d30 <print_repeat+0x54>
 4022d2c:	0005883a 	mov	r2,zero
 4022d30:	dfc00417 	ldw	ra,16(sp)
 4022d34:	dc800317 	ldw	r18,12(sp)
 4022d38:	dc400217 	ldw	r17,8(sp)
 4022d3c:	dc000117 	ldw	r16,4(sp)
 4022d40:	dec00504 	addi	sp,sp,20
 4022d44:	f800283a 	ret

04022d48 <___vfprintf_internal_r>:
 4022d48:	deffe504 	addi	sp,sp,-108
 4022d4c:	d8c00804 	addi	r3,sp,32
 4022d50:	ddc01815 	stw	r23,96(sp)
 4022d54:	dd801715 	stw	r22,92(sp)
 4022d58:	dd401615 	stw	r21,88(sp)
 4022d5c:	dd001515 	stw	r20,84(sp)
 4022d60:	dcc01415 	stw	r19,80(sp)
 4022d64:	dc801315 	stw	r18,76(sp)
 4022d68:	dc401215 	stw	r17,72(sp)
 4022d6c:	dc001115 	stw	r16,68(sp)
 4022d70:	dfc01a15 	stw	ra,104(sp)
 4022d74:	df001915 	stw	fp,100(sp)
 4022d78:	2029883a 	mov	r20,r4
 4022d7c:	2823883a 	mov	r17,r5
 4022d80:	382d883a 	mov	r22,r7
 4022d84:	d9800f15 	stw	r6,60(sp)
 4022d88:	0021883a 	mov	r16,zero
 4022d8c:	d8000e15 	stw	zero,56(sp)
 4022d90:	d8000a15 	stw	zero,40(sp)
 4022d94:	002b883a 	mov	r21,zero
 4022d98:	0027883a 	mov	r19,zero
 4022d9c:	0025883a 	mov	r18,zero
 4022da0:	d8000c15 	stw	zero,48(sp)
 4022da4:	d8000b15 	stw	zero,44(sp)
 4022da8:	002f883a 	mov	r23,zero
 4022dac:	d8c00915 	stw	r3,36(sp)
 4022db0:	d8c00f17 	ldw	r3,60(sp)
 4022db4:	19000003 	ldbu	r4,0(r3)
 4022db8:	20803fcc 	andi	r2,r4,255
 4022dbc:	1080201c 	xori	r2,r2,128
 4022dc0:	10bfe004 	addi	r2,r2,-128
 4022dc4:	10011e26 	beq	r2,zero,4023240 <___vfprintf_internal_r+0x4f8>
 4022dc8:	00c00044 	movi	r3,1
 4022dcc:	b8c01426 	beq	r23,r3,4022e20 <___vfprintf_internal_r+0xd8>
 4022dd0:	1dc00216 	blt	r3,r23,4022ddc <___vfprintf_internal_r+0x94>
 4022dd4:	b8000626 	beq	r23,zero,4022df0 <___vfprintf_internal_r+0xa8>
 4022dd8:	00011506 	br	4023230 <___vfprintf_internal_r+0x4e8>
 4022ddc:	01400084 	movi	r5,2
 4022de0:	b9401d26 	beq	r23,r5,4022e58 <___vfprintf_internal_r+0x110>
 4022de4:	014000c4 	movi	r5,3
 4022de8:	b9402b26 	beq	r23,r5,4022e98 <___vfprintf_internal_r+0x150>
 4022dec:	00011006 	br	4023230 <___vfprintf_internal_r+0x4e8>
 4022df0:	01400944 	movi	r5,37
 4022df4:	1140fc26 	beq	r2,r5,40231e8 <___vfprintf_internal_r+0x4a0>
 4022df8:	88800117 	ldw	r2,4(r17)
 4022dfc:	d9000005 	stb	r4,0(sp)
 4022e00:	01c00044 	movi	r7,1
 4022e04:	d80d883a 	mov	r6,sp
 4022e08:	880b883a 	mov	r5,r17
 4022e0c:	a009883a 	mov	r4,r20
 4022e10:	103ee83a 	callr	r2
 4022e14:	1000d81e 	bne	r2,zero,4023178 <___vfprintf_internal_r+0x430>
 4022e18:	84000044 	addi	r16,r16,1
 4022e1c:	00010406 	br	4023230 <___vfprintf_internal_r+0x4e8>
 4022e20:	01400c04 	movi	r5,48
 4022e24:	1140fa26 	beq	r2,r5,4023210 <___vfprintf_internal_r+0x4c8>
 4022e28:	01400944 	movi	r5,37
 4022e2c:	11400a1e 	bne	r2,r5,4022e58 <___vfprintf_internal_r+0x110>
 4022e30:	d8800005 	stb	r2,0(sp)
 4022e34:	88800117 	ldw	r2,4(r17)
 4022e38:	b80f883a 	mov	r7,r23
 4022e3c:	d80d883a 	mov	r6,sp
 4022e40:	880b883a 	mov	r5,r17
 4022e44:	a009883a 	mov	r4,r20
 4022e48:	103ee83a 	callr	r2
 4022e4c:	1000ca1e 	bne	r2,zero,4023178 <___vfprintf_internal_r+0x430>
 4022e50:	84000044 	addi	r16,r16,1
 4022e54:	0000f506 	br	402322c <___vfprintf_internal_r+0x4e4>
 4022e58:	25fff404 	addi	r23,r4,-48
 4022e5c:	bdc03fcc 	andi	r23,r23,255
 4022e60:	00c00244 	movi	r3,9
 4022e64:	1dc00936 	bltu	r3,r23,4022e8c <___vfprintf_internal_r+0x144>
 4022e68:	00bfffc4 	movi	r2,-1
 4022e6c:	90800426 	beq	r18,r2,4022e80 <___vfprintf_internal_r+0x138>
 4022e70:	01400284 	movi	r5,10
 4022e74:	9009883a 	mov	r4,r18
 4022e78:	4022b080 	call	4022b08 <__mulsi3>
 4022e7c:	00000106 	br	4022e84 <___vfprintf_internal_r+0x13c>
 4022e80:	0005883a 	mov	r2,zero
 4022e84:	b8a5883a 	add	r18,r23,r2
 4022e88:	0000e206 	br	4023214 <___vfprintf_internal_r+0x4cc>
 4022e8c:	01400b84 	movi	r5,46
 4022e90:	1140e426 	beq	r2,r5,4023224 <___vfprintf_internal_r+0x4dc>
 4022e94:	05c00084 	movi	r23,2
 4022e98:	213ff404 	addi	r4,r4,-48
 4022e9c:	27003fcc 	andi	fp,r4,255
 4022ea0:	00c00244 	movi	r3,9
 4022ea4:	1f000936 	bltu	r3,fp,4022ecc <___vfprintf_internal_r+0x184>
 4022ea8:	00bfffc4 	movi	r2,-1
 4022eac:	98800426 	beq	r19,r2,4022ec0 <___vfprintf_internal_r+0x178>
 4022eb0:	01400284 	movi	r5,10
 4022eb4:	9809883a 	mov	r4,r19
 4022eb8:	4022b080 	call	4022b08 <__mulsi3>
 4022ebc:	00000106 	br	4022ec4 <___vfprintf_internal_r+0x17c>
 4022ec0:	0005883a 	mov	r2,zero
 4022ec4:	e0a7883a 	add	r19,fp,r2
 4022ec8:	0000d906 	br	4023230 <___vfprintf_internal_r+0x4e8>
 4022ecc:	00c01b04 	movi	r3,108
 4022ed0:	10c0d226 	beq	r2,r3,402321c <___vfprintf_internal_r+0x4d4>
 4022ed4:	013fffc4 	movi	r4,-1
 4022ed8:	99000226 	beq	r19,r4,4022ee4 <___vfprintf_internal_r+0x19c>
 4022edc:	d8000b15 	stw	zero,44(sp)
 4022ee0:	00000106 	br	4022ee8 <___vfprintf_internal_r+0x1a0>
 4022ee4:	04c00044 	movi	r19,1
 4022ee8:	01001a44 	movi	r4,105
 4022eec:	11001626 	beq	r2,r4,4022f48 <___vfprintf_internal_r+0x200>
 4022ef0:	20800916 	blt	r4,r2,4022f18 <___vfprintf_internal_r+0x1d0>
 4022ef4:	010018c4 	movi	r4,99
 4022ef8:	11008826 	beq	r2,r4,402311c <___vfprintf_internal_r+0x3d4>
 4022efc:	01001904 	movi	r4,100
 4022f00:	11001126 	beq	r2,r4,4022f48 <___vfprintf_internal_r+0x200>
 4022f04:	01001604 	movi	r4,88
 4022f08:	1100c81e 	bne	r2,r4,402322c <___vfprintf_internal_r+0x4e4>
 4022f0c:	00c00044 	movi	r3,1
 4022f10:	d8c00e15 	stw	r3,56(sp)
 4022f14:	00001506 	br	4022f6c <___vfprintf_internal_r+0x224>
 4022f18:	01001cc4 	movi	r4,115
 4022f1c:	11009826 	beq	r2,r4,4023180 <___vfprintf_internal_r+0x438>
 4022f20:	20800416 	blt	r4,r2,4022f34 <___vfprintf_internal_r+0x1ec>
 4022f24:	01001bc4 	movi	r4,111
 4022f28:	1100c01e 	bne	r2,r4,402322c <___vfprintf_internal_r+0x4e4>
 4022f2c:	05400204 	movi	r21,8
 4022f30:	00000f06 	br	4022f70 <___vfprintf_internal_r+0x228>
 4022f34:	01001d44 	movi	r4,117
 4022f38:	11000d26 	beq	r2,r4,4022f70 <___vfprintf_internal_r+0x228>
 4022f3c:	01001e04 	movi	r4,120
 4022f40:	11000a26 	beq	r2,r4,4022f6c <___vfprintf_internal_r+0x224>
 4022f44:	0000b906 	br	402322c <___vfprintf_internal_r+0x4e4>
 4022f48:	d8c00a17 	ldw	r3,40(sp)
 4022f4c:	b7000104 	addi	fp,r22,4
 4022f50:	18000726 	beq	r3,zero,4022f70 <___vfprintf_internal_r+0x228>
 4022f54:	df000d15 	stw	fp,52(sp)
 4022f58:	b5c00017 	ldw	r23,0(r22)
 4022f5c:	b800080e 	bge	r23,zero,4022f80 <___vfprintf_internal_r+0x238>
 4022f60:	05efc83a 	sub	r23,zero,r23
 4022f64:	02400044 	movi	r9,1
 4022f68:	00000606 	br	4022f84 <___vfprintf_internal_r+0x23c>
 4022f6c:	05400404 	movi	r21,16
 4022f70:	b0c00104 	addi	r3,r22,4
 4022f74:	d8c00d15 	stw	r3,52(sp)
 4022f78:	b5c00017 	ldw	r23,0(r22)
 4022f7c:	d8000a15 	stw	zero,40(sp)
 4022f80:	0013883a 	mov	r9,zero
 4022f84:	d839883a 	mov	fp,sp
 4022f88:	b8001726 	beq	r23,zero,4022fe8 <___vfprintf_internal_r+0x2a0>
 4022f8c:	a80b883a 	mov	r5,r21
 4022f90:	b809883a 	mov	r4,r23
 4022f94:	da401015 	stw	r9,64(sp)
 4022f98:	4022a4c0 	call	4022a4c <__udivsi3>
 4022f9c:	a80b883a 	mov	r5,r21
 4022fa0:	1009883a 	mov	r4,r2
 4022fa4:	102d883a 	mov	r22,r2
 4022fa8:	4022b080 	call	4022b08 <__mulsi3>
 4022fac:	b885c83a 	sub	r2,r23,r2
 4022fb0:	00c00244 	movi	r3,9
 4022fb4:	da401017 	ldw	r9,64(sp)
 4022fb8:	18800216 	blt	r3,r2,4022fc4 <___vfprintf_internal_r+0x27c>
 4022fbc:	10800c04 	addi	r2,r2,48
 4022fc0:	00000506 	br	4022fd8 <___vfprintf_internal_r+0x290>
 4022fc4:	d8c00e17 	ldw	r3,56(sp)
 4022fc8:	18000226 	beq	r3,zero,4022fd4 <___vfprintf_internal_r+0x28c>
 4022fcc:	10800dc4 	addi	r2,r2,55
 4022fd0:	00000106 	br	4022fd8 <___vfprintf_internal_r+0x290>
 4022fd4:	108015c4 	addi	r2,r2,87
 4022fd8:	e0800005 	stb	r2,0(fp)
 4022fdc:	b02f883a 	mov	r23,r22
 4022fe0:	e7000044 	addi	fp,fp,1
 4022fe4:	003fe806 	br	4022f88 <__flash_rwdata_start+0xffffd5a8>
 4022fe8:	e6efc83a 	sub	r23,fp,sp
 4022fec:	9dc5c83a 	sub	r2,r19,r23
 4022ff0:	0080090e 	bge	zero,r2,4023018 <___vfprintf_internal_r+0x2d0>
 4022ff4:	e085883a 	add	r2,fp,r2
 4022ff8:	01400c04 	movi	r5,48
 4022ffc:	d8c00917 	ldw	r3,36(sp)
 4023000:	e009883a 	mov	r4,fp
 4023004:	e0c0032e 	bgeu	fp,r3,4023014 <___vfprintf_internal_r+0x2cc>
 4023008:	e7000044 	addi	fp,fp,1
 402300c:	21400005 	stb	r5,0(r4)
 4023010:	e0bffa1e 	bne	fp,r2,4022ffc <__flash_rwdata_start+0xffffd61c>
 4023014:	e6efc83a 	sub	r23,fp,sp
 4023018:	d8c00b17 	ldw	r3,44(sp)
 402301c:	4dd1883a 	add	r8,r9,r23
 4023020:	922dc83a 	sub	r22,r18,r8
 4023024:	18001626 	beq	r3,zero,4023080 <___vfprintf_internal_r+0x338>
 4023028:	48000a26 	beq	r9,zero,4023054 <___vfprintf_internal_r+0x30c>
 402302c:	00800b44 	movi	r2,45
 4023030:	d8800805 	stb	r2,32(sp)
 4023034:	88800117 	ldw	r2,4(r17)
 4023038:	01c00044 	movi	r7,1
 402303c:	d9800804 	addi	r6,sp,32
 4023040:	880b883a 	mov	r5,r17
 4023044:	a009883a 	mov	r4,r20
 4023048:	103ee83a 	callr	r2
 402304c:	10004a1e 	bne	r2,zero,4023178 <___vfprintf_internal_r+0x430>
 4023050:	84000044 	addi	r16,r16,1
 4023054:	0580070e 	bge	zero,r22,4023074 <___vfprintf_internal_r+0x32c>
 4023058:	b00f883a 	mov	r7,r22
 402305c:	01800c04 	movi	r6,48
 4023060:	880b883a 	mov	r5,r17
 4023064:	a009883a 	mov	r4,r20
 4023068:	4022cdc0 	call	4022cdc <print_repeat>
 402306c:	1000421e 	bne	r2,zero,4023178 <___vfprintf_internal_r+0x430>
 4023070:	85a1883a 	add	r16,r16,r22
 4023074:	e02d883a 	mov	r22,fp
 4023078:	bf2fc83a 	sub	r23,r23,fp
 402307c:	00002006 	br	4023100 <___vfprintf_internal_r+0x3b8>
 4023080:	0580090e 	bge	zero,r22,40230a8 <___vfprintf_internal_r+0x360>
 4023084:	b00f883a 	mov	r7,r22
 4023088:	01800804 	movi	r6,32
 402308c:	880b883a 	mov	r5,r17
 4023090:	a009883a 	mov	r4,r20
 4023094:	da401015 	stw	r9,64(sp)
 4023098:	4022cdc0 	call	4022cdc <print_repeat>
 402309c:	da401017 	ldw	r9,64(sp)
 40230a0:	1000351e 	bne	r2,zero,4023178 <___vfprintf_internal_r+0x430>
 40230a4:	85a1883a 	add	r16,r16,r22
 40230a8:	483ff226 	beq	r9,zero,4023074 <__flash_rwdata_start+0xffffd694>
 40230ac:	00800b44 	movi	r2,45
 40230b0:	d8800805 	stb	r2,32(sp)
 40230b4:	88800117 	ldw	r2,4(r17)
 40230b8:	01c00044 	movi	r7,1
 40230bc:	d9800804 	addi	r6,sp,32
 40230c0:	880b883a 	mov	r5,r17
 40230c4:	a009883a 	mov	r4,r20
 40230c8:	103ee83a 	callr	r2
 40230cc:	10002a1e 	bne	r2,zero,4023178 <___vfprintf_internal_r+0x430>
 40230d0:	84000044 	addi	r16,r16,1
 40230d4:	003fe706 	br	4023074 <__flash_rwdata_start+0xffffd694>
 40230d8:	b5bfffc4 	addi	r22,r22,-1
 40230dc:	b0800003 	ldbu	r2,0(r22)
 40230e0:	01c00044 	movi	r7,1
 40230e4:	d9800804 	addi	r6,sp,32
 40230e8:	d8800805 	stb	r2,32(sp)
 40230ec:	88800117 	ldw	r2,4(r17)
 40230f0:	880b883a 	mov	r5,r17
 40230f4:	a009883a 	mov	r4,r20
 40230f8:	103ee83a 	callr	r2
 40230fc:	10001e1e 	bne	r2,zero,4023178 <___vfprintf_internal_r+0x430>
 4023100:	8585c83a 	sub	r2,r16,r22
 4023104:	b5c9883a 	add	r4,r22,r23
 4023108:	e085883a 	add	r2,fp,r2
 402310c:	013ff216 	blt	zero,r4,40230d8 <__flash_rwdata_start+0xffffd6f8>
 4023110:	1021883a 	mov	r16,r2
 4023114:	dd800d17 	ldw	r22,52(sp)
 4023118:	00004406 	br	402322c <___vfprintf_internal_r+0x4e4>
 402311c:	00800044 	movi	r2,1
 4023120:	1480080e 	bge	r2,r18,4023144 <___vfprintf_internal_r+0x3fc>
 4023124:	95ffffc4 	addi	r23,r18,-1
 4023128:	b80f883a 	mov	r7,r23
 402312c:	01800804 	movi	r6,32
 4023130:	880b883a 	mov	r5,r17
 4023134:	a009883a 	mov	r4,r20
 4023138:	4022cdc0 	call	4022cdc <print_repeat>
 402313c:	10000e1e 	bne	r2,zero,4023178 <___vfprintf_internal_r+0x430>
 4023140:	85e1883a 	add	r16,r16,r23
 4023144:	b0800017 	ldw	r2,0(r22)
 4023148:	01c00044 	movi	r7,1
 402314c:	d80d883a 	mov	r6,sp
 4023150:	d8800005 	stb	r2,0(sp)
 4023154:	88800117 	ldw	r2,4(r17)
 4023158:	880b883a 	mov	r5,r17
 402315c:	a009883a 	mov	r4,r20
 4023160:	b5c00104 	addi	r23,r22,4
 4023164:	103ee83a 	callr	r2
 4023168:	1000031e 	bne	r2,zero,4023178 <___vfprintf_internal_r+0x430>
 402316c:	84000044 	addi	r16,r16,1
 4023170:	b82d883a 	mov	r22,r23
 4023174:	00002d06 	br	402322c <___vfprintf_internal_r+0x4e4>
 4023178:	00bfffc4 	movi	r2,-1
 402317c:	00003106 	br	4023244 <___vfprintf_internal_r+0x4fc>
 4023180:	b5c00017 	ldw	r23,0(r22)
 4023184:	b7000104 	addi	fp,r22,4
 4023188:	b809883a 	mov	r4,r23
 402318c:	4022cc00 	call	4022cc0 <strlen>
 4023190:	9091c83a 	sub	r8,r18,r2
 4023194:	102d883a 	mov	r22,r2
 4023198:	0200090e 	bge	zero,r8,40231c0 <___vfprintf_internal_r+0x478>
 402319c:	400f883a 	mov	r7,r8
 40231a0:	01800804 	movi	r6,32
 40231a4:	880b883a 	mov	r5,r17
 40231a8:	a009883a 	mov	r4,r20
 40231ac:	da001015 	stw	r8,64(sp)
 40231b0:	4022cdc0 	call	4022cdc <print_repeat>
 40231b4:	da001017 	ldw	r8,64(sp)
 40231b8:	103fef1e 	bne	r2,zero,4023178 <__flash_rwdata_start+0xffffd798>
 40231bc:	8221883a 	add	r16,r16,r8
 40231c0:	88800117 	ldw	r2,4(r17)
 40231c4:	b00f883a 	mov	r7,r22
 40231c8:	b80d883a 	mov	r6,r23
 40231cc:	880b883a 	mov	r5,r17
 40231d0:	a009883a 	mov	r4,r20
 40231d4:	103ee83a 	callr	r2
 40231d8:	103fe71e 	bne	r2,zero,4023178 <__flash_rwdata_start+0xffffd798>
 40231dc:	85a1883a 	add	r16,r16,r22
 40231e0:	e02d883a 	mov	r22,fp
 40231e4:	00001106 	br	402322c <___vfprintf_internal_r+0x4e4>
 40231e8:	00c00044 	movi	r3,1
 40231ec:	04ffffc4 	movi	r19,-1
 40231f0:	d8000e15 	stw	zero,56(sp)
 40231f4:	d8c00a15 	stw	r3,40(sp)
 40231f8:	05400284 	movi	r21,10
 40231fc:	9825883a 	mov	r18,r19
 4023200:	d8000c15 	stw	zero,48(sp)
 4023204:	d8000b15 	stw	zero,44(sp)
 4023208:	182f883a 	mov	r23,r3
 402320c:	00000806 	br	4023230 <___vfprintf_internal_r+0x4e8>
 4023210:	ddc00b15 	stw	r23,44(sp)
 4023214:	05c00084 	movi	r23,2
 4023218:	00000506 	br	4023230 <___vfprintf_internal_r+0x4e8>
 402321c:	00c00044 	movi	r3,1
 4023220:	d8c00c15 	stw	r3,48(sp)
 4023224:	05c000c4 	movi	r23,3
 4023228:	00000106 	br	4023230 <___vfprintf_internal_r+0x4e8>
 402322c:	002f883a 	mov	r23,zero
 4023230:	d8c00f17 	ldw	r3,60(sp)
 4023234:	18c00044 	addi	r3,r3,1
 4023238:	d8c00f15 	stw	r3,60(sp)
 402323c:	003edc06 	br	4022db0 <__flash_rwdata_start+0xffffd3d0>
 4023240:	8005883a 	mov	r2,r16
 4023244:	dfc01a17 	ldw	ra,104(sp)
 4023248:	df001917 	ldw	fp,100(sp)
 402324c:	ddc01817 	ldw	r23,96(sp)
 4023250:	dd801717 	ldw	r22,92(sp)
 4023254:	dd401617 	ldw	r21,88(sp)
 4023258:	dd001517 	ldw	r20,84(sp)
 402325c:	dcc01417 	ldw	r19,80(sp)
 4023260:	dc801317 	ldw	r18,76(sp)
 4023264:	dc401217 	ldw	r17,72(sp)
 4023268:	dc001117 	ldw	r16,68(sp)
 402326c:	dec01b04 	addi	sp,sp,108
 4023270:	f800283a 	ret

04023274 <__vfprintf_internal>:
 4023274:	00800034 	movhi	r2,0
 4023278:	10827f04 	addi	r2,r2,2556
 402327c:	300f883a 	mov	r7,r6
 4023280:	280d883a 	mov	r6,r5
 4023284:	200b883a 	mov	r5,r4
 4023288:	11000017 	ldw	r4,0(r2)
 402328c:	4022d481 	jmpi	4022d48 <___vfprintf_internal_r>

04023290 <__sfvwrite_small_dev>:
 4023290:	2880000b 	ldhu	r2,0(r5)
 4023294:	1080020c 	andi	r2,r2,8
 4023298:	10002126 	beq	r2,zero,4023320 <__sfvwrite_small_dev+0x90>
 402329c:	2880008f 	ldh	r2,2(r5)
 40232a0:	defffa04 	addi	sp,sp,-24
 40232a4:	dc000015 	stw	r16,0(sp)
 40232a8:	dfc00515 	stw	ra,20(sp)
 40232ac:	dd000415 	stw	r20,16(sp)
 40232b0:	dcc00315 	stw	r19,12(sp)
 40232b4:	dc800215 	stw	r18,8(sp)
 40232b8:	dc400115 	stw	r17,4(sp)
 40232bc:	2821883a 	mov	r16,r5
 40232c0:	10001216 	blt	r2,zero,402330c <__sfvwrite_small_dev+0x7c>
 40232c4:	2027883a 	mov	r19,r4
 40232c8:	3025883a 	mov	r18,r6
 40232cc:	3823883a 	mov	r17,r7
 40232d0:	05010004 	movi	r20,1024
 40232d4:	04400b0e 	bge	zero,r17,4023304 <__sfvwrite_small_dev+0x74>
 40232d8:	880f883a 	mov	r7,r17
 40232dc:	a440010e 	bge	r20,r17,40232e4 <__sfvwrite_small_dev+0x54>
 40232e0:	01c10004 	movi	r7,1024
 40232e4:	8140008f 	ldh	r5,2(r16)
 40232e8:	900d883a 	mov	r6,r18
 40232ec:	9809883a 	mov	r4,r19
 40232f0:	40233480 	call	4023348 <_write_r>
 40232f4:	0080050e 	bge	zero,r2,402330c <__sfvwrite_small_dev+0x7c>
 40232f8:	88a3c83a 	sub	r17,r17,r2
 40232fc:	90a5883a 	add	r18,r18,r2
 4023300:	003ff406 	br	40232d4 <__flash_rwdata_start+0xffffd8f4>
 4023304:	0005883a 	mov	r2,zero
 4023308:	00000706 	br	4023328 <__sfvwrite_small_dev+0x98>
 402330c:	8080000b 	ldhu	r2,0(r16)
 4023310:	10801014 	ori	r2,r2,64
 4023314:	8080000d 	sth	r2,0(r16)
 4023318:	00bfffc4 	movi	r2,-1
 402331c:	00000206 	br	4023328 <__sfvwrite_small_dev+0x98>
 4023320:	00bfffc4 	movi	r2,-1
 4023324:	f800283a 	ret
 4023328:	dfc00517 	ldw	ra,20(sp)
 402332c:	dd000417 	ldw	r20,16(sp)
 4023330:	dcc00317 	ldw	r19,12(sp)
 4023334:	dc800217 	ldw	r18,8(sp)
 4023338:	dc400117 	ldw	r17,4(sp)
 402333c:	dc000017 	ldw	r16,0(sp)
 4023340:	dec00604 	addi	sp,sp,24
 4023344:	f800283a 	ret

04023348 <_write_r>:
 4023348:	defffd04 	addi	sp,sp,-12
 402334c:	dc000015 	stw	r16,0(sp)
 4023350:	04000034 	movhi	r16,0
 4023354:	dc400115 	stw	r17,4(sp)
 4023358:	84028b04 	addi	r16,r16,2604
 402335c:	2023883a 	mov	r17,r4
 4023360:	2809883a 	mov	r4,r5
 4023364:	300b883a 	mov	r5,r6
 4023368:	380d883a 	mov	r6,r7
 402336c:	dfc00215 	stw	ra,8(sp)
 4023370:	80000015 	stw	zero,0(r16)
 4023374:	40236800 	call	4023680 <write>
 4023378:	00ffffc4 	movi	r3,-1
 402337c:	10c0031e 	bne	r2,r3,402338c <_write_r+0x44>
 4023380:	80c00017 	ldw	r3,0(r16)
 4023384:	18000126 	beq	r3,zero,402338c <_write_r+0x44>
 4023388:	88c00015 	stw	r3,0(r17)
 402338c:	dfc00217 	ldw	ra,8(sp)
 4023390:	dc400117 	ldw	r17,4(sp)
 4023394:	dc000017 	ldw	r16,0(sp)
 4023398:	dec00304 	addi	sp,sp,12
 402339c:	f800283a 	ret

040233a0 <__muldi3>:
 40233a0:	defff604 	addi	sp,sp,-40
 40233a4:	dd800615 	stw	r22,24(sp)
 40233a8:	dd400515 	stw	r21,20(sp)
 40233ac:	dc400115 	stw	r17,4(sp)
 40233b0:	357fffcc 	andi	r21,r6,65535
 40233b4:	2022d43a 	srli	r17,r4,16
 40233b8:	25bfffcc 	andi	r22,r4,65535
 40233bc:	dcc00315 	stw	r19,12(sp)
 40233c0:	dc800215 	stw	r18,8(sp)
 40233c4:	2027883a 	mov	r19,r4
 40233c8:	2825883a 	mov	r18,r5
 40233cc:	b009883a 	mov	r4,r22
 40233d0:	a80b883a 	mov	r5,r21
 40233d4:	dfc00915 	stw	ra,36(sp)
 40233d8:	df000815 	stw	fp,32(sp)
 40233dc:	ddc00715 	stw	r23,28(sp)
 40233e0:	3839883a 	mov	fp,r7
 40233e4:	302ed43a 	srli	r23,r6,16
 40233e8:	dd000415 	stw	r20,16(sp)
 40233ec:	dc000015 	stw	r16,0(sp)
 40233f0:	3029883a 	mov	r20,r6
 40233f4:	4022b080 	call	4022b08 <__mulsi3>
 40233f8:	a80b883a 	mov	r5,r21
 40233fc:	8809883a 	mov	r4,r17
 4023400:	1021883a 	mov	r16,r2
 4023404:	4022b080 	call	4022b08 <__mulsi3>
 4023408:	8809883a 	mov	r4,r17
 402340c:	b80b883a 	mov	r5,r23
 4023410:	102b883a 	mov	r21,r2
 4023414:	4022b080 	call	4022b08 <__mulsi3>
 4023418:	b80b883a 	mov	r5,r23
 402341c:	b009883a 	mov	r4,r22
 4023420:	1023883a 	mov	r17,r2
 4023424:	4022b080 	call	4022b08 <__mulsi3>
 4023428:	8006d43a 	srli	r3,r16,16
 402342c:	1545883a 	add	r2,r2,r21
 4023430:	1885883a 	add	r2,r3,r2
 4023434:	1540022e 	bgeu	r2,r21,4023440 <__muldi3+0xa0>
 4023438:	00c00074 	movhi	r3,1
 402343c:	88e3883a 	add	r17,r17,r3
 4023440:	1006d43a 	srli	r3,r2,16
 4023444:	1004943a 	slli	r2,r2,16
 4023448:	e00b883a 	mov	r5,fp
 402344c:	9809883a 	mov	r4,r19
 4023450:	843fffcc 	andi	r16,r16,65535
 4023454:	1c63883a 	add	r17,r3,r17
 4023458:	1421883a 	add	r16,r2,r16
 402345c:	4022b080 	call	4022b08 <__mulsi3>
 4023460:	900b883a 	mov	r5,r18
 4023464:	a009883a 	mov	r4,r20
 4023468:	1027883a 	mov	r19,r2
 402346c:	4022b080 	call	4022b08 <__mulsi3>
 4023470:	9885883a 	add	r2,r19,r2
 4023474:	1447883a 	add	r3,r2,r17
 4023478:	8005883a 	mov	r2,r16
 402347c:	dfc00917 	ldw	ra,36(sp)
 4023480:	df000817 	ldw	fp,32(sp)
 4023484:	ddc00717 	ldw	r23,28(sp)
 4023488:	dd800617 	ldw	r22,24(sp)
 402348c:	dd400517 	ldw	r21,20(sp)
 4023490:	dd000417 	ldw	r20,16(sp)
 4023494:	dcc00317 	ldw	r19,12(sp)
 4023498:	dc800217 	ldw	r18,8(sp)
 402349c:	dc400117 	ldw	r17,4(sp)
 40234a0:	dc000017 	ldw	r16,0(sp)
 40234a4:	dec00a04 	addi	sp,sp,40
 40234a8:	f800283a 	ret

040234ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40234ac:	defffc04 	addi	sp,sp,-16
 40234b0:	df000315 	stw	fp,12(sp)
 40234b4:	df000304 	addi	fp,sp,12
 40234b8:	e13ffd15 	stw	r4,-12(fp)
 40234bc:	e17ffe15 	stw	r5,-8(fp)
 40234c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40234c4:	e0fffe17 	ldw	r3,-8(fp)
 40234c8:	e0bffd17 	ldw	r2,-12(fp)
 40234cc:	18800c26 	beq	r3,r2,4023500 <alt_load_section+0x54>
  {
    while( to != end )
 40234d0:	00000806 	br	40234f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 40234d4:	e0bffe17 	ldw	r2,-8(fp)
 40234d8:	10c00104 	addi	r3,r2,4
 40234dc:	e0fffe15 	stw	r3,-8(fp)
 40234e0:	e0fffd17 	ldw	r3,-12(fp)
 40234e4:	19000104 	addi	r4,r3,4
 40234e8:	e13ffd15 	stw	r4,-12(fp)
 40234ec:	18c00017 	ldw	r3,0(r3)
 40234f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40234f4:	e0fffe17 	ldw	r3,-8(fp)
 40234f8:	e0bfff17 	ldw	r2,-4(fp)
 40234fc:	18bff51e 	bne	r3,r2,40234d4 <__flash_rwdata_start+0xffffdaf4>
    {
      *to++ = *from++;
    }
  }
}
 4023500:	0001883a 	nop
 4023504:	e037883a 	mov	sp,fp
 4023508:	df000017 	ldw	fp,0(sp)
 402350c:	dec00104 	addi	sp,sp,4
 4023510:	f800283a 	ret

04023514 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4023514:	defffe04 	addi	sp,sp,-8
 4023518:	dfc00115 	stw	ra,4(sp)
 402351c:	df000015 	stw	fp,0(sp)
 4023520:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4023524:	01800034 	movhi	r6,0
 4023528:	31828904 	addi	r6,r6,2596
 402352c:	01400034 	movhi	r5,0
 4023530:	2941b804 	addi	r5,r5,1760
 4023534:	010100b4 	movhi	r4,1026
 4023538:	21167804 	addi	r4,r4,23008
 402353c:	40234ac0 	call	40234ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4023540:	018100b4 	movhi	r6,1026
 4023544:	31808c04 	addi	r6,r6,560
 4023548:	014100b4 	movhi	r5,1026
 402354c:	29400804 	addi	r5,r5,32
 4023550:	010100b4 	movhi	r4,1026
 4023554:	21000804 	addi	r4,r4,32
 4023558:	40234ac0 	call	40234ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 402355c:	01800034 	movhi	r6,0
 4023560:	3181b804 	addi	r6,r6,1760
 4023564:	01400034 	movhi	r5,0
 4023568:	29400004 	addi	r5,r5,0
 402356c:	010100b4 	movhi	r4,1026
 4023570:	2114c004 	addi	r4,r4,21248
 4023574:	40234ac0 	call	40234ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4023578:	40241740 	call	4024174 <alt_dcache_flush_all>
  alt_icache_flush_all();
 402357c:	40243f00 	call	40243f0 <alt_icache_flush_all>
}
 4023580:	0001883a 	nop
 4023584:	e037883a 	mov	sp,fp
 4023588:	dfc00117 	ldw	ra,4(sp)
 402358c:	df000017 	ldw	fp,0(sp)
 4023590:	dec00204 	addi	sp,sp,8
 4023594:	f800283a 	ret

04023598 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4023598:	defffd04 	addi	sp,sp,-12
 402359c:	dfc00215 	stw	ra,8(sp)
 40235a0:	df000115 	stw	fp,4(sp)
 40235a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40235a8:	0009883a 	mov	r4,zero
 40235ac:	40237b40 	call	40237b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40235b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40235b4:	40237ec0 	call	40237ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40235b8:	01800034 	movhi	r6,0
 40235bc:	31819404 	addi	r6,r6,1616
 40235c0:	01400034 	movhi	r5,0
 40235c4:	29419404 	addi	r5,r5,1616
 40235c8:	01000034 	movhi	r4,0
 40235cc:	21019404 	addi	r4,r4,1616
 40235d0:	40247940 	call	4024794 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40235d4:	40242a00 	call	40242a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40235d8:	010100b4 	movhi	r4,1026
 40235dc:	2110c004 	addi	r4,r4,17152
 40235e0:	4024f480 	call	4024f48 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40235e4:	d0a01117 	ldw	r2,-32700(gp)
 40235e8:	d0e01217 	ldw	r3,-32696(gp)
 40235ec:	d1201317 	ldw	r4,-32692(gp)
 40235f0:	200d883a 	mov	r6,r4
 40235f4:	180b883a 	mov	r5,r3
 40235f8:	1009883a 	mov	r4,r2
 40235fc:	40203540 	call	4020354 <main>
 4023600:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4023604:	01000044 	movi	r4,1
 4023608:	402409c0 	call	402409c <close>
  exit (result);
 402360c:	e13fff17 	ldw	r4,-4(fp)
 4023610:	4024f5c0 	call	4024f5c <exit>

04023614 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4023614:	defffd04 	addi	sp,sp,-12
 4023618:	dfc00215 	stw	ra,8(sp)
 402361c:	df000115 	stw	fp,4(sp)
 4023620:	df000104 	addi	fp,sp,4
 4023624:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4023628:	e13fff17 	ldw	r4,-4(fp)
 402362c:	4023f080 	call	4023f08 <alt_busy_sleep>
}
 4023630:	e037883a 	mov	sp,fp
 4023634:	dfc00117 	ldw	ra,4(sp)
 4023638:	df000017 	ldw	fp,0(sp)
 402363c:	dec00204 	addi	sp,sp,8
 4023640:	f800283a 	ret

04023644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4023644:	defffe04 	addi	sp,sp,-8
 4023648:	dfc00115 	stw	ra,4(sp)
 402364c:	df000015 	stw	fp,0(sp)
 4023650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4023654:	d0a00a17 	ldw	r2,-32728(gp)
 4023658:	10000326 	beq	r2,zero,4023668 <alt_get_errno+0x24>
 402365c:	d0a00a17 	ldw	r2,-32728(gp)
 4023660:	103ee83a 	callr	r2
 4023664:	00000106 	br	402366c <alt_get_errno+0x28>
 4023668:	d0a01004 	addi	r2,gp,-32704
}
 402366c:	e037883a 	mov	sp,fp
 4023670:	dfc00117 	ldw	ra,4(sp)
 4023674:	df000017 	ldw	fp,0(sp)
 4023678:	dec00204 	addi	sp,sp,8
 402367c:	f800283a 	ret

04023680 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4023680:	defff904 	addi	sp,sp,-28
 4023684:	dfc00615 	stw	ra,24(sp)
 4023688:	df000515 	stw	fp,20(sp)
 402368c:	df000504 	addi	fp,sp,20
 4023690:	e13ffd15 	stw	r4,-12(fp)
 4023694:	e17ffe15 	stw	r5,-8(fp)
 4023698:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402369c:	e0bffd17 	ldw	r2,-12(fp)
 40236a0:	10000816 	blt	r2,zero,40236c4 <write+0x44>
 40236a4:	01400304 	movi	r5,12
 40236a8:	e13ffd17 	ldw	r4,-12(fp)
 40236ac:	4022b080 	call	4022b08 <__mulsi3>
 40236b0:	1007883a 	mov	r3,r2
 40236b4:	00800034 	movhi	r2,0
 40236b8:	10821b04 	addi	r2,r2,2156
 40236bc:	1885883a 	add	r2,r3,r2
 40236c0:	00000106 	br	40236c8 <write+0x48>
 40236c4:	0005883a 	mov	r2,zero
 40236c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40236cc:	e0bffb17 	ldw	r2,-20(fp)
 40236d0:	10002126 	beq	r2,zero,4023758 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40236d4:	e0bffb17 	ldw	r2,-20(fp)
 40236d8:	10800217 	ldw	r2,8(r2)
 40236dc:	108000cc 	andi	r2,r2,3
 40236e0:	10001826 	beq	r2,zero,4023744 <write+0xc4>
 40236e4:	e0bffb17 	ldw	r2,-20(fp)
 40236e8:	10800017 	ldw	r2,0(r2)
 40236ec:	10800617 	ldw	r2,24(r2)
 40236f0:	10001426 	beq	r2,zero,4023744 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 40236f4:	e0bffb17 	ldw	r2,-20(fp)
 40236f8:	10800017 	ldw	r2,0(r2)
 40236fc:	10800617 	ldw	r2,24(r2)
 4023700:	e0ffff17 	ldw	r3,-4(fp)
 4023704:	180d883a 	mov	r6,r3
 4023708:	e17ffe17 	ldw	r5,-8(fp)
 402370c:	e13ffb17 	ldw	r4,-20(fp)
 4023710:	103ee83a 	callr	r2
 4023714:	e0bffc15 	stw	r2,-16(fp)
 4023718:	e0bffc17 	ldw	r2,-16(fp)
 402371c:	1000070e 	bge	r2,zero,402373c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4023720:	40236440 	call	4023644 <alt_get_errno>
 4023724:	1007883a 	mov	r3,r2
 4023728:	e0bffc17 	ldw	r2,-16(fp)
 402372c:	0085c83a 	sub	r2,zero,r2
 4023730:	18800015 	stw	r2,0(r3)
        return -1;
 4023734:	00bfffc4 	movi	r2,-1
 4023738:	00000c06 	br	402376c <write+0xec>
      }
      return rval;
 402373c:	e0bffc17 	ldw	r2,-16(fp)
 4023740:	00000a06 	br	402376c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4023744:	40236440 	call	4023644 <alt_get_errno>
 4023748:	1007883a 	mov	r3,r2
 402374c:	00800344 	movi	r2,13
 4023750:	18800015 	stw	r2,0(r3)
 4023754:	00000406 	br	4023768 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4023758:	40236440 	call	4023644 <alt_get_errno>
 402375c:	1007883a 	mov	r3,r2
 4023760:	00801444 	movi	r2,81
 4023764:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4023768:	00bfffc4 	movi	r2,-1
}
 402376c:	e037883a 	mov	sp,fp
 4023770:	dfc00117 	ldw	ra,4(sp)
 4023774:	df000017 	ldw	fp,0(sp)
 4023778:	dec00204 	addi	sp,sp,8
 402377c:	f800283a 	ret

04023780 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4023780:	defffd04 	addi	sp,sp,-12
 4023784:	dfc00215 	stw	ra,8(sp)
 4023788:	df000115 	stw	fp,4(sp)
 402378c:	df000104 	addi	fp,sp,4
 4023790:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4023794:	d1600704 	addi	r5,gp,-32740
 4023798:	e13fff17 	ldw	r4,-4(fp)
 402379c:	40241fc0 	call	40241fc <alt_dev_llist_insert>
}
 40237a0:	e037883a 	mov	sp,fp
 40237a4:	dfc00117 	ldw	ra,4(sp)
 40237a8:	df000017 	ldw	fp,0(sp)
 40237ac:	dec00204 	addi	sp,sp,8
 40237b0:	f800283a 	ret

040237b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40237b4:	defffd04 	addi	sp,sp,-12
 40237b8:	dfc00215 	stw	ra,8(sp)
 40237bc:	df000115 	stw	fp,4(sp)
 40237c0:	df000104 	addi	fp,sp,4
 40237c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 40237c8:	4024cbc0 	call	4024cbc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40237cc:	00800044 	movi	r2,1
 40237d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40237d4:	0001883a 	nop
 40237d8:	e037883a 	mov	sp,fp
 40237dc:	dfc00117 	ldw	ra,4(sp)
 40237e0:	df000017 	ldw	fp,0(sp)
 40237e4:	dec00204 	addi	sp,sp,8
 40237e8:	f800283a 	ret

040237ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40237ec:	defffe04 	addi	sp,sp,-8
 40237f0:	dfc00115 	stw	ra,4(sp)
 40237f4:	df000015 	stw	fp,0(sp)
 40237f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 40237fc:	01c0fa04 	movi	r7,1000
 4023800:	01800044 	movi	r6,1
 4023804:	000b883a 	mov	r5,zero
 4023808:	01010134 	movhi	r4,1028
 402380c:	210c0004 	addi	r4,r4,12288
 4023810:	4023bac0 	call	4023bac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4023814:	01000034 	movhi	r4,0
 4023818:	2101f404 	addi	r4,r4,2000
 402381c:	40237800 	call	4023780 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4023820:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 4023824:	00800034 	movhi	r2,0
 4023828:	1081ff04 	addi	r2,r2,2044
 402382c:	10800a17 	ldw	r2,40(r2)
 4023830:	10800104 	addi	r2,r2,4
 4023834:	10800017 	ldw	r2,0(r2)
 4023838:	10ffffcc 	andi	r3,r2,65535
 402383c:	00800034 	movhi	r2,0
 4023840:	1081ff04 	addi	r2,r2,2044
 4023844:	10c00c15 	stw	r3,48(r2)
 4023848:	00800034 	movhi	r2,0
 402384c:	1081ff04 	addi	r2,r2,2044
 4023850:	10800a17 	ldw	r2,40(r2)
 4023854:	10800104 	addi	r2,r2,4
 4023858:	10800017 	ldw	r2,0(r2)
 402385c:	1006d43a 	srli	r3,r2,16
 4023860:	00800034 	movhi	r2,0
 4023864:	1081ff04 	addi	r2,r2,2044
 4023868:	10c00d15 	stw	r3,52(r2)
 402386c:	00800034 	movhi	r2,0
 4023870:	1081ff04 	addi	r2,r2,2044
 4023874:	10800c17 	ldw	r2,48(r2)
 4023878:	10801068 	cmpgeui	r2,r2,65
 402387c:	1000081e 	bne	r2,zero,40238a0 <alt_sys_init+0xb4>
 4023880:	00800034 	movhi	r2,0
 4023884:	1081ff04 	addi	r2,r2,2044
 4023888:	00c00fc4 	movi	r3,63
 402388c:	10c00f15 	stw	r3,60(r2)
 4023890:	00800034 	movhi	r2,0
 4023894:	1081ff04 	addi	r2,r2,2044
 4023898:	00c00184 	movi	r3,6
 402389c:	10c01015 	stw	r3,64(r2)
 40238a0:	00800034 	movhi	r2,0
 40238a4:	1081ff04 	addi	r2,r2,2044
 40238a8:	10800d17 	ldw	r2,52(r2)
 40238ac:	10800868 	cmpgeui	r2,r2,33
 40238b0:	1000041e 	bne	r2,zero,40238c4 <alt_sys_init+0xd8>
 40238b4:	00800034 	movhi	r2,0
 40238b8:	1081ff04 	addi	r2,r2,2044
 40238bc:	00c007c4 	movi	r3,31
 40238c0:	10c01115 	stw	r3,68(r2)
 40238c4:	01000034 	movhi	r4,0
 40238c8:	2101ff04 	addi	r4,r4,2044
 40238cc:	4023c280 	call	4023c28 <alt_up_char_buffer_init>
 40238d0:	01000034 	movhi	r4,0
 40238d4:	2101ff04 	addi	r4,r4,2044
 40238d8:	40237800 	call	4023780 <alt_dev_reg>
}
 40238dc:	0001883a 	nop
 40238e0:	e037883a 	mov	sp,fp
 40238e4:	dfc00117 	ldw	ra,4(sp)
 40238e8:	df000017 	ldw	fp,0(sp)
 40238ec:	dec00204 	addi	sp,sp,8
 40238f0:	f800283a 	ret

040238f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40238f4:	defffa04 	addi	sp,sp,-24
 40238f8:	dfc00515 	stw	ra,20(sp)
 40238fc:	df000415 	stw	fp,16(sp)
 4023900:	df000404 	addi	fp,sp,16
 4023904:	e13ffd15 	stw	r4,-12(fp)
 4023908:	e17ffe15 	stw	r5,-8(fp)
 402390c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4023910:	e0bffd17 	ldw	r2,-12(fp)
 4023914:	10800017 	ldw	r2,0(r2)
 4023918:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 402391c:	e0bffc17 	ldw	r2,-16(fp)
 4023920:	10c00a04 	addi	r3,r2,40
 4023924:	e0bffd17 	ldw	r2,-12(fp)
 4023928:	10800217 	ldw	r2,8(r2)
 402392c:	100f883a 	mov	r7,r2
 4023930:	e1bfff17 	ldw	r6,-4(fp)
 4023934:	e17ffe17 	ldw	r5,-8(fp)
 4023938:	1809883a 	mov	r4,r3
 402393c:	40239b40 	call	40239b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4023940:	e037883a 	mov	sp,fp
 4023944:	dfc00117 	ldw	ra,4(sp)
 4023948:	df000017 	ldw	fp,0(sp)
 402394c:	dec00204 	addi	sp,sp,8
 4023950:	f800283a 	ret

04023954 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4023954:	defffa04 	addi	sp,sp,-24
 4023958:	dfc00515 	stw	ra,20(sp)
 402395c:	df000415 	stw	fp,16(sp)
 4023960:	df000404 	addi	fp,sp,16
 4023964:	e13ffd15 	stw	r4,-12(fp)
 4023968:	e17ffe15 	stw	r5,-8(fp)
 402396c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4023970:	e0bffd17 	ldw	r2,-12(fp)
 4023974:	10800017 	ldw	r2,0(r2)
 4023978:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 402397c:	e0bffc17 	ldw	r2,-16(fp)
 4023980:	10c00a04 	addi	r3,r2,40
 4023984:	e0bffd17 	ldw	r2,-12(fp)
 4023988:	10800217 	ldw	r2,8(r2)
 402398c:	100f883a 	mov	r7,r2
 4023990:	e1bfff17 	ldw	r6,-4(fp)
 4023994:	e17ffe17 	ldw	r5,-8(fp)
 4023998:	1809883a 	mov	r4,r3
 402399c:	4023aa00 	call	4023aa0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40239a0:	e037883a 	mov	sp,fp
 40239a4:	dfc00117 	ldw	ra,4(sp)
 40239a8:	df000017 	ldw	fp,0(sp)
 40239ac:	dec00204 	addi	sp,sp,8
 40239b0:	f800283a 	ret

040239b4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 40239b4:	defff704 	addi	sp,sp,-36
 40239b8:	df000815 	stw	fp,32(sp)
 40239bc:	df000804 	addi	fp,sp,32
 40239c0:	e13ffc15 	stw	r4,-16(fp)
 40239c4:	e17ffd15 	stw	r5,-12(fp)
 40239c8:	e1bffe15 	stw	r6,-8(fp)
 40239cc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 40239d0:	e0bffc17 	ldw	r2,-16(fp)
 40239d4:	10800017 	ldw	r2,0(r2)
 40239d8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 40239dc:	e0bffd17 	ldw	r2,-12(fp)
 40239e0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 40239e4:	e0bffe17 	ldw	r2,-8(fp)
 40239e8:	e0fffd17 	ldw	r3,-12(fp)
 40239ec:	1885883a 	add	r2,r3,r2
 40239f0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 40239f4:	00001206 	br	4023a40 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40239f8:	e0bff917 	ldw	r2,-28(fp)
 40239fc:	10800037 	ldwio	r2,0(r2)
 4023a00:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4023a04:	e0bffb17 	ldw	r2,-20(fp)
 4023a08:	10a0000c 	andi	r2,r2,32768
 4023a0c:	10000626 	beq	r2,zero,4023a28 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4023a10:	e0bff817 	ldw	r2,-32(fp)
 4023a14:	10c00044 	addi	r3,r2,1
 4023a18:	e0fff815 	stw	r3,-32(fp)
 4023a1c:	e0fffb17 	ldw	r3,-20(fp)
 4023a20:	10c00005 	stb	r3,0(r2)
 4023a24:	00000606 	br	4023a40 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 4023a28:	e0fff817 	ldw	r3,-32(fp)
 4023a2c:	e0bffd17 	ldw	r2,-12(fp)
 4023a30:	1880071e 	bne	r3,r2,4023a50 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 4023a34:	e0bfff17 	ldw	r2,-4(fp)
 4023a38:	1090000c 	andi	r2,r2,16384
 4023a3c:	1000061e 	bne	r2,zero,4023a58 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4023a40:	e0fff817 	ldw	r3,-32(fp)
 4023a44:	e0bffa17 	ldw	r2,-24(fp)
 4023a48:	18bfeb36 	bltu	r3,r2,40239f8 <__flash_rwdata_start+0xffffe018>
 4023a4c:	00000306 	br	4023a5c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 4023a50:	0001883a 	nop
 4023a54:	00000106 	br	4023a5c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 4023a58:	0001883a 	nop
    
  }

  if (ptr != buffer)
 4023a5c:	e0fff817 	ldw	r3,-32(fp)
 4023a60:	e0bffd17 	ldw	r2,-12(fp)
 4023a64:	18800426 	beq	r3,r2,4023a78 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 4023a68:	e0fff817 	ldw	r3,-32(fp)
 4023a6c:	e0bffd17 	ldw	r2,-12(fp)
 4023a70:	1885c83a 	sub	r2,r3,r2
 4023a74:	00000606 	br	4023a90 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 4023a78:	e0bfff17 	ldw	r2,-4(fp)
 4023a7c:	1090000c 	andi	r2,r2,16384
 4023a80:	10000226 	beq	r2,zero,4023a8c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 4023a84:	00bffd44 	movi	r2,-11
 4023a88:	00000106 	br	4023a90 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 4023a8c:	00bffec4 	movi	r2,-5
}
 4023a90:	e037883a 	mov	sp,fp
 4023a94:	df000017 	ldw	fp,0(sp)
 4023a98:	dec00104 	addi	sp,sp,4
 4023a9c:	f800283a 	ret

04023aa0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4023aa0:	defff904 	addi	sp,sp,-28
 4023aa4:	df000615 	stw	fp,24(sp)
 4023aa8:	df000604 	addi	fp,sp,24
 4023aac:	e13ffc15 	stw	r4,-16(fp)
 4023ab0:	e17ffd15 	stw	r5,-12(fp)
 4023ab4:	e1bffe15 	stw	r6,-8(fp)
 4023ab8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4023abc:	e0bffc17 	ldw	r2,-16(fp)
 4023ac0:	10800017 	ldw	r2,0(r2)
 4023ac4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 4023ac8:	e0bffe17 	ldw	r2,-8(fp)
 4023acc:	e0fffd17 	ldw	r3,-12(fp)
 4023ad0:	1885883a 	add	r2,r3,r2
 4023ad4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 4023ad8:	00000e06 	br	4023b14 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4023adc:	e0bffa17 	ldw	r2,-24(fp)
 4023ae0:	10800104 	addi	r2,r2,4
 4023ae4:	10800037 	ldwio	r2,0(r2)
 4023ae8:	10bfffec 	andhi	r2,r2,65535
 4023aec:	10000926 	beq	r2,zero,4023b14 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4023af0:	e0fffa17 	ldw	r3,-24(fp)
 4023af4:	e0bffd17 	ldw	r2,-12(fp)
 4023af8:	11000044 	addi	r4,r2,1
 4023afc:	e13ffd15 	stw	r4,-12(fp)
 4023b00:	10800003 	ldbu	r2,0(r2)
 4023b04:	10803fcc 	andi	r2,r2,255
 4023b08:	1080201c 	xori	r2,r2,128
 4023b0c:	10bfe004 	addi	r2,r2,-128
 4023b10:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4023b14:	e0fffd17 	ldw	r3,-12(fp)
 4023b18:	e0bffb17 	ldw	r2,-20(fp)
 4023b1c:	18bfef36 	bltu	r3,r2,4023adc <__flash_rwdata_start+0xffffe0fc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 4023b20:	e0bffe17 	ldw	r2,-8(fp)
}
 4023b24:	e037883a 	mov	sp,fp
 4023b28:	df000017 	ldw	fp,0(sp)
 4023b2c:	dec00104 	addi	sp,sp,4
 4023b30:	f800283a 	ret

04023b34 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4023b34:	defffa04 	addi	sp,sp,-24
 4023b38:	dfc00515 	stw	ra,20(sp)
 4023b3c:	df000415 	stw	fp,16(sp)
 4023b40:	df000404 	addi	fp,sp,16
 4023b44:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4023b48:	0007883a 	mov	r3,zero
 4023b4c:	e0bfff17 	ldw	r2,-4(fp)
 4023b50:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4023b54:	e0bfff17 	ldw	r2,-4(fp)
 4023b58:	10800104 	addi	r2,r2,4
 4023b5c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4023b60:	0005303a 	rdctl	r2,status
 4023b64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4023b68:	e0fffd17 	ldw	r3,-12(fp)
 4023b6c:	00bfff84 	movi	r2,-2
 4023b70:	1884703a 	and	r2,r3,r2
 4023b74:	1001703a 	wrctl	status,r2
  
  return context;
 4023b78:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4023b7c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4023b80:	4024bb40 	call	4024bb4 <alt_tick>
 4023b84:	e0bffc17 	ldw	r2,-16(fp)
 4023b88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023b8c:	e0bffe17 	ldw	r2,-8(fp)
 4023b90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4023b94:	0001883a 	nop
 4023b98:	e037883a 	mov	sp,fp
 4023b9c:	dfc00117 	ldw	ra,4(sp)
 4023ba0:	df000017 	ldw	fp,0(sp)
 4023ba4:	dec00204 	addi	sp,sp,8
 4023ba8:	f800283a 	ret

04023bac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4023bac:	defff804 	addi	sp,sp,-32
 4023bb0:	dfc00715 	stw	ra,28(sp)
 4023bb4:	df000615 	stw	fp,24(sp)
 4023bb8:	df000604 	addi	fp,sp,24
 4023bbc:	e13ffc15 	stw	r4,-16(fp)
 4023bc0:	e17ffd15 	stw	r5,-12(fp)
 4023bc4:	e1bffe15 	stw	r6,-8(fp)
 4023bc8:	e1ffff15 	stw	r7,-4(fp)
 4023bcc:	e0bfff17 	ldw	r2,-4(fp)
 4023bd0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4023bd4:	d0a01517 	ldw	r2,-32684(gp)
 4023bd8:	1000021e 	bne	r2,zero,4023be4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4023bdc:	e0bffb17 	ldw	r2,-20(fp)
 4023be0:	d0a01515 	stw	r2,-32684(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4023be4:	e0bffc17 	ldw	r2,-16(fp)
 4023be8:	10800104 	addi	r2,r2,4
 4023bec:	00c001c4 	movi	r3,7
 4023bf0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4023bf4:	d8000015 	stw	zero,0(sp)
 4023bf8:	e1fffc17 	ldw	r7,-16(fp)
 4023bfc:	018100b4 	movhi	r6,1026
 4023c00:	318ecd04 	addi	r6,r6,15156
 4023c04:	e17ffe17 	ldw	r5,-8(fp)
 4023c08:	e13ffd17 	ldw	r4,-12(fp)
 4023c0c:	40244100 	call	4024410 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4023c10:	0001883a 	nop
 4023c14:	e037883a 	mov	sp,fp
 4023c18:	dfc00117 	ldw	ra,4(sp)
 4023c1c:	df000017 	ldw	fp,0(sp)
 4023c20:	dec00204 	addi	sp,sp,8
 4023c24:	f800283a 	ret

04023c28 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 4023c28:	defffc04 	addi	sp,sp,-16
 4023c2c:	dfc00315 	stw	ra,12(sp)
 4023c30:	df000215 	stw	fp,8(sp)
 4023c34:	df000204 	addi	fp,sp,8
 4023c38:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 4023c3c:	e0bfff17 	ldw	r2,-4(fp)
 4023c40:	10800217 	ldw	r2,8(r2)
 4023c44:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 4023c48:	00000b06 	br	4023c78 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 4023c4c:	01400034 	movhi	r5,0
 4023c50:	2941ae04 	addi	r5,r5,1720
 4023c54:	e13ffe17 	ldw	r4,-8(fp)
 4023c58:	4024fac0 	call	4024fac <strcmp>
 4023c5c:	1000031e 	bne	r2,zero,4023c6c <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
 4023c60:	e0bffe17 	ldw	r2,-8(fp)
 4023c64:	10000005 	stb	zero,0(r2)
			break;
 4023c68:	00000906 	br	4023c90 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 4023c6c:	e0bffe17 	ldw	r2,-8(fp)
 4023c70:	10800044 	addi	r2,r2,1
 4023c74:	e0bffe15 	stw	r2,-8(fp)
 4023c78:	e0bffe17 	ldw	r2,-8(fp)
 4023c7c:	10800003 	ldbu	r2,0(r2)
 4023c80:	10803fcc 	andi	r2,r2,255
 4023c84:	1080201c 	xori	r2,r2,128
 4023c88:	10bfe004 	addi	r2,r2,-128
 4023c8c:	103fef1e 	bne	r2,zero,4023c4c <__flash_rwdata_start+0xffffe26c>
			(*name) = '\0';
			break;
		}
	}
	
	return;
 4023c90:	0001883a 	nop
}
 4023c94:	e037883a 	mov	sp,fp
 4023c98:	dfc00117 	ldw	ra,4(sp)
 4023c9c:	df000017 	ldw	fp,0(sp)
 4023ca0:	dec00204 	addi	sp,sp,8
 4023ca4:	f800283a 	ret

04023ca8 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 4023ca8:	defffc04 	addi	sp,sp,-16
 4023cac:	dfc00315 	stw	ra,12(sp)
 4023cb0:	df000215 	stw	fp,8(sp)
 4023cb4:	df000204 	addi	fp,sp,8
 4023cb8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 4023cbc:	d1600704 	addi	r5,gp,-32740
 4023cc0:	e13fff17 	ldw	r4,-4(fp)
 4023cc4:	40243600 	call	4024360 <alt_find_dev>
 4023cc8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 4023ccc:	e0bffe17 	ldw	r2,-8(fp)
}
 4023cd0:	e037883a 	mov	sp,fp
 4023cd4:	dfc00117 	ldw	ra,4(sp)
 4023cd8:	df000017 	ldw	fp,0(sp)
 4023cdc:	dec00204 	addi	sp,sp,8
 4023ce0:	f800283a 	ret

04023ce4 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 4023ce4:	defffa04 	addi	sp,sp,-24
 4023ce8:	df000515 	stw	fp,20(sp)
 4023cec:	df000504 	addi	fp,sp,20
 4023cf0:	e13ffc15 	stw	r4,-16(fp)
 4023cf4:	2805883a 	mov	r2,r5
 4023cf8:	e1bffe15 	stw	r6,-8(fp)
 4023cfc:	e1ffff15 	stw	r7,-4(fp)
 4023d00:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 4023d04:	e0bffc17 	ldw	r2,-16(fp)
 4023d08:	10800c17 	ldw	r2,48(r2)
 4023d0c:	e0fffe17 	ldw	r3,-8(fp)
 4023d10:	1880042e 	bgeu	r3,r2,4023d24 <alt_up_char_buffer_draw+0x40>
 4023d14:	e0bffc17 	ldw	r2,-16(fp)
 4023d18:	10800d17 	ldw	r2,52(r2)
 4023d1c:	e0ffff17 	ldw	r3,-4(fp)
 4023d20:	18800236 	bltu	r3,r2,4023d2c <alt_up_char_buffer_draw+0x48>
		return -1;
 4023d24:	00bfffc4 	movi	r2,-1
 4023d28:	00001d06 	br	4023da0 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 4023d2c:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 4023d30:	e0bffc17 	ldw	r2,-16(fp)
 4023d34:	10c00f17 	ldw	r3,60(r2)
 4023d38:	e0bffe17 	ldw	r2,-8(fp)
 4023d3c:	1886703a 	and	r3,r3,r2
 4023d40:	e0bffc17 	ldw	r2,-16(fp)
 4023d44:	10800e17 	ldw	r2,56(r2)
 4023d48:	1884983a 	sll	r2,r3,r2
 4023d4c:	e0fffb17 	ldw	r3,-20(fp)
 4023d50:	1884b03a 	or	r2,r3,r2
 4023d54:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 4023d58:	e0bffc17 	ldw	r2,-16(fp)
 4023d5c:	10c01117 	ldw	r3,68(r2)
 4023d60:	e0bfff17 	ldw	r2,-4(fp)
 4023d64:	1886703a 	and	r3,r3,r2
 4023d68:	e0bffc17 	ldw	r2,-16(fp)
 4023d6c:	10801017 	ldw	r2,64(r2)
 4023d70:	1884983a 	sll	r2,r3,r2
 4023d74:	e0fffb17 	ldw	r3,-20(fp)
 4023d78:	1884b03a 	or	r2,r3,r2
 4023d7c:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 4023d80:	e0bffc17 	ldw	r2,-16(fp)
 4023d84:	10c00b17 	ldw	r3,44(r2)
 4023d88:	e0bffb17 	ldw	r2,-20(fp)
 4023d8c:	1885883a 	add	r2,r3,r2
 4023d90:	1007883a 	mov	r3,r2
 4023d94:	e0bffd03 	ldbu	r2,-12(fp)
 4023d98:	18800025 	stbio	r2,0(r3)

	return 0;
 4023d9c:	0005883a 	mov	r2,zero
}
 4023da0:	e037883a 	mov	sp,fp
 4023da4:	df000017 	ldw	fp,0(sp)
 4023da8:	dec00104 	addi	sp,sp,4
 4023dac:	f800283a 	ret

04023db0 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 4023db0:	defffa04 	addi	sp,sp,-24
 4023db4:	df000515 	stw	fp,20(sp)
 4023db8:	df000504 	addi	fp,sp,20
 4023dbc:	e13ffc15 	stw	r4,-16(fp)
 4023dc0:	e17ffd15 	stw	r5,-12(fp)
 4023dc4:	e1bffe15 	stw	r6,-8(fp)
 4023dc8:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 4023dcc:	e0bffc17 	ldw	r2,-16(fp)
 4023dd0:	10800c17 	ldw	r2,48(r2)
 4023dd4:	e0fffe17 	ldw	r3,-8(fp)
 4023dd8:	1880042e 	bgeu	r3,r2,4023dec <alt_up_char_buffer_string+0x3c>
 4023ddc:	e0bffc17 	ldw	r2,-16(fp)
 4023de0:	10800d17 	ldw	r2,52(r2)
 4023de4:	e0ffff17 	ldw	r3,-4(fp)
 4023de8:	18800236 	bltu	r3,r2,4023df4 <alt_up_char_buffer_string+0x44>
		return -1;
 4023dec:	00bfffc4 	movi	r2,-1
 4023df0:	00002a06 	br	4023e9c <alt_up_char_buffer_string+0xec>
	
	unsigned int offset = 0;
 4023df4:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 4023df8:	e0bffc17 	ldw	r2,-16(fp)
 4023dfc:	10801017 	ldw	r2,64(r2)
 4023e00:	e0ffff17 	ldw	r3,-4(fp)
 4023e04:	1886983a 	sll	r3,r3,r2
 4023e08:	e0bffe17 	ldw	r2,-8(fp)
 4023e0c:	1885883a 	add	r2,r3,r2
 4023e10:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
 4023e14:	00001a06 	br	4023e80 <alt_up_char_buffer_string+0xd0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 4023e18:	e0bffc17 	ldw	r2,-16(fp)
 4023e1c:	10c00b17 	ldw	r3,44(r2)
 4023e20:	e0bffb17 	ldw	r2,-20(fp)
 4023e24:	1885883a 	add	r2,r3,r2
 4023e28:	1007883a 	mov	r3,r2
 4023e2c:	e0bffd17 	ldw	r2,-12(fp)
 4023e30:	10800003 	ldbu	r2,0(r2)
 4023e34:	10803fcc 	andi	r2,r2,255
 4023e38:	1080201c 	xori	r2,r2,128
 4023e3c:	10bfe004 	addi	r2,r2,-128
 4023e40:	18800025 	stbio	r2,0(r3)
		++ptr;
 4023e44:	e0bffd17 	ldw	r2,-12(fp)
 4023e48:	10800044 	addi	r2,r2,1
 4023e4c:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
 4023e50:	e0bffe17 	ldw	r2,-8(fp)
 4023e54:	10800044 	addi	r2,r2,1
 4023e58:	e0bffe15 	stw	r2,-8(fp)
 4023e5c:	e0bffc17 	ldw	r2,-16(fp)
 4023e60:	10800c17 	ldw	r2,48(r2)
 4023e64:	e0fffe17 	ldw	r3,-8(fp)
 4023e68:	18800236 	bltu	r3,r2,4023e74 <alt_up_char_buffer_string+0xc4>
			return -1;
 4023e6c:	00bfffc4 	movi	r2,-1
 4023e70:	00000a06 	br	4023e9c <alt_up_char_buffer_string+0xec>
		++offset;
 4023e74:	e0bffb17 	ldw	r2,-20(fp)
 4023e78:	10800044 	addi	r2,r2,1
 4023e7c:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 4023e80:	e0bffd17 	ldw	r2,-12(fp)
 4023e84:	10800003 	ldbu	r2,0(r2)
 4023e88:	10803fcc 	andi	r2,r2,255
 4023e8c:	1080201c 	xori	r2,r2,128
 4023e90:	10bfe004 	addi	r2,r2,-128
 4023e94:	103fe01e 	bne	r2,zero,4023e18 <__flash_rwdata_start+0xffffe438>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 4023e98:	0005883a 	mov	r2,zero
}
 4023e9c:	e037883a 	mov	sp,fp
 4023ea0:	df000017 	ldw	fp,0(sp)
 4023ea4:	dec00104 	addi	sp,sp,4
 4023ea8:	f800283a 	ret

04023eac <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 4023eac:	defffe04 	addi	sp,sp,-8
 4023eb0:	df000115 	stw	fp,4(sp)
 4023eb4:	df000104 	addi	fp,sp,4
 4023eb8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 4023ebc:	e0bfff17 	ldw	r2,-4(fp)
 4023ec0:	10800a17 	ldw	r2,40(r2)
 4023ec4:	10800084 	addi	r2,r2,2
 4023ec8:	1007883a 	mov	r3,r2
 4023ecc:	00800044 	movi	r2,1
 4023ed0:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 4023ed4:	0001883a 	nop
 4023ed8:	e0bfff17 	ldw	r2,-4(fp)
 4023edc:	10800a17 	ldw	r2,40(r2)
 4023ee0:	10800084 	addi	r2,r2,2
 4023ee4:	10800023 	ldbuio	r2,0(r2)
 4023ee8:	10803fcc 	andi	r2,r2,255
 4023eec:	1080004c 	andi	r2,r2,1
 4023ef0:	103ff91e 	bne	r2,zero,4023ed8 <__flash_rwdata_start+0xffffe4f8>
	return 0;
 4023ef4:	0005883a 	mov	r2,zero
}
 4023ef8:	e037883a 	mov	sp,fp
 4023efc:	df000017 	ldw	fp,0(sp)
 4023f00:	dec00104 	addi	sp,sp,4
 4023f04:	f800283a 	ret

04023f08 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4023f08:	defffa04 	addi	sp,sp,-24
 4023f0c:	dfc00515 	stw	ra,20(sp)
 4023f10:	df000415 	stw	fp,16(sp)
 4023f14:	df000404 	addi	fp,sp,16
 4023f18:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4023f1c:	00800244 	movi	r2,9
 4023f20:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4023f24:	014003f4 	movhi	r5,15
 4023f28:	29509004 	addi	r5,r5,16960
 4023f2c:	e13ffd17 	ldw	r4,-12(fp)
 4023f30:	4022b080 	call	4022b08 <__mulsi3>
 4023f34:	100b883a 	mov	r5,r2
 4023f38:	0100bef4 	movhi	r4,763
 4023f3c:	213c2004 	addi	r4,r4,-3968
 4023f40:	4022a4c0 	call	4022a4c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4023f44:	100b883a 	mov	r5,r2
 4023f48:	01200034 	movhi	r4,32768
 4023f4c:	213fffc4 	addi	r4,r4,-1
 4023f50:	4022a4c0 	call	4022a4c <__udivsi3>
 4023f54:	100b883a 	mov	r5,r2
 4023f58:	e13fff17 	ldw	r4,-4(fp)
 4023f5c:	4022a4c0 	call	4022a4c <__udivsi3>
 4023f60:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4023f64:	e0bffe17 	ldw	r2,-8(fp)
 4023f68:	10002a26 	beq	r2,zero,4024014 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4023f6c:	e03ffc15 	stw	zero,-16(fp)
 4023f70:	00001706 	br	4023fd0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4023f74:	00a00034 	movhi	r2,32768
 4023f78:	10bfffc4 	addi	r2,r2,-1
 4023f7c:	10bfffc4 	addi	r2,r2,-1
 4023f80:	103ffe1e 	bne	r2,zero,4023f7c <__flash_rwdata_start+0xffffe59c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4023f84:	014003f4 	movhi	r5,15
 4023f88:	29509004 	addi	r5,r5,16960
 4023f8c:	e13ffd17 	ldw	r4,-12(fp)
 4023f90:	4022b080 	call	4022b08 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4023f94:	100b883a 	mov	r5,r2
 4023f98:	0100bef4 	movhi	r4,763
 4023f9c:	213c2004 	addi	r4,r4,-3968
 4023fa0:	4022a4c0 	call	4022a4c <__udivsi3>
 4023fa4:	100b883a 	mov	r5,r2
 4023fa8:	01200034 	movhi	r4,32768
 4023fac:	213fffc4 	addi	r4,r4,-1
 4023fb0:	4022a4c0 	call	4022a4c <__udivsi3>
 4023fb4:	1007883a 	mov	r3,r2
 4023fb8:	e0bfff17 	ldw	r2,-4(fp)
 4023fbc:	10c5c83a 	sub	r2,r2,r3
 4023fc0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4023fc4:	e0bffc17 	ldw	r2,-16(fp)
 4023fc8:	10800044 	addi	r2,r2,1
 4023fcc:	e0bffc15 	stw	r2,-16(fp)
 4023fd0:	e0fffc17 	ldw	r3,-16(fp)
 4023fd4:	e0bffe17 	ldw	r2,-8(fp)
 4023fd8:	18bfe616 	blt	r3,r2,4023f74 <__flash_rwdata_start+0xffffe594>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4023fdc:	014003f4 	movhi	r5,15
 4023fe0:	29509004 	addi	r5,r5,16960
 4023fe4:	e13ffd17 	ldw	r4,-12(fp)
 4023fe8:	4022b080 	call	4022b08 <__mulsi3>
 4023fec:	100b883a 	mov	r5,r2
 4023ff0:	0100bef4 	movhi	r4,763
 4023ff4:	213c2004 	addi	r4,r4,-3968
 4023ff8:	4022a4c0 	call	4022a4c <__udivsi3>
 4023ffc:	e17fff17 	ldw	r5,-4(fp)
 4024000:	1009883a 	mov	r4,r2
 4024004:	4022b080 	call	4022b08 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4024008:	10bfffc4 	addi	r2,r2,-1
 402400c:	103ffe1e 	bne	r2,zero,4024008 <__flash_rwdata_start+0xffffe628>
 4024010:	00000d06 	br	4024048 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4024014:	014003f4 	movhi	r5,15
 4024018:	29509004 	addi	r5,r5,16960
 402401c:	e13ffd17 	ldw	r4,-12(fp)
 4024020:	4022b080 	call	4022b08 <__mulsi3>
 4024024:	100b883a 	mov	r5,r2
 4024028:	0100bef4 	movhi	r4,763
 402402c:	213c2004 	addi	r4,r4,-3968
 4024030:	4022a4c0 	call	4022a4c <__udivsi3>
 4024034:	e17fff17 	ldw	r5,-4(fp)
 4024038:	1009883a 	mov	r4,r2
 402403c:	4022b080 	call	4022b08 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4024040:	10bfffc4 	addi	r2,r2,-1
 4024044:	00bffe16 	blt	zero,r2,4024040 <__flash_rwdata_start+0xffffe660>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4024048:	0005883a 	mov	r2,zero
}
 402404c:	e037883a 	mov	sp,fp
 4024050:	dfc00117 	ldw	ra,4(sp)
 4024054:	df000017 	ldw	fp,0(sp)
 4024058:	dec00204 	addi	sp,sp,8
 402405c:	f800283a 	ret

04024060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4024060:	defffe04 	addi	sp,sp,-8
 4024064:	dfc00115 	stw	ra,4(sp)
 4024068:	df000015 	stw	fp,0(sp)
 402406c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4024070:	d0a00a17 	ldw	r2,-32728(gp)
 4024074:	10000326 	beq	r2,zero,4024084 <alt_get_errno+0x24>
 4024078:	d0a00a17 	ldw	r2,-32728(gp)
 402407c:	103ee83a 	callr	r2
 4024080:	00000106 	br	4024088 <alt_get_errno+0x28>
 4024084:	d0a01004 	addi	r2,gp,-32704
}
 4024088:	e037883a 	mov	sp,fp
 402408c:	dfc00117 	ldw	ra,4(sp)
 4024090:	df000017 	ldw	fp,0(sp)
 4024094:	dec00204 	addi	sp,sp,8
 4024098:	f800283a 	ret

0402409c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 402409c:	defffb04 	addi	sp,sp,-20
 40240a0:	dfc00415 	stw	ra,16(sp)
 40240a4:	df000315 	stw	fp,12(sp)
 40240a8:	df000304 	addi	fp,sp,12
 40240ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40240b0:	e0bfff17 	ldw	r2,-4(fp)
 40240b4:	10000816 	blt	r2,zero,40240d8 <close+0x3c>
 40240b8:	01400304 	movi	r5,12
 40240bc:	e13fff17 	ldw	r4,-4(fp)
 40240c0:	4022b080 	call	4022b08 <__mulsi3>
 40240c4:	1007883a 	mov	r3,r2
 40240c8:	00800034 	movhi	r2,0
 40240cc:	10821b04 	addi	r2,r2,2156
 40240d0:	1885883a 	add	r2,r3,r2
 40240d4:	00000106 	br	40240dc <close+0x40>
 40240d8:	0005883a 	mov	r2,zero
 40240dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 40240e0:	e0bffd17 	ldw	r2,-12(fp)
 40240e4:	10001926 	beq	r2,zero,402414c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40240e8:	e0bffd17 	ldw	r2,-12(fp)
 40240ec:	10800017 	ldw	r2,0(r2)
 40240f0:	10800417 	ldw	r2,16(r2)
 40240f4:	10000626 	beq	r2,zero,4024110 <close+0x74>
 40240f8:	e0bffd17 	ldw	r2,-12(fp)
 40240fc:	10800017 	ldw	r2,0(r2)
 4024100:	10800417 	ldw	r2,16(r2)
 4024104:	e13ffd17 	ldw	r4,-12(fp)
 4024108:	103ee83a 	callr	r2
 402410c:	00000106 	br	4024114 <close+0x78>
 4024110:	0005883a 	mov	r2,zero
 4024114:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4024118:	e13fff17 	ldw	r4,-4(fp)
 402411c:	4024a940 	call	4024a94 <alt_release_fd>
    if (rval < 0)
 4024120:	e0bffe17 	ldw	r2,-8(fp)
 4024124:	1000070e 	bge	r2,zero,4024144 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4024128:	40240600 	call	4024060 <alt_get_errno>
 402412c:	1007883a 	mov	r3,r2
 4024130:	e0bffe17 	ldw	r2,-8(fp)
 4024134:	0085c83a 	sub	r2,zero,r2
 4024138:	18800015 	stw	r2,0(r3)
      return -1;
 402413c:	00bfffc4 	movi	r2,-1
 4024140:	00000706 	br	4024160 <close+0xc4>
    }
    return 0;
 4024144:	0005883a 	mov	r2,zero
 4024148:	00000506 	br	4024160 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402414c:	40240600 	call	4024060 <alt_get_errno>
 4024150:	1007883a 	mov	r3,r2
 4024154:	00801444 	movi	r2,81
 4024158:	18800015 	stw	r2,0(r3)
    return -1;
 402415c:	00bfffc4 	movi	r2,-1
  }
}
 4024160:	e037883a 	mov	sp,fp
 4024164:	dfc00117 	ldw	ra,4(sp)
 4024168:	df000017 	ldw	fp,0(sp)
 402416c:	dec00204 	addi	sp,sp,8
 4024170:	f800283a 	ret

04024174 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4024174:	deffff04 	addi	sp,sp,-4
 4024178:	df000015 	stw	fp,0(sp)
 402417c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4024180:	0001883a 	nop
 4024184:	e037883a 	mov	sp,fp
 4024188:	df000017 	ldw	fp,0(sp)
 402418c:	dec00104 	addi	sp,sp,4
 4024190:	f800283a 	ret

04024194 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4024194:	defffc04 	addi	sp,sp,-16
 4024198:	df000315 	stw	fp,12(sp)
 402419c:	df000304 	addi	fp,sp,12
 40241a0:	e13ffd15 	stw	r4,-12(fp)
 40241a4:	e17ffe15 	stw	r5,-8(fp)
 40241a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40241ac:	e0bfff17 	ldw	r2,-4(fp)
}
 40241b0:	e037883a 	mov	sp,fp
 40241b4:	df000017 	ldw	fp,0(sp)
 40241b8:	dec00104 	addi	sp,sp,4
 40241bc:	f800283a 	ret

040241c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40241c0:	defffe04 	addi	sp,sp,-8
 40241c4:	dfc00115 	stw	ra,4(sp)
 40241c8:	df000015 	stw	fp,0(sp)
 40241cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40241d0:	d0a00a17 	ldw	r2,-32728(gp)
 40241d4:	10000326 	beq	r2,zero,40241e4 <alt_get_errno+0x24>
 40241d8:	d0a00a17 	ldw	r2,-32728(gp)
 40241dc:	103ee83a 	callr	r2
 40241e0:	00000106 	br	40241e8 <alt_get_errno+0x28>
 40241e4:	d0a01004 	addi	r2,gp,-32704
}
 40241e8:	e037883a 	mov	sp,fp
 40241ec:	dfc00117 	ldw	ra,4(sp)
 40241f0:	df000017 	ldw	fp,0(sp)
 40241f4:	dec00204 	addi	sp,sp,8
 40241f8:	f800283a 	ret

040241fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40241fc:	defffa04 	addi	sp,sp,-24
 4024200:	dfc00515 	stw	ra,20(sp)
 4024204:	df000415 	stw	fp,16(sp)
 4024208:	df000404 	addi	fp,sp,16
 402420c:	e13ffe15 	stw	r4,-8(fp)
 4024210:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4024214:	e0bffe17 	ldw	r2,-8(fp)
 4024218:	10000326 	beq	r2,zero,4024228 <alt_dev_llist_insert+0x2c>
 402421c:	e0bffe17 	ldw	r2,-8(fp)
 4024220:	10800217 	ldw	r2,8(r2)
 4024224:	1000061e 	bne	r2,zero,4024240 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4024228:	40241c00 	call	40241c0 <alt_get_errno>
 402422c:	1007883a 	mov	r3,r2
 4024230:	00800584 	movi	r2,22
 4024234:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4024238:	00bffa84 	movi	r2,-22
 402423c:	00001306 	br	402428c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4024240:	e0bffe17 	ldw	r2,-8(fp)
 4024244:	e0ffff17 	ldw	r3,-4(fp)
 4024248:	e0fffc15 	stw	r3,-16(fp)
 402424c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4024250:	e0bffd17 	ldw	r2,-12(fp)
 4024254:	e0fffc17 	ldw	r3,-16(fp)
 4024258:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402425c:	e0bffc17 	ldw	r2,-16(fp)
 4024260:	10c00017 	ldw	r3,0(r2)
 4024264:	e0bffd17 	ldw	r2,-12(fp)
 4024268:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402426c:	e0bffc17 	ldw	r2,-16(fp)
 4024270:	10800017 	ldw	r2,0(r2)
 4024274:	e0fffd17 	ldw	r3,-12(fp)
 4024278:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402427c:	e0bffc17 	ldw	r2,-16(fp)
 4024280:	e0fffd17 	ldw	r3,-12(fp)
 4024284:	10c00015 	stw	r3,0(r2)

  return 0;  
 4024288:	0005883a 	mov	r2,zero
}
 402428c:	e037883a 	mov	sp,fp
 4024290:	dfc00117 	ldw	ra,4(sp)
 4024294:	df000017 	ldw	fp,0(sp)
 4024298:	dec00204 	addi	sp,sp,8
 402429c:	f800283a 	ret

040242a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40242a0:	defffd04 	addi	sp,sp,-12
 40242a4:	dfc00215 	stw	ra,8(sp)
 40242a8:	df000115 	stw	fp,4(sp)
 40242ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40242b0:	008100b4 	movhi	r2,1026
 40242b4:	1094bf04 	addi	r2,r2,21244
 40242b8:	e0bfff15 	stw	r2,-4(fp)
 40242bc:	00000606 	br	40242d8 <_do_ctors+0x38>
        (*ctor) (); 
 40242c0:	e0bfff17 	ldw	r2,-4(fp)
 40242c4:	10800017 	ldw	r2,0(r2)
 40242c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40242cc:	e0bfff17 	ldw	r2,-4(fp)
 40242d0:	10bfff04 	addi	r2,r2,-4
 40242d4:	e0bfff15 	stw	r2,-4(fp)
 40242d8:	e0ffff17 	ldw	r3,-4(fp)
 40242dc:	008100b4 	movhi	r2,1026
 40242e0:	1094c004 	addi	r2,r2,21248
 40242e4:	18bff62e 	bgeu	r3,r2,40242c0 <__flash_rwdata_start+0xffffe8e0>
        (*ctor) (); 
}
 40242e8:	0001883a 	nop
 40242ec:	e037883a 	mov	sp,fp
 40242f0:	dfc00117 	ldw	ra,4(sp)
 40242f4:	df000017 	ldw	fp,0(sp)
 40242f8:	dec00204 	addi	sp,sp,8
 40242fc:	f800283a 	ret

04024300 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4024300:	defffd04 	addi	sp,sp,-12
 4024304:	dfc00215 	stw	ra,8(sp)
 4024308:	df000115 	stw	fp,4(sp)
 402430c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4024310:	008100b4 	movhi	r2,1026
 4024314:	1094bf04 	addi	r2,r2,21244
 4024318:	e0bfff15 	stw	r2,-4(fp)
 402431c:	00000606 	br	4024338 <_do_dtors+0x38>
        (*dtor) (); 
 4024320:	e0bfff17 	ldw	r2,-4(fp)
 4024324:	10800017 	ldw	r2,0(r2)
 4024328:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402432c:	e0bfff17 	ldw	r2,-4(fp)
 4024330:	10bfff04 	addi	r2,r2,-4
 4024334:	e0bfff15 	stw	r2,-4(fp)
 4024338:	e0ffff17 	ldw	r3,-4(fp)
 402433c:	008100b4 	movhi	r2,1026
 4024340:	1094c004 	addi	r2,r2,21248
 4024344:	18bff62e 	bgeu	r3,r2,4024320 <__flash_rwdata_start+0xffffe940>
        (*dtor) (); 
}
 4024348:	0001883a 	nop
 402434c:	e037883a 	mov	sp,fp
 4024350:	dfc00117 	ldw	ra,4(sp)
 4024354:	df000017 	ldw	fp,0(sp)
 4024358:	dec00204 	addi	sp,sp,8
 402435c:	f800283a 	ret

04024360 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4024360:	defffa04 	addi	sp,sp,-24
 4024364:	dfc00515 	stw	ra,20(sp)
 4024368:	df000415 	stw	fp,16(sp)
 402436c:	df000404 	addi	fp,sp,16
 4024370:	e13ffe15 	stw	r4,-8(fp)
 4024374:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4024378:	e0bfff17 	ldw	r2,-4(fp)
 402437c:	10800017 	ldw	r2,0(r2)
 4024380:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4024384:	e13ffe17 	ldw	r4,-8(fp)
 4024388:	4022cc00 	call	4022cc0 <strlen>
 402438c:	10800044 	addi	r2,r2,1
 4024390:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4024394:	00000d06 	br	40243cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4024398:	e0bffc17 	ldw	r2,-16(fp)
 402439c:	10800217 	ldw	r2,8(r2)
 40243a0:	e0fffd17 	ldw	r3,-12(fp)
 40243a4:	180d883a 	mov	r6,r3
 40243a8:	e17ffe17 	ldw	r5,-8(fp)
 40243ac:	1009883a 	mov	r4,r2
 40243b0:	4024f7c0 	call	4024f7c <memcmp>
 40243b4:	1000021e 	bne	r2,zero,40243c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40243b8:	e0bffc17 	ldw	r2,-16(fp)
 40243bc:	00000706 	br	40243dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40243c0:	e0bffc17 	ldw	r2,-16(fp)
 40243c4:	10800017 	ldw	r2,0(r2)
 40243c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40243cc:	e0fffc17 	ldw	r3,-16(fp)
 40243d0:	e0bfff17 	ldw	r2,-4(fp)
 40243d4:	18bff01e 	bne	r3,r2,4024398 <__flash_rwdata_start+0xffffe9b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40243d8:	0005883a 	mov	r2,zero
}
 40243dc:	e037883a 	mov	sp,fp
 40243e0:	dfc00117 	ldw	ra,4(sp)
 40243e4:	df000017 	ldw	fp,0(sp)
 40243e8:	dec00204 	addi	sp,sp,8
 40243ec:	f800283a 	ret

040243f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40243f0:	deffff04 	addi	sp,sp,-4
 40243f4:	df000015 	stw	fp,0(sp)
 40243f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 40243fc:	0001883a 	nop
 4024400:	e037883a 	mov	sp,fp
 4024404:	df000017 	ldw	fp,0(sp)
 4024408:	dec00104 	addi	sp,sp,4
 402440c:	f800283a 	ret

04024410 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4024410:	defff904 	addi	sp,sp,-28
 4024414:	dfc00615 	stw	ra,24(sp)
 4024418:	df000515 	stw	fp,20(sp)
 402441c:	df000504 	addi	fp,sp,20
 4024420:	e13ffc15 	stw	r4,-16(fp)
 4024424:	e17ffd15 	stw	r5,-12(fp)
 4024428:	e1bffe15 	stw	r6,-8(fp)
 402442c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4024430:	e0800217 	ldw	r2,8(fp)
 4024434:	d8800015 	stw	r2,0(sp)
 4024438:	e1ffff17 	ldw	r7,-4(fp)
 402443c:	e1bffe17 	ldw	r6,-8(fp)
 4024440:	e17ffd17 	ldw	r5,-12(fp)
 4024444:	e13ffc17 	ldw	r4,-16(fp)
 4024448:	40245c00 	call	40245c0 <alt_iic_isr_register>
}  
 402444c:	e037883a 	mov	sp,fp
 4024450:	dfc00117 	ldw	ra,4(sp)
 4024454:	df000017 	ldw	fp,0(sp)
 4024458:	dec00204 	addi	sp,sp,8
 402445c:	f800283a 	ret

04024460 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4024460:	defff904 	addi	sp,sp,-28
 4024464:	df000615 	stw	fp,24(sp)
 4024468:	df000604 	addi	fp,sp,24
 402446c:	e13ffe15 	stw	r4,-8(fp)
 4024470:	e17fff15 	stw	r5,-4(fp)
 4024474:	e0bfff17 	ldw	r2,-4(fp)
 4024478:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402447c:	0005303a 	rdctl	r2,status
 4024480:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024484:	e0fffb17 	ldw	r3,-20(fp)
 4024488:	00bfff84 	movi	r2,-2
 402448c:	1884703a 	and	r2,r3,r2
 4024490:	1001703a 	wrctl	status,r2
  
  return context;
 4024494:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4024498:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 402449c:	00c00044 	movi	r3,1
 40244a0:	e0bffa17 	ldw	r2,-24(fp)
 40244a4:	1884983a 	sll	r2,r3,r2
 40244a8:	1007883a 	mov	r3,r2
 40244ac:	d0a01417 	ldw	r2,-32688(gp)
 40244b0:	1884b03a 	or	r2,r3,r2
 40244b4:	d0a01415 	stw	r2,-32688(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40244b8:	d0a01417 	ldw	r2,-32688(gp)
 40244bc:	100170fa 	wrctl	ienable,r2
 40244c0:	e0bffc17 	ldw	r2,-16(fp)
 40244c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40244c8:	e0bffd17 	ldw	r2,-12(fp)
 40244cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40244d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 40244d4:	0001883a 	nop
}
 40244d8:	e037883a 	mov	sp,fp
 40244dc:	df000017 	ldw	fp,0(sp)
 40244e0:	dec00104 	addi	sp,sp,4
 40244e4:	f800283a 	ret

040244e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40244e8:	defff904 	addi	sp,sp,-28
 40244ec:	df000615 	stw	fp,24(sp)
 40244f0:	df000604 	addi	fp,sp,24
 40244f4:	e13ffe15 	stw	r4,-8(fp)
 40244f8:	e17fff15 	stw	r5,-4(fp)
 40244fc:	e0bfff17 	ldw	r2,-4(fp)
 4024500:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024504:	0005303a 	rdctl	r2,status
 4024508:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402450c:	e0fffb17 	ldw	r3,-20(fp)
 4024510:	00bfff84 	movi	r2,-2
 4024514:	1884703a 	and	r2,r3,r2
 4024518:	1001703a 	wrctl	status,r2
  
  return context;
 402451c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4024520:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4024524:	00c00044 	movi	r3,1
 4024528:	e0bffa17 	ldw	r2,-24(fp)
 402452c:	1884983a 	sll	r2,r3,r2
 4024530:	0084303a 	nor	r2,zero,r2
 4024534:	1007883a 	mov	r3,r2
 4024538:	d0a01417 	ldw	r2,-32688(gp)
 402453c:	1884703a 	and	r2,r3,r2
 4024540:	d0a01415 	stw	r2,-32688(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4024544:	d0a01417 	ldw	r2,-32688(gp)
 4024548:	100170fa 	wrctl	ienable,r2
 402454c:	e0bffc17 	ldw	r2,-16(fp)
 4024550:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024554:	e0bffd17 	ldw	r2,-12(fp)
 4024558:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402455c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4024560:	0001883a 	nop
}
 4024564:	e037883a 	mov	sp,fp
 4024568:	df000017 	ldw	fp,0(sp)
 402456c:	dec00104 	addi	sp,sp,4
 4024570:	f800283a 	ret

04024574 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4024574:	defffc04 	addi	sp,sp,-16
 4024578:	df000315 	stw	fp,12(sp)
 402457c:	df000304 	addi	fp,sp,12
 4024580:	e13ffe15 	stw	r4,-8(fp)
 4024584:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4024588:	000530fa 	rdctl	r2,ienable
 402458c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4024590:	00c00044 	movi	r3,1
 4024594:	e0bfff17 	ldw	r2,-4(fp)
 4024598:	1884983a 	sll	r2,r3,r2
 402459c:	1007883a 	mov	r3,r2
 40245a0:	e0bffd17 	ldw	r2,-12(fp)
 40245a4:	1884703a 	and	r2,r3,r2
 40245a8:	1004c03a 	cmpne	r2,r2,zero
 40245ac:	10803fcc 	andi	r2,r2,255
}
 40245b0:	e037883a 	mov	sp,fp
 40245b4:	df000017 	ldw	fp,0(sp)
 40245b8:	dec00104 	addi	sp,sp,4
 40245bc:	f800283a 	ret

040245c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40245c0:	defff504 	addi	sp,sp,-44
 40245c4:	dfc00a15 	stw	ra,40(sp)
 40245c8:	df000915 	stw	fp,36(sp)
 40245cc:	df000904 	addi	fp,sp,36
 40245d0:	e13ffc15 	stw	r4,-16(fp)
 40245d4:	e17ffd15 	stw	r5,-12(fp)
 40245d8:	e1bffe15 	stw	r6,-8(fp)
 40245dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40245e0:	00bffa84 	movi	r2,-22
 40245e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40245e8:	e0bffd17 	ldw	r2,-12(fp)
 40245ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40245f0:	e0bff817 	ldw	r2,-32(fp)
 40245f4:	10800808 	cmpgei	r2,r2,32
 40245f8:	1000271e 	bne	r2,zero,4024698 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40245fc:	0005303a 	rdctl	r2,status
 4024600:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024604:	e0fffb17 	ldw	r3,-20(fp)
 4024608:	00bfff84 	movi	r2,-2
 402460c:	1884703a 	and	r2,r3,r2
 4024610:	1001703a 	wrctl	status,r2
  
  return context;
 4024614:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4024618:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 402461c:	00800034 	movhi	r2,0
 4024620:	1082f904 	addi	r2,r2,3044
 4024624:	e0fff817 	ldw	r3,-32(fp)
 4024628:	180690fa 	slli	r3,r3,3
 402462c:	10c5883a 	add	r2,r2,r3
 4024630:	e0fffe17 	ldw	r3,-8(fp)
 4024634:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4024638:	00800034 	movhi	r2,0
 402463c:	1082f904 	addi	r2,r2,3044
 4024640:	e0fff817 	ldw	r3,-32(fp)
 4024644:	180690fa 	slli	r3,r3,3
 4024648:	10c5883a 	add	r2,r2,r3
 402464c:	10800104 	addi	r2,r2,4
 4024650:	e0ffff17 	ldw	r3,-4(fp)
 4024654:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4024658:	e0bffe17 	ldw	r2,-8(fp)
 402465c:	10000526 	beq	r2,zero,4024674 <alt_iic_isr_register+0xb4>
 4024660:	e0bff817 	ldw	r2,-32(fp)
 4024664:	100b883a 	mov	r5,r2
 4024668:	e13ffc17 	ldw	r4,-16(fp)
 402466c:	40244600 	call	4024460 <alt_ic_irq_enable>
 4024670:	00000406 	br	4024684 <alt_iic_isr_register+0xc4>
 4024674:	e0bff817 	ldw	r2,-32(fp)
 4024678:	100b883a 	mov	r5,r2
 402467c:	e13ffc17 	ldw	r4,-16(fp)
 4024680:	40244e80 	call	40244e8 <alt_ic_irq_disable>
 4024684:	e0bff715 	stw	r2,-36(fp)
 4024688:	e0bffa17 	ldw	r2,-24(fp)
 402468c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024690:	e0bff917 	ldw	r2,-28(fp)
 4024694:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4024698:	e0bff717 	ldw	r2,-36(fp)
}
 402469c:	e037883a 	mov	sp,fp
 40246a0:	dfc00117 	ldw	ra,4(sp)
 40246a4:	df000017 	ldw	fp,0(sp)
 40246a8:	dec00204 	addi	sp,sp,8
 40246ac:	f800283a 	ret

040246b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40246b0:	defff804 	addi	sp,sp,-32
 40246b4:	dfc00715 	stw	ra,28(sp)
 40246b8:	df000615 	stw	fp,24(sp)
 40246bc:	dc000515 	stw	r16,20(sp)
 40246c0:	df000604 	addi	fp,sp,24
 40246c4:	e13ffb15 	stw	r4,-20(fp)
 40246c8:	e17ffc15 	stw	r5,-16(fp)
 40246cc:	e1bffd15 	stw	r6,-12(fp)
 40246d0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 40246d4:	e1bffe17 	ldw	r6,-8(fp)
 40246d8:	e17ffd17 	ldw	r5,-12(fp)
 40246dc:	e13ffc17 	ldw	r4,-16(fp)
 40246e0:	40249380 	call	4024938 <open>
 40246e4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 40246e8:	e0bffa17 	ldw	r2,-24(fp)
 40246ec:	10002216 	blt	r2,zero,4024778 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 40246f0:	04000034 	movhi	r16,0
 40246f4:	84021b04 	addi	r16,r16,2156
 40246f8:	e0bffa17 	ldw	r2,-24(fp)
 40246fc:	01400304 	movi	r5,12
 4024700:	1009883a 	mov	r4,r2
 4024704:	4022b080 	call	4022b08 <__mulsi3>
 4024708:	8085883a 	add	r2,r16,r2
 402470c:	10c00017 	ldw	r3,0(r2)
 4024710:	e0bffb17 	ldw	r2,-20(fp)
 4024714:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4024718:	04000034 	movhi	r16,0
 402471c:	84021b04 	addi	r16,r16,2156
 4024720:	e0bffa17 	ldw	r2,-24(fp)
 4024724:	01400304 	movi	r5,12
 4024728:	1009883a 	mov	r4,r2
 402472c:	4022b080 	call	4022b08 <__mulsi3>
 4024730:	8085883a 	add	r2,r16,r2
 4024734:	10800104 	addi	r2,r2,4
 4024738:	10c00017 	ldw	r3,0(r2)
 402473c:	e0bffb17 	ldw	r2,-20(fp)
 4024740:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4024744:	04000034 	movhi	r16,0
 4024748:	84021b04 	addi	r16,r16,2156
 402474c:	e0bffa17 	ldw	r2,-24(fp)
 4024750:	01400304 	movi	r5,12
 4024754:	1009883a 	mov	r4,r2
 4024758:	4022b080 	call	4022b08 <__mulsi3>
 402475c:	8085883a 	add	r2,r16,r2
 4024760:	10800204 	addi	r2,r2,8
 4024764:	10c00017 	ldw	r3,0(r2)
 4024768:	e0bffb17 	ldw	r2,-20(fp)
 402476c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4024770:	e13ffa17 	ldw	r4,-24(fp)
 4024774:	4024a940 	call	4024a94 <alt_release_fd>
  }
} 
 4024778:	0001883a 	nop
 402477c:	e6ffff04 	addi	sp,fp,-4
 4024780:	dfc00217 	ldw	ra,8(sp)
 4024784:	df000117 	ldw	fp,4(sp)
 4024788:	dc000017 	ldw	r16,0(sp)
 402478c:	dec00304 	addi	sp,sp,12
 4024790:	f800283a 	ret

04024794 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4024794:	defffb04 	addi	sp,sp,-20
 4024798:	dfc00415 	stw	ra,16(sp)
 402479c:	df000315 	stw	fp,12(sp)
 40247a0:	df000304 	addi	fp,sp,12
 40247a4:	e13ffd15 	stw	r4,-12(fp)
 40247a8:	e17ffe15 	stw	r5,-8(fp)
 40247ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40247b0:	01c07fc4 	movi	r7,511
 40247b4:	01800044 	movi	r6,1
 40247b8:	e17ffd17 	ldw	r5,-12(fp)
 40247bc:	01000034 	movhi	r4,0
 40247c0:	21021e04 	addi	r4,r4,2168
 40247c4:	40246b00 	call	40246b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40247c8:	01c07fc4 	movi	r7,511
 40247cc:	000d883a 	mov	r6,zero
 40247d0:	e17ffe17 	ldw	r5,-8(fp)
 40247d4:	01000034 	movhi	r4,0
 40247d8:	21021b04 	addi	r4,r4,2156
 40247dc:	40246b00 	call	40246b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40247e0:	01c07fc4 	movi	r7,511
 40247e4:	01800044 	movi	r6,1
 40247e8:	e17fff17 	ldw	r5,-4(fp)
 40247ec:	01000034 	movhi	r4,0
 40247f0:	21022104 	addi	r4,r4,2180
 40247f4:	40246b00 	call	40246b0 <alt_open_fd>
}  
 40247f8:	0001883a 	nop
 40247fc:	e037883a 	mov	sp,fp
 4024800:	dfc00117 	ldw	ra,4(sp)
 4024804:	df000017 	ldw	fp,0(sp)
 4024808:	dec00204 	addi	sp,sp,8
 402480c:	f800283a 	ret

04024810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4024810:	defffe04 	addi	sp,sp,-8
 4024814:	dfc00115 	stw	ra,4(sp)
 4024818:	df000015 	stw	fp,0(sp)
 402481c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4024820:	d0a00a17 	ldw	r2,-32728(gp)
 4024824:	10000326 	beq	r2,zero,4024834 <alt_get_errno+0x24>
 4024828:	d0a00a17 	ldw	r2,-32728(gp)
 402482c:	103ee83a 	callr	r2
 4024830:	00000106 	br	4024838 <alt_get_errno+0x28>
 4024834:	d0a01004 	addi	r2,gp,-32704
}
 4024838:	e037883a 	mov	sp,fp
 402483c:	dfc00117 	ldw	ra,4(sp)
 4024840:	df000017 	ldw	fp,0(sp)
 4024844:	dec00204 	addi	sp,sp,8
 4024848:	f800283a 	ret

0402484c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 402484c:	defffb04 	addi	sp,sp,-20
 4024850:	dfc00415 	stw	ra,16(sp)
 4024854:	df000315 	stw	fp,12(sp)
 4024858:	dc000215 	stw	r16,8(sp)
 402485c:	df000304 	addi	fp,sp,12
 4024860:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4024864:	e0bffe17 	ldw	r2,-8(fp)
 4024868:	10800217 	ldw	r2,8(r2)
 402486c:	10d00034 	orhi	r3,r2,16384
 4024870:	e0bffe17 	ldw	r2,-8(fp)
 4024874:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4024878:	e03ffd15 	stw	zero,-12(fp)
 402487c:	00002306 	br	402490c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4024880:	04000034 	movhi	r16,0
 4024884:	84021b04 	addi	r16,r16,2156
 4024888:	e0bffd17 	ldw	r2,-12(fp)
 402488c:	01400304 	movi	r5,12
 4024890:	1009883a 	mov	r4,r2
 4024894:	4022b080 	call	4022b08 <__mulsi3>
 4024898:	8085883a 	add	r2,r16,r2
 402489c:	10c00017 	ldw	r3,0(r2)
 40248a0:	e0bffe17 	ldw	r2,-8(fp)
 40248a4:	10800017 	ldw	r2,0(r2)
 40248a8:	1880151e 	bne	r3,r2,4024900 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40248ac:	04000034 	movhi	r16,0
 40248b0:	84021b04 	addi	r16,r16,2156
 40248b4:	e0bffd17 	ldw	r2,-12(fp)
 40248b8:	01400304 	movi	r5,12
 40248bc:	1009883a 	mov	r4,r2
 40248c0:	4022b080 	call	4022b08 <__mulsi3>
 40248c4:	8085883a 	add	r2,r16,r2
 40248c8:	10800204 	addi	r2,r2,8
 40248cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40248d0:	10000b0e 	bge	r2,zero,4024900 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40248d4:	01400304 	movi	r5,12
 40248d8:	e13ffd17 	ldw	r4,-12(fp)
 40248dc:	4022b080 	call	4022b08 <__mulsi3>
 40248e0:	1007883a 	mov	r3,r2
 40248e4:	00800034 	movhi	r2,0
 40248e8:	10821b04 	addi	r2,r2,2156
 40248ec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40248f0:	e0bffe17 	ldw	r2,-8(fp)
 40248f4:	18800226 	beq	r3,r2,4024900 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40248f8:	00bffcc4 	movi	r2,-13
 40248fc:	00000806 	br	4024920 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4024900:	e0bffd17 	ldw	r2,-12(fp)
 4024904:	10800044 	addi	r2,r2,1
 4024908:	e0bffd15 	stw	r2,-12(fp)
 402490c:	d0a00917 	ldw	r2,-32732(gp)
 4024910:	1007883a 	mov	r3,r2
 4024914:	e0bffd17 	ldw	r2,-12(fp)
 4024918:	18bfd92e 	bgeu	r3,r2,4024880 <__flash_rwdata_start+0xffffeea0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 402491c:	0005883a 	mov	r2,zero
}
 4024920:	e6ffff04 	addi	sp,fp,-4
 4024924:	dfc00217 	ldw	ra,8(sp)
 4024928:	df000117 	ldw	fp,4(sp)
 402492c:	dc000017 	ldw	r16,0(sp)
 4024930:	dec00304 	addi	sp,sp,12
 4024934:	f800283a 	ret

04024938 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4024938:	defff604 	addi	sp,sp,-40
 402493c:	dfc00915 	stw	ra,36(sp)
 4024940:	df000815 	stw	fp,32(sp)
 4024944:	df000804 	addi	fp,sp,32
 4024948:	e13ffd15 	stw	r4,-12(fp)
 402494c:	e17ffe15 	stw	r5,-8(fp)
 4024950:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4024954:	00bfffc4 	movi	r2,-1
 4024958:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 402495c:	00bffb44 	movi	r2,-19
 4024960:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4024964:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4024968:	d1600704 	addi	r5,gp,-32740
 402496c:	e13ffd17 	ldw	r4,-12(fp)
 4024970:	40243600 	call	4024360 <alt_find_dev>
 4024974:	e0bff815 	stw	r2,-32(fp)
 4024978:	e0bff817 	ldw	r2,-32(fp)
 402497c:	1000051e 	bne	r2,zero,4024994 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4024980:	e13ffd17 	ldw	r4,-12(fp)
 4024984:	4024ce00 	call	4024ce0 <alt_find_file>
 4024988:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 402498c:	00800044 	movi	r2,1
 4024990:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4024994:	e0bff817 	ldw	r2,-32(fp)
 4024998:	10002b26 	beq	r2,zero,4024a48 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 402499c:	e13ff817 	ldw	r4,-32(fp)
 40249a0:	4024de80 	call	4024de8 <alt_get_fd>
 40249a4:	e0bff915 	stw	r2,-28(fp)
 40249a8:	e0bff917 	ldw	r2,-28(fp)
 40249ac:	1000030e 	bge	r2,zero,40249bc <open+0x84>
    {
      status = index;
 40249b0:	e0bff917 	ldw	r2,-28(fp)
 40249b4:	e0bffa15 	stw	r2,-24(fp)
 40249b8:	00002506 	br	4024a50 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 40249bc:	01400304 	movi	r5,12
 40249c0:	e13ff917 	ldw	r4,-28(fp)
 40249c4:	4022b080 	call	4022b08 <__mulsi3>
 40249c8:	1007883a 	mov	r3,r2
 40249cc:	00800034 	movhi	r2,0
 40249d0:	10821b04 	addi	r2,r2,2156
 40249d4:	1885883a 	add	r2,r3,r2
 40249d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40249dc:	e0fffe17 	ldw	r3,-8(fp)
 40249e0:	00900034 	movhi	r2,16384
 40249e4:	10bfffc4 	addi	r2,r2,-1
 40249e8:	1886703a 	and	r3,r3,r2
 40249ec:	e0bffc17 	ldw	r2,-16(fp)
 40249f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40249f4:	e0bffb17 	ldw	r2,-20(fp)
 40249f8:	1000051e 	bne	r2,zero,4024a10 <open+0xd8>
 40249fc:	e13ffc17 	ldw	r4,-16(fp)
 4024a00:	402484c0 	call	402484c <alt_file_locked>
 4024a04:	e0bffa15 	stw	r2,-24(fp)
 4024a08:	e0bffa17 	ldw	r2,-24(fp)
 4024a0c:	10001016 	blt	r2,zero,4024a50 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4024a10:	e0bff817 	ldw	r2,-32(fp)
 4024a14:	10800317 	ldw	r2,12(r2)
 4024a18:	10000826 	beq	r2,zero,4024a3c <open+0x104>
 4024a1c:	e0bff817 	ldw	r2,-32(fp)
 4024a20:	10800317 	ldw	r2,12(r2)
 4024a24:	e1ffff17 	ldw	r7,-4(fp)
 4024a28:	e1bffe17 	ldw	r6,-8(fp)
 4024a2c:	e17ffd17 	ldw	r5,-12(fp)
 4024a30:	e13ffc17 	ldw	r4,-16(fp)
 4024a34:	103ee83a 	callr	r2
 4024a38:	00000106 	br	4024a40 <open+0x108>
 4024a3c:	0005883a 	mov	r2,zero
 4024a40:	e0bffa15 	stw	r2,-24(fp)
 4024a44:	00000206 	br	4024a50 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4024a48:	00bffb44 	movi	r2,-19
 4024a4c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4024a50:	e0bffa17 	ldw	r2,-24(fp)
 4024a54:	1000090e 	bge	r2,zero,4024a7c <open+0x144>
  {
    alt_release_fd (index);  
 4024a58:	e13ff917 	ldw	r4,-28(fp)
 4024a5c:	4024a940 	call	4024a94 <alt_release_fd>
    ALT_ERRNO = -status;
 4024a60:	40248100 	call	4024810 <alt_get_errno>
 4024a64:	1007883a 	mov	r3,r2
 4024a68:	e0bffa17 	ldw	r2,-24(fp)
 4024a6c:	0085c83a 	sub	r2,zero,r2
 4024a70:	18800015 	stw	r2,0(r3)
    return -1;
 4024a74:	00bfffc4 	movi	r2,-1
 4024a78:	00000106 	br	4024a80 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4024a7c:	e0bff917 	ldw	r2,-28(fp)
}
 4024a80:	e037883a 	mov	sp,fp
 4024a84:	dfc00117 	ldw	ra,4(sp)
 4024a88:	df000017 	ldw	fp,0(sp)
 4024a8c:	dec00204 	addi	sp,sp,8
 4024a90:	f800283a 	ret

04024a94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4024a94:	defffc04 	addi	sp,sp,-16
 4024a98:	dfc00315 	stw	ra,12(sp)
 4024a9c:	df000215 	stw	fp,8(sp)
 4024aa0:	dc000115 	stw	r16,4(sp)
 4024aa4:	df000204 	addi	fp,sp,8
 4024aa8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4024aac:	e0bffe17 	ldw	r2,-8(fp)
 4024ab0:	108000d0 	cmplti	r2,r2,3
 4024ab4:	1000111e 	bne	r2,zero,4024afc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4024ab8:	04000034 	movhi	r16,0
 4024abc:	84021b04 	addi	r16,r16,2156
 4024ac0:	e0bffe17 	ldw	r2,-8(fp)
 4024ac4:	01400304 	movi	r5,12
 4024ac8:	1009883a 	mov	r4,r2
 4024acc:	4022b080 	call	4022b08 <__mulsi3>
 4024ad0:	8085883a 	add	r2,r16,r2
 4024ad4:	10800204 	addi	r2,r2,8
 4024ad8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4024adc:	04000034 	movhi	r16,0
 4024ae0:	84021b04 	addi	r16,r16,2156
 4024ae4:	e0bffe17 	ldw	r2,-8(fp)
 4024ae8:	01400304 	movi	r5,12
 4024aec:	1009883a 	mov	r4,r2
 4024af0:	4022b080 	call	4022b08 <__mulsi3>
 4024af4:	8085883a 	add	r2,r16,r2
 4024af8:	10000015 	stw	zero,0(r2)
  }
}
 4024afc:	0001883a 	nop
 4024b00:	e6ffff04 	addi	sp,fp,-4
 4024b04:	dfc00217 	ldw	ra,8(sp)
 4024b08:	df000117 	ldw	fp,4(sp)
 4024b0c:	dc000017 	ldw	r16,0(sp)
 4024b10:	dec00304 	addi	sp,sp,12
 4024b14:	f800283a 	ret

04024b18 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4024b18:	defffa04 	addi	sp,sp,-24
 4024b1c:	df000515 	stw	fp,20(sp)
 4024b20:	df000504 	addi	fp,sp,20
 4024b24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024b28:	0005303a 	rdctl	r2,status
 4024b2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024b30:	e0fffc17 	ldw	r3,-16(fp)
 4024b34:	00bfff84 	movi	r2,-2
 4024b38:	1884703a 	and	r2,r3,r2
 4024b3c:	1001703a 	wrctl	status,r2
  
  return context;
 4024b40:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4024b44:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4024b48:	e0bfff17 	ldw	r2,-4(fp)
 4024b4c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4024b50:	e0bffd17 	ldw	r2,-12(fp)
 4024b54:	10800017 	ldw	r2,0(r2)
 4024b58:	e0fffd17 	ldw	r3,-12(fp)
 4024b5c:	18c00117 	ldw	r3,4(r3)
 4024b60:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4024b64:	e0bffd17 	ldw	r2,-12(fp)
 4024b68:	10800117 	ldw	r2,4(r2)
 4024b6c:	e0fffd17 	ldw	r3,-12(fp)
 4024b70:	18c00017 	ldw	r3,0(r3)
 4024b74:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4024b78:	e0bffd17 	ldw	r2,-12(fp)
 4024b7c:	e0fffd17 	ldw	r3,-12(fp)
 4024b80:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4024b84:	e0bffd17 	ldw	r2,-12(fp)
 4024b88:	e0fffd17 	ldw	r3,-12(fp)
 4024b8c:	10c00015 	stw	r3,0(r2)
 4024b90:	e0bffb17 	ldw	r2,-20(fp)
 4024b94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024b98:	e0bffe17 	ldw	r2,-8(fp)
 4024b9c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4024ba0:	0001883a 	nop
 4024ba4:	e037883a 	mov	sp,fp
 4024ba8:	df000017 	ldw	fp,0(sp)
 4024bac:	dec00104 	addi	sp,sp,4
 4024bb0:	f800283a 	ret

04024bb4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4024bb4:	defffb04 	addi	sp,sp,-20
 4024bb8:	dfc00415 	stw	ra,16(sp)
 4024bbc:	df000315 	stw	fp,12(sp)
 4024bc0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4024bc4:	d0a00c17 	ldw	r2,-32720(gp)
 4024bc8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4024bcc:	d0a01617 	ldw	r2,-32680(gp)
 4024bd0:	10800044 	addi	r2,r2,1
 4024bd4:	d0a01615 	stw	r2,-32680(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4024bd8:	00002e06 	br	4024c94 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4024bdc:	e0bffd17 	ldw	r2,-12(fp)
 4024be0:	10800017 	ldw	r2,0(r2)
 4024be4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4024be8:	e0bffd17 	ldw	r2,-12(fp)
 4024bec:	10800403 	ldbu	r2,16(r2)
 4024bf0:	10803fcc 	andi	r2,r2,255
 4024bf4:	10000426 	beq	r2,zero,4024c08 <alt_tick+0x54>
 4024bf8:	d0a01617 	ldw	r2,-32680(gp)
 4024bfc:	1000021e 	bne	r2,zero,4024c08 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4024c00:	e0bffd17 	ldw	r2,-12(fp)
 4024c04:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4024c08:	e0bffd17 	ldw	r2,-12(fp)
 4024c0c:	10800217 	ldw	r2,8(r2)
 4024c10:	d0e01617 	ldw	r3,-32680(gp)
 4024c14:	18801d36 	bltu	r3,r2,4024c8c <alt_tick+0xd8>
 4024c18:	e0bffd17 	ldw	r2,-12(fp)
 4024c1c:	10800403 	ldbu	r2,16(r2)
 4024c20:	10803fcc 	andi	r2,r2,255
 4024c24:	1000191e 	bne	r2,zero,4024c8c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4024c28:	e0bffd17 	ldw	r2,-12(fp)
 4024c2c:	10800317 	ldw	r2,12(r2)
 4024c30:	e0fffd17 	ldw	r3,-12(fp)
 4024c34:	18c00517 	ldw	r3,20(r3)
 4024c38:	1809883a 	mov	r4,r3
 4024c3c:	103ee83a 	callr	r2
 4024c40:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4024c44:	e0bfff17 	ldw	r2,-4(fp)
 4024c48:	1000031e 	bne	r2,zero,4024c58 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4024c4c:	e13ffd17 	ldw	r4,-12(fp)
 4024c50:	4024b180 	call	4024b18 <alt_alarm_stop>
 4024c54:	00000d06 	br	4024c8c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4024c58:	e0bffd17 	ldw	r2,-12(fp)
 4024c5c:	10c00217 	ldw	r3,8(r2)
 4024c60:	e0bfff17 	ldw	r2,-4(fp)
 4024c64:	1887883a 	add	r3,r3,r2
 4024c68:	e0bffd17 	ldw	r2,-12(fp)
 4024c6c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4024c70:	e0bffd17 	ldw	r2,-12(fp)
 4024c74:	10c00217 	ldw	r3,8(r2)
 4024c78:	d0a01617 	ldw	r2,-32680(gp)
 4024c7c:	1880032e 	bgeu	r3,r2,4024c8c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4024c80:	e0bffd17 	ldw	r2,-12(fp)
 4024c84:	00c00044 	movi	r3,1
 4024c88:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4024c8c:	e0bffe17 	ldw	r2,-8(fp)
 4024c90:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4024c94:	e0fffd17 	ldw	r3,-12(fp)
 4024c98:	d0a00c04 	addi	r2,gp,-32720
 4024c9c:	18bfcf1e 	bne	r3,r2,4024bdc <__flash_rwdata_start+0xfffff1fc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4024ca0:	0001883a 	nop
}
 4024ca4:	0001883a 	nop
 4024ca8:	e037883a 	mov	sp,fp
 4024cac:	dfc00117 	ldw	ra,4(sp)
 4024cb0:	df000017 	ldw	fp,0(sp)
 4024cb4:	dec00204 	addi	sp,sp,8
 4024cb8:	f800283a 	ret

04024cbc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4024cbc:	deffff04 	addi	sp,sp,-4
 4024cc0:	df000015 	stw	fp,0(sp)
 4024cc4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4024cc8:	000170fa 	wrctl	ienable,zero
}
 4024ccc:	0001883a 	nop
 4024cd0:	e037883a 	mov	sp,fp
 4024cd4:	df000017 	ldw	fp,0(sp)
 4024cd8:	dec00104 	addi	sp,sp,4
 4024cdc:	f800283a 	ret

04024ce0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4024ce0:	defffb04 	addi	sp,sp,-20
 4024ce4:	dfc00415 	stw	ra,16(sp)
 4024ce8:	df000315 	stw	fp,12(sp)
 4024cec:	df000304 	addi	fp,sp,12
 4024cf0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4024cf4:	d0a00517 	ldw	r2,-32748(gp)
 4024cf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4024cfc:	00003106 	br	4024dc4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4024d00:	e0bffd17 	ldw	r2,-12(fp)
 4024d04:	10800217 	ldw	r2,8(r2)
 4024d08:	1009883a 	mov	r4,r2
 4024d0c:	4022cc00 	call	4022cc0 <strlen>
 4024d10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4024d14:	e0bffd17 	ldw	r2,-12(fp)
 4024d18:	10c00217 	ldw	r3,8(r2)
 4024d1c:	e0bffe17 	ldw	r2,-8(fp)
 4024d20:	10bfffc4 	addi	r2,r2,-1
 4024d24:	1885883a 	add	r2,r3,r2
 4024d28:	10800003 	ldbu	r2,0(r2)
 4024d2c:	10803fcc 	andi	r2,r2,255
 4024d30:	1080201c 	xori	r2,r2,128
 4024d34:	10bfe004 	addi	r2,r2,-128
 4024d38:	10800bd8 	cmpnei	r2,r2,47
 4024d3c:	1000031e 	bne	r2,zero,4024d4c <alt_find_file+0x6c>
    {
      len -= 1;
 4024d40:	e0bffe17 	ldw	r2,-8(fp)
 4024d44:	10bfffc4 	addi	r2,r2,-1
 4024d48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4024d4c:	e0bffe17 	ldw	r2,-8(fp)
 4024d50:	e0ffff17 	ldw	r3,-4(fp)
 4024d54:	1885883a 	add	r2,r3,r2
 4024d58:	10800003 	ldbu	r2,0(r2)
 4024d5c:	10803fcc 	andi	r2,r2,255
 4024d60:	1080201c 	xori	r2,r2,128
 4024d64:	10bfe004 	addi	r2,r2,-128
 4024d68:	10800be0 	cmpeqi	r2,r2,47
 4024d6c:	1000081e 	bne	r2,zero,4024d90 <alt_find_file+0xb0>
 4024d70:	e0bffe17 	ldw	r2,-8(fp)
 4024d74:	e0ffff17 	ldw	r3,-4(fp)
 4024d78:	1885883a 	add	r2,r3,r2
 4024d7c:	10800003 	ldbu	r2,0(r2)
 4024d80:	10803fcc 	andi	r2,r2,255
 4024d84:	1080201c 	xori	r2,r2,128
 4024d88:	10bfe004 	addi	r2,r2,-128
 4024d8c:	10000a1e 	bne	r2,zero,4024db8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4024d90:	e0bffd17 	ldw	r2,-12(fp)
 4024d94:	10800217 	ldw	r2,8(r2)
 4024d98:	e0fffe17 	ldw	r3,-8(fp)
 4024d9c:	180d883a 	mov	r6,r3
 4024da0:	e17fff17 	ldw	r5,-4(fp)
 4024da4:	1009883a 	mov	r4,r2
 4024da8:	4024f7c0 	call	4024f7c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4024dac:	1000021e 	bne	r2,zero,4024db8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4024db0:	e0bffd17 	ldw	r2,-12(fp)
 4024db4:	00000706 	br	4024dd4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4024db8:	e0bffd17 	ldw	r2,-12(fp)
 4024dbc:	10800017 	ldw	r2,0(r2)
 4024dc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4024dc4:	e0fffd17 	ldw	r3,-12(fp)
 4024dc8:	d0a00504 	addi	r2,gp,-32748
 4024dcc:	18bfcc1e 	bne	r3,r2,4024d00 <__flash_rwdata_start+0xfffff320>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4024dd0:	0005883a 	mov	r2,zero
}
 4024dd4:	e037883a 	mov	sp,fp
 4024dd8:	dfc00117 	ldw	ra,4(sp)
 4024ddc:	df000017 	ldw	fp,0(sp)
 4024de0:	dec00204 	addi	sp,sp,8
 4024de4:	f800283a 	ret

04024de8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4024de8:	defffa04 	addi	sp,sp,-24
 4024dec:	dfc00515 	stw	ra,20(sp)
 4024df0:	df000415 	stw	fp,16(sp)
 4024df4:	dc000315 	stw	r16,12(sp)
 4024df8:	df000404 	addi	fp,sp,16
 4024dfc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4024e00:	00bffa04 	movi	r2,-24
 4024e04:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4024e08:	e03ffc15 	stw	zero,-16(fp)
 4024e0c:	00001d06 	br	4024e84 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 4024e10:	04000034 	movhi	r16,0
 4024e14:	84021b04 	addi	r16,r16,2156
 4024e18:	e0bffc17 	ldw	r2,-16(fp)
 4024e1c:	01400304 	movi	r5,12
 4024e20:	1009883a 	mov	r4,r2
 4024e24:	4022b080 	call	4022b08 <__mulsi3>
 4024e28:	8085883a 	add	r2,r16,r2
 4024e2c:	10800017 	ldw	r2,0(r2)
 4024e30:	1000111e 	bne	r2,zero,4024e78 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4024e34:	04000034 	movhi	r16,0
 4024e38:	84021b04 	addi	r16,r16,2156
 4024e3c:	e0bffc17 	ldw	r2,-16(fp)
 4024e40:	01400304 	movi	r5,12
 4024e44:	1009883a 	mov	r4,r2
 4024e48:	4022b080 	call	4022b08 <__mulsi3>
 4024e4c:	8085883a 	add	r2,r16,r2
 4024e50:	e0fffe17 	ldw	r3,-8(fp)
 4024e54:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4024e58:	d0e00917 	ldw	r3,-32732(gp)
 4024e5c:	e0bffc17 	ldw	r2,-16(fp)
 4024e60:	1880020e 	bge	r3,r2,4024e6c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4024e64:	e0bffc17 	ldw	r2,-16(fp)
 4024e68:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
 4024e6c:	e0bffc17 	ldw	r2,-16(fp)
 4024e70:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4024e74:	00000606 	br	4024e90 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4024e78:	e0bffc17 	ldw	r2,-16(fp)
 4024e7c:	10800044 	addi	r2,r2,1
 4024e80:	e0bffc15 	stw	r2,-16(fp)
 4024e84:	e0bffc17 	ldw	r2,-16(fp)
 4024e88:	10800810 	cmplti	r2,r2,32
 4024e8c:	103fe01e 	bne	r2,zero,4024e10 <__flash_rwdata_start+0xfffff430>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4024e90:	e0bffd17 	ldw	r2,-12(fp)
}
 4024e94:	e6ffff04 	addi	sp,fp,-4
 4024e98:	dfc00217 	ldw	ra,8(sp)
 4024e9c:	df000117 	ldw	fp,4(sp)
 4024ea0:	dc000017 	ldw	r16,0(sp)
 4024ea4:	dec00304 	addi	sp,sp,12
 4024ea8:	f800283a 	ret

04024eac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4024eac:	defffe04 	addi	sp,sp,-8
 4024eb0:	df000115 	stw	fp,4(sp)
 4024eb4:	df000104 	addi	fp,sp,4
 4024eb8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4024ebc:	e0bfff17 	ldw	r2,-4(fp)
 4024ec0:	10bffe84 	addi	r2,r2,-6
 4024ec4:	10c00428 	cmpgeui	r3,r2,16
 4024ec8:	18001a1e 	bne	r3,zero,4024f34 <alt_exception_cause_generated_bad_addr+0x88>
 4024ecc:	100690ba 	slli	r3,r2,2
 4024ed0:	008100b4 	movhi	r2,1026
 4024ed4:	1093b904 	addi	r2,r2,20196
 4024ed8:	1885883a 	add	r2,r3,r2
 4024edc:	10800017 	ldw	r2,0(r2)
 4024ee0:	1000683a 	jmp	r2
 4024ee4:	04024f24 	muli	r16,zero,2364
 4024ee8:	04024f24 	muli	r16,zero,2364
 4024eec:	04024f34 	movhi	r16,2364
 4024ef0:	04024f34 	movhi	r16,2364
 4024ef4:	04024f34 	movhi	r16,2364
 4024ef8:	04024f24 	muli	r16,zero,2364
 4024efc:	04024f2c 	andhi	r16,zero,2364
 4024f00:	04024f34 	movhi	r16,2364
 4024f04:	04024f24 	muli	r16,zero,2364
 4024f08:	04024f24 	muli	r16,zero,2364
 4024f0c:	04024f34 	movhi	r16,2364
 4024f10:	04024f24 	muli	r16,zero,2364
 4024f14:	04024f2c 	andhi	r16,zero,2364
 4024f18:	04024f34 	movhi	r16,2364
 4024f1c:	04024f34 	movhi	r16,2364
 4024f20:	04024f24 	muli	r16,zero,2364
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4024f24:	00800044 	movi	r2,1
 4024f28:	00000306 	br	4024f38 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4024f2c:	0005883a 	mov	r2,zero
 4024f30:	00000106 	br	4024f38 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4024f34:	0005883a 	mov	r2,zero
  }
}
 4024f38:	e037883a 	mov	sp,fp
 4024f3c:	df000017 	ldw	fp,0(sp)
 4024f40:	dec00104 	addi	sp,sp,4
 4024f44:	f800283a 	ret

04024f48 <atexit>:
 4024f48:	200b883a 	mov	r5,r4
 4024f4c:	000f883a 	mov	r7,zero
 4024f50:	000d883a 	mov	r6,zero
 4024f54:	0009883a 	mov	r4,zero
 4024f58:	4024fe41 	jmpi	4024fe4 <__register_exitproc>

04024f5c <exit>:
 4024f5c:	defffe04 	addi	sp,sp,-8
 4024f60:	000b883a 	mov	r5,zero
 4024f64:	dc000015 	stw	r16,0(sp)
 4024f68:	dfc00115 	stw	ra,4(sp)
 4024f6c:	2021883a 	mov	r16,r4
 4024f70:	402513c0 	call	402513c <__call_exitprocs>
 4024f74:	8009883a 	mov	r4,r16
 4024f78:	40252cc0 	call	40252cc <_exit>

04024f7c <memcmp>:
 4024f7c:	218d883a 	add	r6,r4,r6
 4024f80:	21800826 	beq	r4,r6,4024fa4 <memcmp+0x28>
 4024f84:	20800003 	ldbu	r2,0(r4)
 4024f88:	28c00003 	ldbu	r3,0(r5)
 4024f8c:	10c00226 	beq	r2,r3,4024f98 <memcmp+0x1c>
 4024f90:	10c5c83a 	sub	r2,r2,r3
 4024f94:	f800283a 	ret
 4024f98:	21000044 	addi	r4,r4,1
 4024f9c:	29400044 	addi	r5,r5,1
 4024fa0:	003ff706 	br	4024f80 <__flash_rwdata_start+0xfffff5a0>
 4024fa4:	0005883a 	mov	r2,zero
 4024fa8:	f800283a 	ret

04024fac <strcmp>:
 4024fac:	20800003 	ldbu	r2,0(r4)
 4024fb0:	10c03fcc 	andi	r3,r2,255
 4024fb4:	18c0201c 	xori	r3,r3,128
 4024fb8:	18ffe004 	addi	r3,r3,-128
 4024fbc:	18000526 	beq	r3,zero,4024fd4 <strcmp+0x28>
 4024fc0:	29800007 	ldb	r6,0(r5)
 4024fc4:	1980031e 	bne	r3,r6,4024fd4 <strcmp+0x28>
 4024fc8:	21000044 	addi	r4,r4,1
 4024fcc:	29400044 	addi	r5,r5,1
 4024fd0:	003ff606 	br	4024fac <__flash_rwdata_start+0xfffff5cc>
 4024fd4:	28c00003 	ldbu	r3,0(r5)
 4024fd8:	10803fcc 	andi	r2,r2,255
 4024fdc:	10c5c83a 	sub	r2,r2,r3
 4024fe0:	f800283a 	ret

04024fe4 <__register_exitproc>:
 4024fe4:	00800034 	movhi	r2,0
 4024fe8:	10827e04 	addi	r2,r2,2552
 4024fec:	10c00017 	ldw	r3,0(r2)
 4024ff0:	defff904 	addi	sp,sp,-28
 4024ff4:	dc000015 	stw	r16,0(sp)
 4024ff8:	1c000c17 	ldw	r16,48(r3)
 4024ffc:	dd400515 	stw	r21,20(sp)
 4025000:	dd000415 	stw	r20,16(sp)
 4025004:	dcc00315 	stw	r19,12(sp)
 4025008:	dc800215 	stw	r18,8(sp)
 402500c:	dc400115 	stw	r17,4(sp)
 4025010:	dfc00615 	stw	ra,24(sp)
 4025014:	202b883a 	mov	r21,r4
 4025018:	2823883a 	mov	r17,r5
 402501c:	3027883a 	mov	r19,r6
 4025020:	3825883a 	mov	r18,r7
 4025024:	1029883a 	mov	r20,r2
 4025028:	8000021e 	bne	r16,zero,4025034 <__register_exitproc+0x50>
 402502c:	1c000d04 	addi	r16,r3,52
 4025030:	1c000c15 	stw	r16,48(r3)
 4025034:	80800117 	ldw	r2,4(r16)
 4025038:	00c007c4 	movi	r3,31
 402503c:	1880110e 	bge	r3,r2,4025084 <__register_exitproc+0xa0>
 4025040:	00800034 	movhi	r2,0
 4025044:	10800004 	addi	r2,r2,0
 4025048:	1000021e 	bne	r2,zero,4025054 <__register_exitproc+0x70>
 402504c:	00bfffc4 	movi	r2,-1
 4025050:	00003106 	br	4025118 <__register_exitproc+0x134>
 4025054:	01002304 	movi	r4,140
 4025058:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 402505c:	1021883a 	mov	r16,r2
 4025060:	103ffa26 	beq	r2,zero,402504c <__flash_rwdata_start+0xfffff66c>
 4025064:	10000115 	stw	zero,4(r2)
 4025068:	a0800017 	ldw	r2,0(r20)
 402506c:	10c00c17 	ldw	r3,48(r2)
 4025070:	80c00015 	stw	r3,0(r16)
 4025074:	14000c15 	stw	r16,48(r2)
 4025078:	80002215 	stw	zero,136(r16)
 402507c:	a8001d26 	beq	r21,zero,40250f4 <__register_exitproc+0x110>
 4025080:	00000606 	br	402509c <__register_exitproc+0xb8>
 4025084:	a8001b26 	beq	r21,zero,40250f4 <__register_exitproc+0x110>
 4025088:	80802217 	ldw	r2,136(r16)
 402508c:	1000091e 	bne	r2,zero,40250b4 <__register_exitproc+0xd0>
 4025090:	00800034 	movhi	r2,0
 4025094:	10800004 	addi	r2,r2,0
 4025098:	103fec26 	beq	r2,zero,402504c <__flash_rwdata_start+0xfffff66c>
 402509c:	01004204 	movi	r4,264
 40250a0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 40250a4:	103fe926 	beq	r2,zero,402504c <__flash_rwdata_start+0xfffff66c>
 40250a8:	10004015 	stw	zero,256(r2)
 40250ac:	10004115 	stw	zero,260(r2)
 40250b0:	80802215 	stw	r2,136(r16)
 40250b4:	81400117 	ldw	r5,4(r16)
 40250b8:	01000044 	movi	r4,1
 40250bc:	2947883a 	add	r3,r5,r5
 40250c0:	18c7883a 	add	r3,r3,r3
 40250c4:	10c7883a 	add	r3,r2,r3
 40250c8:	1cc00015 	stw	r19,0(r3)
 40250cc:	2148983a 	sll	r4,r4,r5
 40250d0:	11404017 	ldw	r5,256(r2)
 40250d4:	290ab03a 	or	r5,r5,r4
 40250d8:	11404015 	stw	r5,256(r2)
 40250dc:	1c802015 	stw	r18,128(r3)
 40250e0:	00c00084 	movi	r3,2
 40250e4:	a8c0031e 	bne	r21,r3,40250f4 <__register_exitproc+0x110>
 40250e8:	10c04117 	ldw	r3,260(r2)
 40250ec:	1908b03a 	or	r4,r3,r4
 40250f0:	11004115 	stw	r4,260(r2)
 40250f4:	80800117 	ldw	r2,4(r16)
 40250f8:	10c00044 	addi	r3,r2,1
 40250fc:	10800084 	addi	r2,r2,2
 4025100:	1085883a 	add	r2,r2,r2
 4025104:	1085883a 	add	r2,r2,r2
 4025108:	80c00115 	stw	r3,4(r16)
 402510c:	80a1883a 	add	r16,r16,r2
 4025110:	84400015 	stw	r17,0(r16)
 4025114:	0005883a 	mov	r2,zero
 4025118:	dfc00617 	ldw	ra,24(sp)
 402511c:	dd400517 	ldw	r21,20(sp)
 4025120:	dd000417 	ldw	r20,16(sp)
 4025124:	dcc00317 	ldw	r19,12(sp)
 4025128:	dc800217 	ldw	r18,8(sp)
 402512c:	dc400117 	ldw	r17,4(sp)
 4025130:	dc000017 	ldw	r16,0(sp)
 4025134:	dec00704 	addi	sp,sp,28
 4025138:	f800283a 	ret

0402513c <__call_exitprocs>:
 402513c:	defff504 	addi	sp,sp,-44
 4025140:	dd000515 	stw	r20,20(sp)
 4025144:	05000034 	movhi	r20,0
 4025148:	dc800315 	stw	r18,12(sp)
 402514c:	dfc00a15 	stw	ra,40(sp)
 4025150:	df000915 	stw	fp,36(sp)
 4025154:	ddc00815 	stw	r23,32(sp)
 4025158:	dd800715 	stw	r22,28(sp)
 402515c:	dd400615 	stw	r21,24(sp)
 4025160:	dcc00415 	stw	r19,16(sp)
 4025164:	dc400215 	stw	r17,8(sp)
 4025168:	dc000115 	stw	r16,4(sp)
 402516c:	d9000015 	stw	r4,0(sp)
 4025170:	2825883a 	mov	r18,r5
 4025174:	a5027e04 	addi	r20,r20,2552
 4025178:	a4400017 	ldw	r17,0(r20)
 402517c:	8cc00c17 	ldw	r19,48(r17)
 4025180:	8c400c04 	addi	r17,r17,48
 4025184:	98004526 	beq	r19,zero,402529c <__call_exitprocs+0x160>
 4025188:	9c000117 	ldw	r16,4(r19)
 402518c:	00900034 	movhi	r2,16384
 4025190:	10bfffc4 	addi	r2,r2,-1
 4025194:	9d402217 	ldw	r21,136(r19)
 4025198:	85bfffc4 	addi	r22,r16,-1
 402519c:	80a1883a 	add	r16,r16,r2
 40251a0:	8421883a 	add	r16,r16,r16
 40251a4:	8421883a 	add	r16,r16,r16
 40251a8:	ac2f883a 	add	r23,r21,r16
 40251ac:	84000204 	addi	r16,r16,8
 40251b0:	9c21883a 	add	r16,r19,r16
 40251b4:	b0002716 	blt	r22,zero,4025254 <__call_exitprocs+0x118>
 40251b8:	90000726 	beq	r18,zero,40251d8 <__call_exitprocs+0x9c>
 40251bc:	a800041e 	bne	r21,zero,40251d0 <__call_exitprocs+0x94>
 40251c0:	b5bfffc4 	addi	r22,r22,-1
 40251c4:	bdffff04 	addi	r23,r23,-4
 40251c8:	843fff04 	addi	r16,r16,-4
 40251cc:	003ff906 	br	40251b4 <__flash_rwdata_start+0xfffff7d4>
 40251d0:	b9002017 	ldw	r4,128(r23)
 40251d4:	913ffa1e 	bne	r18,r4,40251c0 <__flash_rwdata_start+0xfffff7e0>
 40251d8:	99000117 	ldw	r4,4(r19)
 40251dc:	82000017 	ldw	r8,0(r16)
 40251e0:	213fffc4 	addi	r4,r4,-1
 40251e4:	b100021e 	bne	r22,r4,40251f0 <__call_exitprocs+0xb4>
 40251e8:	9d800115 	stw	r22,4(r19)
 40251ec:	00000106 	br	40251f4 <__call_exitprocs+0xb8>
 40251f0:	80000015 	stw	zero,0(r16)
 40251f4:	403ff226 	beq	r8,zero,40251c0 <__flash_rwdata_start+0xfffff7e0>
 40251f8:	9f000117 	ldw	fp,4(r19)
 40251fc:	a8000526 	beq	r21,zero,4025214 <__call_exitprocs+0xd8>
 4025200:	00800044 	movi	r2,1
 4025204:	1592983a 	sll	r9,r2,r22
 4025208:	a9404017 	ldw	r5,256(r21)
 402520c:	494a703a 	and	r5,r9,r5
 4025210:	2800021e 	bne	r5,zero,402521c <__call_exitprocs+0xe0>
 4025214:	403ee83a 	callr	r8
 4025218:	00000906 	br	4025240 <__call_exitprocs+0x104>
 402521c:	a9004117 	ldw	r4,260(r21)
 4025220:	4908703a 	and	r4,r9,r4
 4025224:	2000041e 	bne	r4,zero,4025238 <__call_exitprocs+0xfc>
 4025228:	b9400017 	ldw	r5,0(r23)
 402522c:	d9000017 	ldw	r4,0(sp)
 4025230:	403ee83a 	callr	r8
 4025234:	00000206 	br	4025240 <__call_exitprocs+0x104>
 4025238:	b9000017 	ldw	r4,0(r23)
 402523c:	403ee83a 	callr	r8
 4025240:	99000117 	ldw	r4,4(r19)
 4025244:	e13fcc1e 	bne	fp,r4,4025178 <__flash_rwdata_start+0xfffff798>
 4025248:	89000017 	ldw	r4,0(r17)
 402524c:	993fdc26 	beq	r19,r4,40251c0 <__flash_rwdata_start+0xfffff7e0>
 4025250:	003fc906 	br	4025178 <__flash_rwdata_start+0xfffff798>
 4025254:	00800034 	movhi	r2,0
 4025258:	10800004 	addi	r2,r2,0
 402525c:	10000f26 	beq	r2,zero,402529c <__call_exitprocs+0x160>
 4025260:	99400117 	ldw	r5,4(r19)
 4025264:	99000017 	ldw	r4,0(r19)
 4025268:	2800091e 	bne	r5,zero,4025290 <__call_exitprocs+0x154>
 402526c:	20000826 	beq	r4,zero,4025290 <__call_exitprocs+0x154>
 4025270:	89000015 	stw	r4,0(r17)
 4025274:	a8000226 	beq	r21,zero,4025280 <__call_exitprocs+0x144>
 4025278:	a809883a 	mov	r4,r21
 402527c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 4025280:	9809883a 	mov	r4,r19
 4025284:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 4025288:	8cc00017 	ldw	r19,0(r17)
 402528c:	003fbd06 	br	4025184 <__flash_rwdata_start+0xfffff7a4>
 4025290:	9823883a 	mov	r17,r19
 4025294:	2027883a 	mov	r19,r4
 4025298:	003fba06 	br	4025184 <__flash_rwdata_start+0xfffff7a4>
 402529c:	dfc00a17 	ldw	ra,40(sp)
 40252a0:	df000917 	ldw	fp,36(sp)
 40252a4:	ddc00817 	ldw	r23,32(sp)
 40252a8:	dd800717 	ldw	r22,28(sp)
 40252ac:	dd400617 	ldw	r21,24(sp)
 40252b0:	dd000517 	ldw	r20,20(sp)
 40252b4:	dcc00417 	ldw	r19,16(sp)
 40252b8:	dc800317 	ldw	r18,12(sp)
 40252bc:	dc400217 	ldw	r17,8(sp)
 40252c0:	dc000117 	ldw	r16,4(sp)
 40252c4:	dec00b04 	addi	sp,sp,44
 40252c8:	f800283a 	ret

040252cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40252cc:	defffd04 	addi	sp,sp,-12
 40252d0:	df000215 	stw	fp,8(sp)
 40252d4:	df000204 	addi	fp,sp,8
 40252d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40252dc:	0001883a 	nop
 40252e0:	e0bfff17 	ldw	r2,-4(fp)
 40252e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40252e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40252ec:	10000226 	beq	r2,zero,40252f8 <_exit+0x2c>
    ALT_SIM_FAIL();
 40252f0:	002af070 	cmpltui	zero,zero,43969
 40252f4:	00000106 	br	40252fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40252f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40252fc:	003fff06 	br	40252fc <__flash_rwdata_start+0xfffff91c>
